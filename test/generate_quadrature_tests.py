'''Susi Lehtola, 2023-07-10

Routines for generating test cases for the quadrature routines in
IntegratorXX using SymPy to evaluate reference values in arbitrary
precision.
'''

from sympy.integrals.quadrature import gauss_legendre, gauss_lobatto
from sympy.core import S
import numpy
import os

# Generate tests with 20 digit precision
ndigits = 20
# Maximum order
nmax = 101

def write_test(out, points, integrator):
    '''Writes out source code for the test case'''

    out.write(f'TEST_CASE("{len(points)} point {integrator}", "[1d-quad]") {{\n')
    out.write(f'IntegratorXX::{integrator}<double,double> quad({len(x)});\n')
    out.write(f'const auto & pts = quad.points();\n')
    out.write(f'const auto & wgt = quad.weights();\n')
    for ipoint, point in enumerate(points):
        out.write(f'REQUIRE_THAT(pts[{ipoint}], Catch::Matchers::WithinAbs({point[0]},x_tolerance));\n')
        out.write(f'REQUIRE_THAT(wgt[{ipoint}], Catch::Matchers::WithinAbs({point[1]},w_tolerance));\n')
    out.write('}\n\n')

generators = {'GaussLegendre' : gauss_legendre, 'GaussLobatto' : gauss_lobatto}

for rule in generators:
    fname = f'{rule.lower()}.cxx'
    if os.path.exists(fname):
        print(f'{fname} already exists, skipping')
        continue
    
    out=open(fname,'w')
    out.write(f'''
/* THIS FILE IS AUTOGENERATED BY generate_quadrature_tests.py.
   DO NOT EDIT THIS FILE, EDIT THE AUTOGENERATOR INSTEAD.
*/

#include "catch2/catch_all.hpp"
#include <integratorxx/quadratures/{rule.lower()}.hpp>
#include <cfloat>

const double x_tolerance = 10*DBL_EPSILON;
const double w_tolerance = 10*DBL_EPSILON;
''')
    for order in range(2,nmax):
        print(f'Generating test for {rule} with {order} points')
        x, w = generators[rule](order, ndigits)
        write_test(out, list(zip(x,w)), rule)
    out.close()

