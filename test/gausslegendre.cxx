
/* THIS FILE IS AUTOGENERATED BY generate_quadrature_tests.py.
   DO NOT EDIT THIS FILE, EDIT THE AUTOGENERATOR INSTEAD.
*/

// clang-format off
#include "catch2/catch_all.hpp"
#include <integratorxx/quadratures/gausslegendre.hpp>
#include <numeric>
#include <vector>
// clang-format on

const double x_tolerance = 10 * std::numeric_limits<double>::epsilon();
const double w_tolerance = 10 * std::numeric_limits<double>::epsilon();

TEST_CASE("2 point GaussLegendre", "[1d-quad]") {
  std::array<double, 2> ref_pts = {-0.57735026918962576451,
                                   0.57735026918962576451};
  std::array<double, 2> ref_wgt = {1.0000000000000000000,
                                   1.0000000000000000000};
  IntegratorXX::GaussLegendre<double, double> quad(2);
  const auto& pts = quad.points();
  const auto& wgt = quad.weights();
  for(auto i = 0ul; i < 2; i++) {
    REQUIRE_THAT(pts[i], Catch::Matchers::WithinAbs(ref_pts[i], x_tolerance));
    REQUIRE_THAT(wgt[i], Catch::Matchers::WithinAbs(ref_wgt[i], w_tolerance));
  }
}

TEST_CASE("3 point GaussLegendre", "[1d-quad]") {
  std::array<double, 3> ref_pts = {-0.77459666924148337704, 0,
                                   0.77459666924148337704};
  std::array<double, 3> ref_wgt = {
      0.55555555555555555556, 0.88888888888888888889, 0.55555555555555555556};
  IntegratorXX::GaussLegendre<double, double> quad(3);
  const auto& pts = quad.points();
  const auto& wgt = quad.weights();
  for(auto i = 0ul; i < 3; i++) {
    REQUIRE_THAT(pts[i], Catch::Matchers::WithinAbs(ref_pts[i], x_tolerance));
    REQUIRE_THAT(wgt[i], Catch::Matchers::WithinAbs(ref_wgt[i], w_tolerance));
  }
}

TEST_CASE("4 point GaussLegendre", "[1d-quad]") {
  std::array<double, 4> ref_pts = {
      -0.86113631159405257522, -0.33998104358485626480, 0.33998104358485626480,
      0.86113631159405257522};
  std::array<double, 4> ref_wgt = {
      0.34785484513745385737, 0.65214515486254614263, 0.65214515486254614263,
      0.34785484513745385737};
  IntegratorXX::GaussLegendre<double, double> quad(4);
  const auto& pts = quad.points();
  const auto& wgt = quad.weights();
  for(auto i = 0ul; i < 4; i++) {
    REQUIRE_THAT(pts[i], Catch::Matchers::WithinAbs(ref_pts[i], x_tolerance));
    REQUIRE_THAT(wgt[i], Catch::Matchers::WithinAbs(ref_wgt[i], w_tolerance));
  }
}

TEST_CASE("5 point GaussLegendre", "[1d-quad]") {
  std::array<double, 5> ref_pts = {
      -0.90617984593866399280, -0.53846931010568309104, 0,
      0.53846931010568309104, 0.90617984593866399280};
  std::array<double, 5> ref_wgt = {
      0.23692688505618908751, 0.47862867049936646804, 0.56888888888888888889,
      0.47862867049936646804, 0.23692688505618908751};
  IntegratorXX::GaussLegendre<double, double> quad(5);
  const auto& pts = quad.points();
  const auto& wgt = quad.weights();
  for(auto i = 0ul; i < 5; i++) {
    REQUIRE_THAT(pts[i], Catch::Matchers::WithinAbs(ref_pts[i], x_tolerance));
    REQUIRE_THAT(wgt[i], Catch::Matchers::WithinAbs(ref_wgt[i], w_tolerance));
  }
}

TEST_CASE("6 point GaussLegendre", "[1d-quad]") {
  std::array<double, 6> ref_pts = {
      -0.93246951420315202781, -0.66120938646626451366, -0.23861918608319690863,
      0.23861918608319690863,  0.66120938646626451366,  0.93246951420315202781};
  std::array<double, 6> ref_wgt = {
      0.17132449237917034504, 0.36076157304813860757, 0.46791393457269104739,
      0.46791393457269104739, 0.36076157304813860757, 0.17132449237917034504};
  IntegratorXX::GaussLegendre<double, double> quad(6);
  const auto& pts = quad.points();
  const auto& wgt = quad.weights();
  for(auto i = 0ul; i < 6; i++) {
    REQUIRE_THAT(pts[i], Catch::Matchers::WithinAbs(ref_pts[i], x_tolerance));
    REQUIRE_THAT(wgt[i], Catch::Matchers::WithinAbs(ref_wgt[i], w_tolerance));
  }
}

TEST_CASE("7 point GaussLegendre", "[1d-quad]") {
  std::array<double, 7> ref_pts = {
      -0.94910791234275852453, -0.74153118559939443986,
      -0.40584515137739716691, 0,
      0.40584515137739716691,  0.74153118559939443986,
      0.94910791234275852453};
  std::array<double, 7> ref_wgt = {
      0.12948496616886969327, 0.27970539148927666790, 0.38183005050511894495,
      0.41795918367346938776, 0.38183005050511894495, 0.27970539148927666790,
      0.12948496616886969327};
  IntegratorXX::GaussLegendre<double, double> quad(7);
  const auto& pts = quad.points();
  const auto& wgt = quad.weights();
  for(auto i = 0ul; i < 7; i++) {
    REQUIRE_THAT(pts[i], Catch::Matchers::WithinAbs(ref_pts[i], x_tolerance));
    REQUIRE_THAT(wgt[i], Catch::Matchers::WithinAbs(ref_wgt[i], w_tolerance));
  }
}

TEST_CASE("8 point GaussLegendre", "[1d-quad]") {
  std::array<double, 8> ref_pts = {
      -0.96028985649753623168, -0.79666647741362673959, -0.52553240991632898582,
      -0.18343464249564980494, 0.18343464249564980494,  0.52553240991632898582,
      0.79666647741362673959,  0.96028985649753623168};
  std::array<double, 8> ref_wgt = {
      0.10122853629037625915, 0.22238103445337447054, 0.31370664587788728734,
      0.36268378337836198297, 0.36268378337836198297, 0.31370664587788728734,
      0.22238103445337447054, 0.10122853629037625915};
  IntegratorXX::GaussLegendre<double, double> quad(8);
  const auto& pts = quad.points();
  const auto& wgt = quad.weights();
  for(auto i = 0ul; i < 8; i++) {
    REQUIRE_THAT(pts[i], Catch::Matchers::WithinAbs(ref_pts[i], x_tolerance));
    REQUIRE_THAT(wgt[i], Catch::Matchers::WithinAbs(ref_wgt[i], w_tolerance));
  }
}

TEST_CASE("9 point GaussLegendre", "[1d-quad]") {
  std::array<double, 9> ref_pts = {-0.96816023950762608984,
                                   -0.83603110732663579430,
                                   -0.61337143270059039731,
                                   -0.32425342340380892904,
                                   0,
                                   0.32425342340380892904,
                                   0.61337143270059039731,
                                   0.83603110732663579430,
                                   0.96816023950762608984};
  std::array<double, 9> ref_wgt = {
      0.081274388361574411972, 0.18064816069485740406, 0.26061069640293546232,
      0.31234707704000284007,  0.33023935500125976316, 0.31234707704000284007,
      0.26061069640293546232,  0.18064816069485740406, 0.081274388361574411972};
  IntegratorXX::GaussLegendre<double, double> quad(9);
  const auto& pts = quad.points();
  const auto& wgt = quad.weights();
  for(auto i = 0ul; i < 9; i++) {
    REQUIRE_THAT(pts[i], Catch::Matchers::WithinAbs(ref_pts[i], x_tolerance));
    REQUIRE_THAT(wgt[i], Catch::Matchers::WithinAbs(ref_wgt[i], w_tolerance));
  }
}

TEST_CASE("10 point GaussLegendre", "[1d-quad]") {
  std::array<double, 10> ref_pts = {
      -0.97390652851717172008, -0.86506336668898451073, -0.67940956829902440623,
      -0.43339539412924719080, -0.14887433898163121088, 0.14887433898163121088,
      0.43339539412924719080,  0.67940956829902440623,  0.86506336668898451073,
      0.97390652851717172008};
  std::array<double, 10> ref_wgt = {
      0.066671344308688137594, 0.14945134915058059315, 0.21908636251598204400,
      0.26926671930999635509,  0.29552422471475287017, 0.29552422471475287017,
      0.26926671930999635509,  0.21908636251598204400, 0.14945134915058059315,
      0.066671344308688137594};
  IntegratorXX::GaussLegendre<double, double> quad(10);
  const auto& pts = quad.points();
  const auto& wgt = quad.weights();
  for(auto i = 0ul; i < 10; i++) {
    REQUIRE_THAT(pts[i], Catch::Matchers::WithinAbs(ref_pts[i], x_tolerance));
    REQUIRE_THAT(wgt[i], Catch::Matchers::WithinAbs(ref_wgt[i], w_tolerance));
  }
}

TEST_CASE("11 point GaussLegendre", "[1d-quad]") {
  std::array<double, 11> ref_pts = {
      -0.97822865814605699280, -0.88706259976809529908, -0.73015200557404932409,
      -0.51909612920681181593, -0.26954315595234497233, 0,
      0.26954315595234497233,  0.51909612920681181593,  0.73015200557404932409,
      0.88706259976809529908,  0.97822865814605699280};
  std::array<double, 11> ref_wgt = {
      0.055668567116173666483, 0.12558036946490462463, 0.18629021092773425143,
      0.23319376459199047992,  0.26280454451024666218, 0.27292508677790063071,
      0.26280454451024666218,  0.23319376459199047992, 0.18629021092773425143,
      0.12558036946490462463,  0.055668567116173666483};
  IntegratorXX::GaussLegendre<double, double> quad(11);
  const auto& pts = quad.points();
  const auto& wgt = quad.weights();
  for(auto i = 0ul; i < 11; i++) {
    REQUIRE_THAT(pts[i], Catch::Matchers::WithinAbs(ref_pts[i], x_tolerance));
    REQUIRE_THAT(wgt[i], Catch::Matchers::WithinAbs(ref_wgt[i], w_tolerance));
  }
}

TEST_CASE("12 point GaussLegendre", "[1d-quad]") {
  std::array<double, 12> ref_pts = {
      -0.98156063424671925069, -0.90411725637047485668, -0.76990267419430468704,
      -0.58731795428661744730, -0.36783149899818019375, -0.12523340851146891547,
      0.12523340851146891547,  0.36783149899818019375,  0.58731795428661744730,
      0.76990267419430468704,  0.90411725637047485668,  0.98156063424671925069};
  std::array<double, 12> ref_wgt = {
      0.047175336386511827195, 0.10693932599531843096, 0.16007832854334622633,
      0.20316742672306592175,  0.23349253653835480876, 0.24914704581340278500,
      0.24914704581340278500,  0.23349253653835480876, 0.20316742672306592175,
      0.16007832854334622633,  0.10693932599531843096, 0.047175336386511827195};
  IntegratorXX::GaussLegendre<double, double> quad(12);
  const auto& pts = quad.points();
  const auto& wgt = quad.weights();
  for(auto i = 0ul; i < 12; i++) {
    REQUIRE_THAT(pts[i], Catch::Matchers::WithinAbs(ref_pts[i], x_tolerance));
    REQUIRE_THAT(wgt[i], Catch::Matchers::WithinAbs(ref_wgt[i], w_tolerance));
  }
}

TEST_CASE("13 point GaussLegendre", "[1d-quad]") {
  std::array<double, 13> ref_pts = {-0.98418305471858814947,
                                    -0.91759839922297796521,
                                    -0.80157809073330991279,
                                    -0.64234933944034022064,
                                    -0.44849275103644685288,
                                    -0.23045831595513479407,
                                    0,
                                    0.23045831595513479407,
                                    0.44849275103644685288,
                                    0.64234933944034022064,
                                    0.80157809073330991279,
                                    0.91759839922297796521,
                                    0.98418305471858814947};
  std::array<double, 13> ref_wgt = {
      0.040484004765315879520, 0.092121499837728447914, 0.13887351021978723846,
      0.17814598076194573828,  0.20781604753688850231,  0.22628318026289723841,
      0.23255155323087391019,  0.22628318026289723841,  0.20781604753688850231,
      0.17814598076194573828,  0.13887351021978723846,  0.092121499837728447914,
      0.040484004765315879520};
  IntegratorXX::GaussLegendre<double, double> quad(13);
  const auto& pts = quad.points();
  const auto& wgt = quad.weights();
  for(auto i = 0ul; i < 13; i++) {
    REQUIRE_THAT(pts[i], Catch::Matchers::WithinAbs(ref_pts[i], x_tolerance));
    REQUIRE_THAT(wgt[i], Catch::Matchers::WithinAbs(ref_wgt[i], w_tolerance));
  }
}

TEST_CASE("14 point GaussLegendre", "[1d-quad]") {
  std::array<double, 14> ref_pts = {
      -0.98628380869681233884, -0.92843488366357351734, -0.82720131506976499319,
      -0.68729290481168547015, -0.51524863635815409197, -0.31911236892788976044,
      -0.10805494870734366207, 0.10805494870734366207,  0.31911236892788976044,
      0.51524863635815409197,  0.68729290481168547015,  0.82720131506976499319,
      0.92843488366357351734,  0.98628380869681233884};
  std::array<double, 14> ref_wgt = {
      0.035119460331751863032, 0.080158087159760209806, 0.12151857068790318469,
      0.15720316715819353457,  0.18553839747793781374,  0.20519846372129560397,
      0.21526385346315779020,  0.21526385346315779020,  0.20519846372129560397,
      0.18553839747793781374,  0.15720316715819353457,  0.12151857068790318469,
      0.080158087159760209806, 0.035119460331751863032};
  IntegratorXX::GaussLegendre<double, double> quad(14);
  const auto& pts = quad.points();
  const auto& wgt = quad.weights();
  for(auto i = 0ul; i < 14; i++) {
    REQUIRE_THAT(pts[i], Catch::Matchers::WithinAbs(ref_pts[i], x_tolerance));
    REQUIRE_THAT(wgt[i], Catch::Matchers::WithinAbs(ref_wgt[i], w_tolerance));
  }
}

TEST_CASE("15 point GaussLegendre", "[1d-quad]") {
  std::array<double, 15> ref_pts = {
      -0.98799251802048542849, -0.93727339240070590431,
      -0.84820658341042721620, -0.72441773136017004742,
      -0.57097217260853884754, -0.39415134707756336990,
      -0.20119409399743452230, 0,
      0.20119409399743452230,  0.39415134707756336990,
      0.57097217260853884754,  0.72441773136017004742,
      0.84820658341042721620,  0.93727339240070590431,
      0.98799251802048542849};
  std::array<double, 15> ref_wgt = {
      0.030753241996117268355, 0.070366047488108124709,
      0.10715922046717193501,  0.13957067792615431445,
      0.16626920581699393355,  0.18616100001556221103,
      0.19843148532711157646,  0.20257824192556127288,
      0.19843148532711157646,  0.18616100001556221103,
      0.16626920581699393355,  0.13957067792615431445,
      0.10715922046717193501,  0.070366047488108124709,
      0.030753241996117268355};
  IntegratorXX::GaussLegendre<double, double> quad(15);
  const auto& pts = quad.points();
  const auto& wgt = quad.weights();
  for(auto i = 0ul; i < 15; i++) {
    REQUIRE_THAT(pts[i], Catch::Matchers::WithinAbs(ref_pts[i], x_tolerance));
    REQUIRE_THAT(wgt[i], Catch::Matchers::WithinAbs(ref_wgt[i], w_tolerance));
  }
}

TEST_CASE("16 point GaussLegendre", "[1d-quad]") {
  std::array<double, 16> ref_pts = {
      -0.98940093499164993260, -0.94457502307323257608,
      -0.86563120238783174388, -0.75540440835500303389,
      -0.61787624440264374845, -0.45801677765722738634,
      -0.28160355077925891323, -0.095012509837637440185,
      0.095012509837637440185, 0.28160355077925891323,
      0.45801677765722738634,  0.61787624440264374845,
      0.75540440835500303389,  0.86563120238783174388,
      0.94457502307323257608,  0.98940093499164993260};
  std::array<double, 16> ref_wgt = {
      0.027152459411754094852, 0.062253523938647892863, 0.095158511682492784810,
      0.12462897125553387205,  0.14959598881657673208,  0.16915651939500253819,
      0.18260341504492358887,  0.18945061045506849629,  0.18945061045506849629,
      0.18260341504492358887,  0.16915651939500253819,  0.14959598881657673208,
      0.12462897125553387205,  0.095158511682492784810, 0.062253523938647892863,
      0.027152459411754094852};
  IntegratorXX::GaussLegendre<double, double> quad(16);
  const auto& pts = quad.points();
  const auto& wgt = quad.weights();
  for(auto i = 0ul; i < 16; i++) {
    REQUIRE_THAT(pts[i], Catch::Matchers::WithinAbs(ref_pts[i], x_tolerance));
    REQUIRE_THAT(wgt[i], Catch::Matchers::WithinAbs(ref_wgt[i], w_tolerance));
  }
}

TEST_CASE("17 point GaussLegendre", "[1d-quad]") {
  std::array<double, 17> ref_pts = {
      -0.99057547531441733568, -0.95067552176876776122, -0.88023915372698590212,
      -0.78151400389680140693, -0.65767115921669076585, -0.51269053708647696789,
      -0.35123176345387631530, -0.17848418149584785585, 0,
      0.17848418149584785585,  0.35123176345387631530,  0.51269053708647696789,
      0.65767115921669076585,  0.78151400389680140693,  0.88023915372698590212,
      0.95067552176876776122,  0.99057547531441733568};
  std::array<double, 17> ref_wgt = {
      0.024148302868547931960, 0.055459529373987201129, 0.085036148317179180883,
      0.11188384719340397109,  0.13513636846852547329,  0.15404576107681028808,
      0.16800410215645004451,  0.17656270536699264633,  0.17944647035620652546,
      0.17656270536699264633,  0.16800410215645004451,  0.15404576107681028808,
      0.13513636846852547329,  0.11188384719340397109,  0.085036148317179180883,
      0.055459529373987201129, 0.024148302868547931960};
  IntegratorXX::GaussLegendre<double, double> quad(17);
  const auto& pts = quad.points();
  const auto& wgt = quad.weights();
  for(auto i = 0ul; i < 17; i++) {
    REQUIRE_THAT(pts[i], Catch::Matchers::WithinAbs(ref_pts[i], x_tolerance));
    REQUIRE_THAT(wgt[i], Catch::Matchers::WithinAbs(ref_wgt[i], w_tolerance));
  }
}

TEST_CASE("18 point GaussLegendre", "[1d-quad]") {
  std::array<double, 18> ref_pts = {
      -0.99156516842093094673,  -0.95582394957139775518,
      -0.89260246649755573921,  -0.80370495897252311568,
      -0.69168704306035320788,  -0.55977083107394753461,
      -0.41175116146284264604,  -0.25188622569150550959,
      -0.084775013041735301242, 0.084775013041735301242,
      0.25188622569150550959,   0.41175116146284264604,
      0.55977083107394753461,   0.69168704306035320788,
      0.80370495897252311568,   0.89260246649755573921,
      0.95582394957139775518,   0.99156516842093094673};
  std::array<double, 18> ref_wgt = {
      0.021616013526483310313, 0.049714548894969796453,
      0.076425730254889056529, 0.10094204410628716556,
      0.12255520671147846018,  0.14064291467065065120,
      0.15468467512626524493,  0.16427648374583272299,
      0.16914238296314359184,  0.16914238296314359184,
      0.16427648374583272299,  0.15468467512626524493,
      0.14064291467065065120,  0.12255520671147846018,
      0.10094204410628716556,  0.076425730254889056529,
      0.049714548894969796453, 0.021616013526483310313};
  IntegratorXX::GaussLegendre<double, double> quad(18);
  const auto& pts = quad.points();
  const auto& wgt = quad.weights();
  for(auto i = 0ul; i < 18; i++) {
    REQUIRE_THAT(pts[i], Catch::Matchers::WithinAbs(ref_pts[i], x_tolerance));
    REQUIRE_THAT(wgt[i], Catch::Matchers::WithinAbs(ref_wgt[i], w_tolerance));
  }
}

TEST_CASE("19 point GaussLegendre", "[1d-quad]") {
  std::array<double, 19> ref_pts = {
      -0.99240684384358440319, -0.96020815213483003085,
      -0.90315590361481790164, -0.82271465653714282498,
      -0.72096617733522937862, -0.60054530466168102347,
      -0.46457074137596094572, -0.31656409996362983199,
      -0.16035864564022537587, 0,
      0.16035864564022537587,  0.31656409996362983199,
      0.46457074137596094572,  0.60054530466168102347,
      0.72096617733522937862,  0.82271465653714282498,
      0.90315590361481790164,  0.96020815213483003085,
      0.99240684384358440319};
  std::array<double, 19> ref_wgt = {
      0.019461788229726477036, 0.044814226765699600333, 0.069044542737641226581,
      0.091490021622449999465, 0.11156664554733399472,  0.12875396253933622768,
      0.14260670217360661178,  0.15276604206585966678,  0.15896884339395434765,
      0.16105444984878369598,  0.15896884339395434765,  0.15276604206585966678,
      0.14260670217360661178,  0.12875396253933622768,  0.11156664554733399472,
      0.091490021622449999465, 0.069044542737641226581, 0.044814226765699600333,
      0.019461788229726477036};
  IntegratorXX::GaussLegendre<double, double> quad(19);
  const auto& pts = quad.points();
  const auto& wgt = quad.weights();
  for(auto i = 0ul; i < 19; i++) {
    REQUIRE_THAT(pts[i], Catch::Matchers::WithinAbs(ref_pts[i], x_tolerance));
    REQUIRE_THAT(wgt[i], Catch::Matchers::WithinAbs(ref_wgt[i], w_tolerance));
  }
}

TEST_CASE("20 point GaussLegendre", "[1d-quad]") {
  std::array<double, 20> ref_pts = {
      -0.99312859918509492479, -0.96397192727791379127,
      -0.91223442825132590587, -0.83911697182221882339,
      -0.74633190646015079261, -0.63605368072651502545,
      -0.51086700195082709800, -0.37370608871541956067,
      -0.22778585114164507808, -0.076526521133497333755,
      0.076526521133497333755, 0.22778585114164507808,
      0.37370608871541956067,  0.51086700195082709800,
      0.63605368072651502545,  0.74633190646015079261,
      0.83911697182221882339,  0.91223442825132590587,
      0.96397192727791379127,  0.99312859918509492479};
  std::array<double, 20> ref_wgt = {
      0.017614007139152118312, 0.040601429800386941331, 0.062672048334109063570,
      0.083276741576704748725, 0.10193011981724043504,  0.11819453196151841731,
      0.13168863844917662690,  0.14209610931838205133,  0.14917298647260374679,
      0.15275338713072585070,  0.15275338713072585070,  0.14917298647260374679,
      0.14209610931838205133,  0.13168863844917662690,  0.11819453196151841731,
      0.10193011981724043504,  0.083276741576704748725, 0.062672048334109063570,
      0.040601429800386941331, 0.017614007139152118312};
  IntegratorXX::GaussLegendre<double, double> quad(20);
  const auto& pts = quad.points();
  const auto& wgt = quad.weights();
  for(auto i = 0ul; i < 20; i++) {
    REQUIRE_THAT(pts[i], Catch::Matchers::WithinAbs(ref_pts[i], x_tolerance));
    REQUIRE_THAT(wgt[i], Catch::Matchers::WithinAbs(ref_wgt[i], w_tolerance));
  }
}

TEST_CASE("21 point GaussLegendre", "[1d-quad]") {
  std::array<double, 21> ref_pts = {-0.99375217062038950026,
                                    -0.96722683856630629432,
                                    -0.92009933415040082879,
                                    -0.85336336458331728365,
                                    -0.76843996347567790862,
                                    -0.66713880419741231931,
                                    -0.55161883588721980706,
                                    -0.42434212020743878357,
                                    -0.28802131680240109660,
                                    -0.14556185416089509094,
                                    0,
                                    0.14556185416089509094,
                                    0.28802131680240109660,
                                    0.42434212020743878357,
                                    0.55161883588721980706,
                                    0.66713880419741231931,
                                    0.76843996347567790862,
                                    0.85336336458331728365,
                                    0.92009933415040082879,
                                    0.96722683856630629432,
                                    0.99375217062038950026};
  std::array<double, 21> ref_wgt = {
      0.016017228257774333324, 0.036953789770852493800,
      0.057134425426857208284, 0.076100113628379302017,
      0.093444423456033861553, 0.10879729916714837766,
      0.12183141605372853420,  0.13226893863333746178,
      0.13988739479107315472,  0.14452440398997005906,
      0.14608113364969042719,  0.14452440398997005906,
      0.13988739479107315472,  0.13226893863333746178,
      0.12183141605372853420,  0.10879729916714837766,
      0.093444423456033861553, 0.076100113628379302017,
      0.057134425426857208284, 0.036953789770852493800,
      0.016017228257774333324};
  IntegratorXX::GaussLegendre<double, double> quad(21);
  const auto& pts = quad.points();
  const auto& wgt = quad.weights();
  for(auto i = 0ul; i < 21; i++) {
    REQUIRE_THAT(pts[i], Catch::Matchers::WithinAbs(ref_pts[i], x_tolerance));
    REQUIRE_THAT(wgt[i], Catch::Matchers::WithinAbs(ref_wgt[i], w_tolerance));
  }
}

TEST_CASE("22 point GaussLegendre", "[1d-quad]") {
  std::array<double, 22> ref_pts = {
      -0.99429458548239929207,  -0.97006049783542872712,
      -0.92695677218717400052,  -0.86581257772030013654,
      -0.78781680597920816200,  -0.69448726318668278005,
      -0.58764040350691159296,  -0.46935583798675702641,
      -0.34193582089208422516,  -0.20786042668822128548,
      -0.069739273319722221214, 0.069739273319722221214,
      0.20786042668822128548,   0.34193582089208422516,
      0.46935583798675702641,   0.58764040350691159296,
      0.69448726318668278005,   0.78781680597920816200,
      0.86581257772030013654,   0.92695677218717400052,
      0.97006049783542872712,   0.99429458548239929207};
  std::array<double, 22> ref_wgt = {
      0.014627995298272200685, 0.033774901584814154793, 0.052293335152683285940,
      0.069796468424520488095, 0.085941606217067727414, 0.10041414444288096493,
      0.11293229608053921839,  0.12325237681051242429,  0.13117350478706237073,
      0.13654149834601517135,  0.13925187285563199338,  0.13925187285563199338,
      0.13654149834601517135,  0.13117350478706237073,  0.12325237681051242429,
      0.11293229608053921839,  0.10041414444288096493,  0.085941606217067727414,
      0.069796468424520488095, 0.052293335152683285940, 0.033774901584814154793,
      0.014627995298272200685};
  IntegratorXX::GaussLegendre<double, double> quad(22);
  const auto& pts = quad.points();
  const auto& wgt = quad.weights();
  for(auto i = 0ul; i < 22; i++) {
    REQUIRE_THAT(pts[i], Catch::Matchers::WithinAbs(ref_pts[i], x_tolerance));
    REQUIRE_THAT(wgt[i], Catch::Matchers::WithinAbs(ref_wgt[i], w_tolerance));
  }
}

TEST_CASE("23 point GaussLegendre", "[1d-quad]") {
  std::array<double, 23> ref_pts = {
      -0.99476933499755212352, -0.97254247121811523196, -0.93297108682601610235,
      -0.87675235827044166738, -0.80488840161883989215, -0.71866136313195019446,
      -0.61960987576364615638, -0.50950147784600754969, -0.39030103803029083142,
      -0.26413568097034493053, -0.13325682429846611093, 0,
      0.13325682429846611093,  0.26413568097034493053,  0.39030103803029083142,
      0.50950147784600754969,  0.61960987576364615638,  0.71866136313195019446,
      0.80488840161883989215,  0.87675235827044166738,  0.93297108682601610235,
      0.97254247121811523196,  0.99476933499755212352};
  std::array<double, 23> ref_wgt = {
      0.013411859487141772081, 0.030988005856979444311, 0.048037671731084668572,
      0.064232421408525852127, 0.079281411776718954923, 0.092915766060035147477,
      0.10489209146454141007,  0.11499664022241136494,  0.12304908430672953047,
      0.12890572218808214998,  0.13246203940469661737,  0.13365457218610617535,
      0.13246203940469661737,  0.12890572218808214998,  0.12304908430672953047,
      0.11499664022241136494,  0.10489209146454141007,  0.092915766060035147477,
      0.079281411776718954923, 0.064232421408525852127, 0.048037671731084668572,
      0.030988005856979444311, 0.013411859487141772081};
  IntegratorXX::GaussLegendre<double, double> quad(23);
  const auto& pts = quad.points();
  const auto& wgt = quad.weights();
  for(auto i = 0ul; i < 23; i++) {
    REQUIRE_THAT(pts[i], Catch::Matchers::WithinAbs(ref_pts[i], x_tolerance));
    REQUIRE_THAT(wgt[i], Catch::Matchers::WithinAbs(ref_wgt[i], w_tolerance));
  }
}

TEST_CASE("24 point GaussLegendre", "[1d-quad]") {
  std::array<double, 24> ref_pts = {
      -0.99518721999702136018, -0.97472855597130949820,
      -0.93827455200273275852, -0.88641552700440103421,
      -0.82000198597390292195, -0.74012419157855436424,
      -0.64809365193697556925, -0.54542147138883953566,
      -0.43379350762604513849, -0.31504267969616337439,
      -0.19111886747361630916, -0.064056892862605626085,
      0.064056892862605626085, 0.19111886747361630916,
      0.31504267969616337439,  0.43379350762604513849,
      0.54542147138883953566,  0.64809365193697556925,
      0.74012419157855436424,  0.82000198597390292195,
      0.88641552700440103421,  0.93827455200273275852,
      0.97472855597130949820,  0.99518721999702136018};
  std::array<double, 24> ref_wgt = {
      0.012341229799987199547, 0.028531388628933663181,
      0.044277438817419806169, 0.059298584915436780746,
      0.073346481411080305734, 0.086190161531953275917,
      0.097618652104113888270, 0.10744427011596563478,
      0.11550566805372560135,  0.12167047292780339120,
      0.12583745634682829612,  0.12793819534675215697,
      0.12793819534675215697,  0.12583745634682829612,
      0.12167047292780339120,  0.11550566805372560135,
      0.10744427011596563478,  0.097618652104113888270,
      0.086190161531953275917, 0.073346481411080305734,
      0.059298584915436780746, 0.044277438817419806169,
      0.028531388628933663181, 0.012341229799987199547};
  IntegratorXX::GaussLegendre<double, double> quad(24);
  const auto& pts = quad.points();
  const auto& wgt = quad.weights();
  for(auto i = 0ul; i < 24; i++) {
    REQUIRE_THAT(pts[i], Catch::Matchers::WithinAbs(ref_pts[i], x_tolerance));
    REQUIRE_THAT(wgt[i], Catch::Matchers::WithinAbs(ref_wgt[i], w_tolerance));
  }
}

TEST_CASE("25 point GaussLegendre", "[1d-quad]") {
  std::array<double, 25> ref_pts = {-0.99555696979049809791,
                                    -0.97666392145951751150,
                                    -0.94297457122897433941,
                                    -0.89499199787827536885,
                                    -0.83344262876083400142,
                                    -0.75925926303735763058,
                                    -0.67356636847346836448,
                                    -0.57766293024122296772,
                                    -0.47300273144571496052,
                                    -0.36117230580938783774,
                                    -0.24386688372098843205,
                                    -0.12286469261071039639,
                                    0,
                                    0.12286469261071039639,
                                    0.24386688372098843205,
                                    0.36117230580938783774,
                                    0.47300273144571496052,
                                    0.57766293024122296772,
                                    0.67356636847346836448,
                                    0.75925926303735763058,
                                    0.83344262876083400142,
                                    0.89499199787827536885,
                                    0.94297457122897433941,
                                    0.97666392145951751150,
                                    0.99555696979049809791};
  std::array<double, 25> ref_wgt = {
      0.011393798501026287948, 0.026354986615032137262, 0.040939156701306312656,
      0.054904695975835191926, 0.068038333812356917207, 0.080140700335001018013,
      0.091028261982963649812, 0.10053594906705064420,  0.10851962447426365312,
      0.11485825914571164834,  0.11945576353578477223,  0.12224244299031004169,
      0.12317605372671545120,  0.12224244299031004169,  0.11945576353578477223,
      0.11485825914571164834,  0.10851962447426365312,  0.10053594906705064420,
      0.091028261982963649812, 0.080140700335001018013, 0.068038333812356917207,
      0.054904695975835191926, 0.040939156701306312656, 0.026354986615032137262,
      0.011393798501026287948};
  IntegratorXX::GaussLegendre<double, double> quad(25);
  const auto& pts = quad.points();
  const auto& wgt = quad.weights();
  for(auto i = 0ul; i < 25; i++) {
    REQUIRE_THAT(pts[i], Catch::Matchers::WithinAbs(ref_pts[i], x_tolerance));
    REQUIRE_THAT(wgt[i], Catch::Matchers::WithinAbs(ref_wgt[i], w_tolerance));
  }
}

TEST_CASE("26 point GaussLegendre", "[1d-quad]") {
  std::array<double, 26> ref_pts = {
      -0.99588570114561692900,  -0.97838544595647099110,
      -0.94715906666171425014,  -0.90263786198430707422,
      -0.84544594278849801880,  -0.77638594882067885619,
      -0.69642726041995726486,  -0.60669229301761806323,
      -0.50844071482450571770,  -0.40305175512348630648,
      -0.29200483948595689514,  -0.17685882035689018397,
      -0.059230093429313207094, 0.059230093429313207094,
      0.17685882035689018397,   0.29200483948595689514,
      0.40305175512348630648,   0.50844071482450571770,
      0.60669229301761806323,   0.69642726041995726486,
      0.77638594882067885619,   0.84544594278849801880,
      0.90263786198430707422,   0.94715906666171425014,
      0.97838544595647099110,   0.99588570114561692900};
  std::array<double, 26> ref_wgt = {
      0.010551372617343007156, 0.024417851092631908790, 0.037962383294362763950,
      0.050975825297147811998, 0.063274046329574835539, 0.074684149765659745887,
      0.085045894313485239210, 0.094213800355914148464, 0.10205916109442542324,
      0.10847184052857659066,  0.11336181654631966655,  0.11666044348529658204,
      0.11832141527926227652,  0.11832141527926227652,  0.11666044348529658204,
      0.11336181654631966655,  0.10847184052857659066,  0.10205916109442542324,
      0.094213800355914148464, 0.085045894313485239210, 0.074684149765659745887,
      0.063274046329574835539, 0.050975825297147811998, 0.037962383294362763950,
      0.024417851092631908790, 0.010551372617343007156};
  IntegratorXX::GaussLegendre<double, double> quad(26);
  const auto& pts = quad.points();
  const auto& wgt = quad.weights();
  for(auto i = 0ul; i < 26; i++) {
    REQUIRE_THAT(pts[i], Catch::Matchers::WithinAbs(ref_pts[i], x_tolerance));
    REQUIRE_THAT(wgt[i], Catch::Matchers::WithinAbs(ref_wgt[i], w_tolerance));
  }
}

TEST_CASE("27 point GaussLegendre", "[1d-quad]") {
  std::array<double, 27> ref_pts = {
      -0.99617926288898856694, -0.97992347596150122286,
      -0.95090055781470500685, -0.90948232067749110430,
      -0.85620790801829449030, -0.79177163907050822714,
      -0.71701347373942369929, -0.63290797194649514093,
      -0.54055156457945689490, -0.44114825175002688059,
      -0.33599390363850889973, -0.22645936543953685886,
      -0.11397258560952996693, 0,
      0.11397258560952996693,  0.22645936543953685886,
      0.33599390363850889973,  0.44114825175002688059,
      0.54055156457945689490,  0.63290797194649514093,
      0.71701347373942369929,  0.79177163907050822714,
      0.85620790801829449030,  0.90948232067749110430,
      0.95090055781470500685,  0.97992347596150122286,
      0.99617926288898856694};
  std::array<double, 27> ref_wgt = {
      0.0097989960512943602611, 0.022686231596180623196,
      0.035297053757419711023,  0.047449412520615062704,
      0.058983536859833599110,  0.069748823766245592984,
      0.079604867773057771263,  0.088423158543756950194,
      0.096088727370028507566,  0.10250163781774579867,
      0.10757828578853318721,   0.11125248835684519267,
      0.11347634610896514862,   0.11422086737895698904,
      0.11347634610896514862,   0.11125248835684519267,
      0.10757828578853318721,   0.10250163781774579867,
      0.096088727370028507566,  0.088423158543756950194,
      0.079604867773057771263,  0.069748823766245592984,
      0.058983536859833599110,  0.047449412520615062704,
      0.035297053757419711023,  0.022686231596180623196,
      0.0097989960512943602611};
  IntegratorXX::GaussLegendre<double, double> quad(27);
  const auto& pts = quad.points();
  const auto& wgt = quad.weights();
  for(auto i = 0ul; i < 27; i++) {
    REQUIRE_THAT(pts[i], Catch::Matchers::WithinAbs(ref_pts[i], x_tolerance));
    REQUIRE_THAT(wgt[i], Catch::Matchers::WithinAbs(ref_wgt[i], w_tolerance));
  }
}

TEST_CASE("28 point GaussLegendre", "[1d-quad]") {
  std::array<double, 28> ref_pts = {
      -0.99644249757395444995, -0.98130316537087275369,
      -0.95425928062893819725, -0.91563302639213207387,
      -0.86589252257439504894, -0.80564137091717917145,
      -0.73561087801363177203, -0.65665109403886496122,
      -0.56972047181140171931, -0.47587422495511826103,
      -0.37625151608907871022, -0.27206162763517807768,
      -0.16456928213338077128, -0.055079289884034270427,
      0.055079289884034270427, 0.16456928213338077128,
      0.27206162763517807768,  0.37625151608907871022,
      0.47587422495511826103,  0.56972047181140171931,
      0.65665109403886496122,  0.73561087801363177203,
      0.80564137091717917145,  0.86589252257439504894,
      0.91563302639213207387,  0.95425928062893819725,
      0.98130316537087275369,  0.99644249757395444995};
  std::array<double, 28> ref_wgt = {
      0.0091242825930945177388, 0.021132112592771259752,
      0.032901427782304379978,  0.044272934759004227840,
      0.055107345675716745432,  0.065272923966999595793,
      0.074646214234568779024,  0.083113417228901218390,
      0.090571744393032840942,  0.096930657997929915850,
      0.10211296757806076981,   0.10605576592284641791,
      0.10871119225829413525,   0.11004701301647519628,
      0.11004701301647519628,   0.10871119225829413525,
      0.10605576592284641791,   0.10211296757806076981,
      0.096930657997929915850,  0.090571744393032840942,
      0.083113417228901218390,  0.074646214234568779024,
      0.065272923966999595793,  0.055107345675716745432,
      0.044272934759004227840,  0.032901427782304379978,
      0.021132112592771259752,  0.0091242825930945177388};
  IntegratorXX::GaussLegendre<double, double> quad(28);
  const auto& pts = quad.points();
  const auto& wgt = quad.weights();
  for(auto i = 0ul; i < 28; i++) {
    REQUIRE_THAT(pts[i], Catch::Matchers::WithinAbs(ref_pts[i], x_tolerance));
    REQUIRE_THAT(wgt[i], Catch::Matchers::WithinAbs(ref_wgt[i], w_tolerance));
  }
}

TEST_CASE("29 point GaussLegendre", "[1d-quad]") {
  std::array<double, 29> ref_pts = {
      -0.99667944226059658616, -0.98254550526141317487, -0.95728559577808772580,
      -0.92118023295305878509, -0.87463780492010279042, -0.81818548761525244499,
      -0.75246285173447713391, -0.67821453760268651516, -0.59628179713822782038,
      -0.50759295512422764210, -0.41315288817400866389, -0.31403163786763993495,
      -0.21135228616600107451, -0.10627823013267923017, 0,
      0.10627823013267923017,  0.21135228616600107451,  0.31403163786763993495,
      0.41315288817400866389,  0.50759295512422764210,  0.59628179713822782038,
      0.67821453760268651516,  0.75246285173447713391,  0.81818548761525244499,
      0.87463780492010279042,  0.92118023295305878509,  0.95728559577808772580,
      0.98254550526141317487,  0.99667944226059658616};
  std::array<double, 29> ref_wgt = {
      0.0085169038787464096543, 0.019732085056122705984,
      0.030740492202093622644,  0.041402062518682836105,
      0.051594826902497923913,  0.061203090657079138542,
      0.070117933255051278570,  0.078238327135763783828,
      0.085472257366172527545,  0.091737757139258763348,
      0.096963834094408606302,  0.10109127375991496612,
      0.10407331007772937391,   0.10587615509732094141,
      0.10647938171831424425,   0.10587615509732094141,
      0.10407331007772937391,   0.10109127375991496612,
      0.096963834094408606302,  0.091737757139258763348,
      0.085472257366172527545,  0.078238327135763783828,
      0.070117933255051278570,  0.061203090657079138542,
      0.051594826902497923913,  0.041402062518682836105,
      0.030740492202093622644,  0.019732085056122705984,
      0.0085169038787464096543};
  IntegratorXX::GaussLegendre<double, double> quad(29);
  const auto& pts = quad.points();
  const auto& wgt = quad.weights();
  for(auto i = 0ul; i < 29; i++) {
    REQUIRE_THAT(pts[i], Catch::Matchers::WithinAbs(ref_pts[i], x_tolerance));
    REQUIRE_THAT(wgt[i], Catch::Matchers::WithinAbs(ref_wgt[i], w_tolerance));
  }
}

TEST_CASE("30 point GaussLegendre", "[1d-quad]") {
  std::array<double, 30> ref_pts = {
      -0.99689348407464954027,  -0.98366812327974720997,
      -0.96002186496830751222,  -0.92620004742927432588,
      -0.88256053579205268154,  -0.82956576238276839744,
      -0.76777743210482619492,  -0.69785049479331579693,
      -0.62052618298924286114,  -0.53662414814201989926,
      -0.44703376953808917678,  -0.35270472553087811347,
      -0.25463692616788984644,  -0.15386991360858354696,
      -0.051471842555317695833, 0.051471842555317695833,
      0.15386991360858354696,   0.25463692616788984644,
      0.35270472553087811347,   0.44703376953808917678,
      0.53662414814201989926,   0.62052618298924286114,
      0.69785049479331579693,   0.76777743210482619492,
      0.82956576238276839744,   0.88256053579205268154,
      0.92620004742927432588,   0.96002186496830751222,
      0.98366812327974720997,   0.99689348407464954027};
  std::array<double, 30> ref_wgt = {
      0.0079681924961666056155, 0.018466468311090959142,
      0.028784707883323369350,  0.038799192569627049597,
      0.048402672830594052903,  0.057493156217619066482,
      0.065974229882180495128,  0.073755974737705206268,
      0.080755895229420215355,  0.086899787201082979802,
      0.092122522237786128718,  0.096368737174644259639,
      0.099593420586795267063,  0.10176238974840550460,
      0.10285265289355884034,   0.10285265289355884034,
      0.10176238974840550460,   0.099593420586795267063,
      0.096368737174644259639,  0.092122522237786128718,
      0.086899787201082979802,  0.080755895229420215355,
      0.073755974737705206268,  0.065974229882180495128,
      0.057493156217619066482,  0.048402672830594052903,
      0.038799192569627049597,  0.028784707883323369350,
      0.018466468311090959142,  0.0079681924961666056155};
  IntegratorXX::GaussLegendre<double, double> quad(30);
  const auto& pts = quad.points();
  const auto& wgt = quad.weights();
  for(auto i = 0ul; i < 30; i++) {
    REQUIRE_THAT(pts[i], Catch::Matchers::WithinAbs(ref_pts[i], x_tolerance));
    REQUIRE_THAT(wgt[i], Catch::Matchers::WithinAbs(ref_wgt[i], w_tolerance));
  }
}

TEST_CASE("31 point GaussLegendre", "[1d-quad]") {
  std::array<double, 31> ref_pts = {
      -0.99708748181947707406,  -0.98468590966515248400,
      -0.96250392509294966179,  -0.93075699789664816496,
      -0.88976002994827104337,  -0.83992032014626734009,
      -0.78173314841662494041,  -0.71577678458685328391,
      -0.64270672292426034618,  -0.56324916140714926272,
      -0.47819378204490248044,  -0.38838590160823294306,
      -0.29471806998170161662,  -0.19812119933557062877,
      -0.099555312152341520325, 0,
      0.099555312152341520325,  0.19812119933557062877,
      0.29471806998170161662,   0.38838590160823294306,
      0.47819378204490248044,   0.56324916140714926272,
      0.64270672292426034618,   0.71577678458685328391,
      0.78173314841662494041,   0.83992032014626734009,
      0.88976002994827104337,   0.93075699789664816496,
      0.96250392509294966179,   0.98468590966515248400,
      0.99708748181947707406};
  std::array<double, 31> ref_wgt = {
      0.0074708315792487758587, 0.017318620790310582463,
      0.027009019184979421801,  0.036432273912385464024,
      0.045493707527201102902,  0.054103082424916853712,
      0.062174786561028426910,  0.069628583235410366168,
      0.076390386598776616426,  0.082392991761589263904,
      0.087576740608477876126,  0.091890113893641478215,
      0.095290242912319512807,  0.097743335386328725093,
      0.099225011226672307875,  0.099720544793426451428,
      0.099225011226672307875,  0.097743335386328725093,
      0.095290242912319512807,  0.091890113893641478215,
      0.087576740608477876126,  0.082392991761589263904,
      0.076390386598776616426,  0.069628583235410366168,
      0.062174786561028426910,  0.054103082424916853712,
      0.045493707527201102902,  0.036432273912385464024,
      0.027009019184979421801,  0.017318620790310582463,
      0.0074708315792487758587};
  IntegratorXX::GaussLegendre<double, double> quad(31);
  const auto& pts = quad.points();
  const auto& wgt = quad.weights();
  for(auto i = 0ul; i < 31; i++) {
    REQUIRE_THAT(pts[i], Catch::Matchers::WithinAbs(ref_pts[i], x_tolerance));
    REQUIRE_THAT(wgt[i], Catch::Matchers::WithinAbs(ref_wgt[i], w_tolerance));
  }
}

TEST_CASE("32 point GaussLegendre", "[1d-quad]") {
  std::array<double, 32> ref_pts = {
      -0.99726386184948156355, -0.98561151154526833540,
      -0.96476225558750643077, -0.93490607593773968917,
      -0.89632115576605212397, -0.84936761373256997013,
      -0.79448379596794240696, -0.73218211874028968039,
      -0.66304426693021520098, -0.58771575724076232904,
      -0.50689990893222939002, -0.42135127613063534536,
      -0.33186860228212764978, -0.23928736225213707454,
      -0.14447196158279649349, -0.048307665687738316235,
      0.048307665687738316235, 0.14447196158279649349,
      0.23928736225213707454,  0.33186860228212764978,
      0.42135127613063534536,  0.50689990893222939002,
      0.58771575724076232904,  0.66304426693021520098,
      0.73218211874028968039,  0.79448379596794240696,
      0.84936761373256997013,  0.89632115576605212397,
      0.93490607593773968917,  0.96476225558750643077,
      0.98561151154526833540,  0.99726386184948156355};
  std::array<double, 32> ref_wgt = {
      0.0070186100094700966004, 0.016274394730905670605,
      0.025392065309262059456,  0.034273862913021433103,
      0.042835898022226680657,  0.050998059262376176196,
      0.058684093478535547145,  0.065822222776361846838,
      0.072345794108848506225,  0.078193895787070306472,
      0.083311924226946755222,  0.087652093004403811143,
      0.091173878695763884713,  0.093844399080804565639,
      0.095638720079274859419,  0.096540088514727800567,
      0.096540088514727800567,  0.095638720079274859419,
      0.093844399080804565639,  0.091173878695763884713,
      0.087652093004403811143,  0.083311924226946755222,
      0.078193895787070306472,  0.072345794108848506225,
      0.065822222776361846838,  0.058684093478535547145,
      0.050998059262376176196,  0.042835898022226680657,
      0.034273862913021433103,  0.025392065309262059456,
      0.016274394730905670605,  0.0070186100094700966004};
  IntegratorXX::GaussLegendre<double, double> quad(32);
  const auto& pts = quad.points();
  const auto& wgt = quad.weights();
  for(auto i = 0ul; i < 32; i++) {
    REQUIRE_THAT(pts[i], Catch::Matchers::WithinAbs(ref_pts[i], x_tolerance));
    REQUIRE_THAT(wgt[i], Catch::Matchers::WithinAbs(ref_wgt[i], w_tolerance));
  }
}

TEST_CASE("33 point GaussLegendre", "[1d-quad]") {
  std::array<double, 33> ref_pts = {-0.99742469424645521727,
                                    -0.98645572623064248811,
                                    -0.96682290968999276893,
                                    -0.93869437261116835036,
                                    -0.90231676774343358304,
                                    -0.85800965267650406464,
                                    -0.80616235627416658980,
                                    -0.74723049644956215786,
                                    -0.68173195996974278627,
                                    -0.61024234583637902731,
                                    -0.53338990478634764355,
                                    -0.45185001727245069573,
                                    -0.36633925774807334107,
                                    -0.27760909715249702940,
                                    -0.18643929882799157234,
                                    -0.093631065854733385671,
                                    0,
                                    0.093631065854733385671,
                                    0.18643929882799157234,
                                    0.27760909715249702940,
                                    0.36633925774807334107,
                                    0.45185001727245069573,
                                    0.53338990478634764355,
                                    0.61024234583637902731,
                                    0.68173195996974278627,
                                    0.74723049644956215786,
                                    0.80616235627416658980,
                                    0.85800965267650406464,
                                    0.90231676774343358304,
                                    0.93869437261116835036,
                                    0.96682290968999276893,
                                    0.98645572623064248811,
                                    0.99742469424645521727};
  std::array<double, 33> ref_wgt = {
      0.0066062278475873780586, 0.015321701512934676128,
      0.023915548101749480351,  0.032300358632328953282,
      0.040401541331669591563,  0.048147742818711695670,
      0.055470846631663561285,  0.062306482530317480032,
      0.068594572818656712806,  0.074279854843954149343,
      0.079312364794886738364,  0.083647876067038707614,
      0.087248287618844337607,  0.090081958660638577240,
      0.092123986643316846213,  0.093356426065596116161,
      0.093768446160209996567,  0.093356426065596116161,
      0.092123986643316846213,  0.090081958660638577240,
      0.087248287618844337607,  0.083647876067038707614,
      0.079312364794886738364,  0.074279854843954149343,
      0.068594572818656712806,  0.062306482530317480032,
      0.055470846631663561285,  0.048147742818711695670,
      0.040401541331669591563,  0.032300358632328953282,
      0.023915548101749480351,  0.015321701512934676128,
      0.0066062278475873780586};
  IntegratorXX::GaussLegendre<double, double> quad(33);
  const auto& pts = quad.points();
  const auto& wgt = quad.weights();
  for(auto i = 0ul; i < 33; i++) {
    REQUIRE_THAT(pts[i], Catch::Matchers::WithinAbs(ref_pts[i], x_tolerance));
    REQUIRE_THAT(wgt[i], Catch::Matchers::WithinAbs(ref_wgt[i], w_tolerance));
  }
}

TEST_CASE("34 point GaussLegendre", "[1d-quad]") {
  std::array<double, 34> ref_pts = {
      -0.99757175379084191924,  -0.98722781640630948505,
      -0.96870826253334428176,  -0.94216239740510709163,
      -0.90780967771832446880,  -0.86593463833456446926,
      -0.81688422790093366459,  -0.76106487662987301419,
      -0.69893911321626290793,  -0.63102172708052854532,
      -0.55787550066974664274,  -0.48010654519032703419,
      -0.39835927775864594063,  -0.31331108133946324746,
      -0.22566669161644948387,  -0.13615235725918297589,
      -0.045509821953102542749, 0.045509821953102542749,
      0.13615235725918297589,   0.22566669161644948387,
      0.31331108133946324746,   0.39835927775864594063,
      0.48010654519032703419,   0.55787550066974664274,
      0.63102172708052854532,   0.69893911321626290793,
      0.76106487662987301419,   0.81688422790093366459,
      0.86593463833456446926,   0.90780967771832446880,
      0.94216239740510709163,   0.96870826253334428176,
      0.98722781640630948505,   0.99757175379084191924};
  std::array<double, 34> ref_wgt = {
      0.0062291405559086847186, 0.014450162748595035415,
      0.022563721985494970084,  0.030491380638446131809,
      0.038166593796387516322,  0.045525611523353272454,
      0.052507414572678106168,  0.059054135827524493194,
      0.065111521554076411379,  0.070629375814255724999,
      0.075561974660031931271,  0.079868444339771844739,
      0.083513099699845655187,  0.086465739747035749784,
      0.088701897835693869287,  0.090203044370640729574,
      0.090956740330259873615,  0.090956740330259873615,
      0.090203044370640729574,  0.088701897835693869287,
      0.086465739747035749784,  0.083513099699845655187,
      0.079868444339771844739,  0.075561974660031931271,
      0.070629375814255724999,  0.065111521554076411379,
      0.059054135827524493194,  0.052507414572678106168,
      0.045525611523353272454,  0.038166593796387516322,
      0.030491380638446131809,  0.022563721985494970084,
      0.014450162748595035415,  0.0062291405559086847186};
  IntegratorXX::GaussLegendre<double, double> quad(34);
  const auto& pts = quad.points();
  const auto& wgt = quad.weights();
  for(auto i = 0ul; i < 34; i++) {
    REQUIRE_THAT(pts[i], Catch::Matchers::WithinAbs(ref_pts[i], x_tolerance));
    REQUIRE_THAT(wgt[i], Catch::Matchers::WithinAbs(ref_wgt[i], w_tolerance));
  }
}

TEST_CASE("35 point GaussLegendre", "[1d-quad]") {
  std::array<double, 35> ref_pts = {
      -0.99770656909960029726,  -0.98793576444385149804,
      -0.97043761603922983321,  -0.94534514820782732954,
      -0.91285426135931761447,  -0.87321912502522233152,
      -0.82674989909222540683,  -0.77381025228691255527,
      -0.71481450155662878326,  -0.65022436466589038868,
      -0.58054534474976450993,  -0.50632277324148861502,
      -0.42813754151781425419,  -0.34660155443081394588,
      -0.26235294120929605797,  -0.17605106116598956997,
      -0.088371343275659263601, 0,
      0.088371343275659263601,  0.17605106116598956997,
      0.26235294120929605797,   0.34660155443081394588,
      0.42813754151781425419,   0.50632277324148861502,
      0.58054534474976450993,   0.65022436466589038868,
      0.71481450155662878326,   0.77381025228691255527,
      0.82674989909222540683,   0.87321912502522233152,
      0.91285426135931761447,   0.94534514820782732954,
      0.97043761603922983321,   0.98793576444385149804,
      0.99770656909960029726};
  std::array<double, 35> ref_wgt = {
      0.0058834334204430849758, 0.013650828348361492266,
      0.021322979911483580883,  0.028829260108894254049,
      0.036110115863463380533,  0.043108422326170218782,
      0.049769370401353529805,  0.056040816212370128578,
      0.061873671966080188887,  0.067222285269086903964,
      0.072044794772560064665,  0.076303457155442053539,
      0.079964942242324262933,  0.083000593728856588380,
      0.085386653392099125226,  0.087104446997183534243,
      0.088140530430275462971,  0.088486794907104290638,
      0.088140530430275462971,  0.087104446997183534243,
      0.085386653392099125226,  0.083000593728856588380,
      0.079964942242324262933,  0.076303457155442053539,
      0.072044794772560064665,  0.067222285269086903964,
      0.061873671966080188887,  0.056040816212370128578,
      0.049769370401353529805,  0.043108422326170218782,
      0.036110115863463380533,  0.028829260108894254049,
      0.021322979911483580883,  0.013650828348361492266,
      0.0058834334204430849758};
  IntegratorXX::GaussLegendre<double, double> quad(35);
  const auto& pts = quad.points();
  const auto& wgt = quad.weights();
  for(auto i = 0ul; i < 35; i++) {
    REQUIRE_THAT(pts[i], Catch::Matchers::WithinAbs(ref_pts[i], x_tolerance));
    REQUIRE_THAT(wgt[i], Catch::Matchers::WithinAbs(ref_wgt[i], w_tolerance));
  }
}

TEST_CASE("36 point GaussLegendre", "[1d-quad]") {
  std::array<double, 36> ref_pts = {
      -0.99783046248408583620, -0.98858647890221223807,
      -0.97202769104969794934, -0.94827298439950754520,
      -0.91749777451565906608, -0.87992980089039713198,
      -0.83584716699247530642, -0.78557623013220651283,
      -0.72948917159355658209, -0.66800123658552106210,
      -0.60156765813598053508, -0.53068028592624516164,
      -0.45586394443342026721, -0.37767254711968921632,
      -0.29668499534402827050, -0.21350089231686557894,
      -0.12873610380938478865, -0.043018198473708607227,
      0.043018198473708607227, 0.12873610380938478865,
      0.21350089231686557894,  0.29668499534402827050,
      0.37767254711968921632,  0.45586394443342026721,
      0.53068028592624516164,  0.60156765813598053508,
      0.66800123658552106210,  0.72948917159355658209,
      0.78557623013220651283,  0.83584716699247530642,
      0.87992980089039713198,  0.91749777451565906608,
      0.94827298439950754520,  0.97202769104969794934,
      0.98858647890221223807,  0.99783046248408583620};
  std::array<double, 36> ref_wgt = {
      0.0055657196642450453612, 0.012915947284065574404,
      0.020181515297735471532,  0.027298621498568779094,
      0.034213810770307229921,  0.040875750923644895474,
      0.047235083490265978417,  0.053244713977759919092,
      0.058860144245324817310,  0.064039797355015489556,
      0.068745323835736442614,  0.072941885005653061354,
      0.076598410645870674529,  0.079687828912071601909,
      0.082187266704339709517,  0.084078218979661934934,
      0.085346685739338627492,  0.085983275670394747490,
      0.085983275670394747490,  0.085346685739338627492,
      0.084078218979661934934,  0.082187266704339709517,
      0.079687828912071601909,  0.076598410645870674529,
      0.072941885005653061354,  0.068745323835736442614,
      0.064039797355015489556,  0.058860144245324817310,
      0.053244713977759919092,  0.047235083490265978417,
      0.040875750923644895474,  0.034213810770307229921,
      0.027298621498568779094,  0.020181515297735471532,
      0.012915947284065574404,  0.0055657196642450453612};
  IntegratorXX::GaussLegendre<double, double> quad(36);
  const auto& pts = quad.points();
  const auto& wgt = quad.weights();
  for(auto i = 0ul; i < 36; i++) {
    REQUIRE_THAT(pts[i], Catch::Matchers::WithinAbs(ref_pts[i], x_tolerance));
    REQUIRE_THAT(wgt[i], Catch::Matchers::WithinAbs(ref_wgt[i], w_tolerance));
  }
}

TEST_CASE("37 point GaussLegendre", "[1d-quad]") {
  std::array<double, 37> ref_pts = {-0.99794458247791364894,
                                    -0.98918596321431918668,
                                    -0.97349303005648574433,
                                    -0.95097234326209482133,
                                    -0.92178143741246374267,
                                    -0.88612496215548607895,
                                    -0.84425298734055596799,
                                    -0.79645920050990229339,
                                    -0.74307883398196526255,
                                    -0.68448630913095935745,
                                    -0.62109260840892448315,
                                    -0.55334239186158178124,
                                    -0.48171087780320555415,
                                    -0.40670050931832611010,
                                    -0.32883742988370699950,
                                    -0.24866779279136575881,
                                    -0.16675393023985197697,
                                    -0.083670408954769901943,
                                    0,
                                    0.083670408954769901943,
                                    0.16675393023985197697,
                                    0.24866779279136575881,
                                    0.32883742988370699950,
                                    0.40670050931832611010,
                                    0.48171087780320555415,
                                    0.55334239186158178124,
                                    0.62109260840892448315,
                                    0.68448630913095935745,
                                    0.74307883398196526255,
                                    0.79645920050990229339,
                                    0.84425298734055596799,
                                    0.88612496215548607895,
                                    0.92178143741246374267,
                                    0.95097234326209482133,
                                    0.97349303005648574433,
                                    0.98918596321431918668,
                                    0.99794458247791364894};
  std::array<double, 37> ref_wgt = {
      0.0052730572794979393518, 0.012238780100307556526,
      0.019129044489083966044,  0.025886036990558933523,
      0.032461639847521481067,  0.038809602501934544489,
      0.044885364662437166657,  0.050646297654824601604,
      0.056051987998274917809,  0.061064516523225986131,
      0.065648722872751249484,  0.069772451555700344885,
      0.073406777248488172725,  0.076526207570529237886,
      0.079108861837529380767,  0.081136624508465030510,
      0.082595272236437250891,  0.083474573625862787252,
      0.083768360993138904797,  0.083474573625862787252,
      0.082595272236437250891,  0.081136624508465030510,
      0.079108861837529380767,  0.076526207570529237886,
      0.073406777248488172725,  0.069772451555700344885,
      0.065648722872751249484,  0.061064516523225986131,
      0.056051987998274917809,  0.050646297654824601604,
      0.044885364662437166657,  0.038809602501934544489,
      0.032461639847521481067,  0.025886036990558933523,
      0.019129044489083966044,  0.012238780100307556526,
      0.0052730572794979393518};
  IntegratorXX::GaussLegendre<double, double> quad(37);
  const auto& pts = quad.points();
  const auto& wgt = quad.weights();
  for(auto i = 0ul; i < 37; i++) {
    REQUIRE_THAT(pts[i], Catch::Matchers::WithinAbs(ref_pts[i], x_tolerance));
    REQUIRE_THAT(wgt[i], Catch::Matchers::WithinAbs(ref_wgt[i], w_tolerance));
  }
}

TEST_CASE("38 point GaussLegendre", "[1d-quad]") {
  std::array<double, 38> ref_pts = {
      -0.99804993053568761981,  -0.98973945426638557194,
      -0.97484632859015350764,  -0.95346633093352959567,
      -0.92574133204858439683,  -0.89185573900463221680,
      -0.85203502193236218886,  -0.80654416760531681555,
      -0.75568590375397068074,  -0.69979868037918435591,
      -0.63925441582968170718,  -0.57445602104780708113,
      -0.50583471792793110324,  -0.43384716943237648437,
      -0.35897244047943501326,  -0.28170880979016526136,
      -0.20257045389211670320,  -0.12208402533786741987,
      -0.040785147904578239913, 0.040785147904578239913,
      0.12208402533786741987,   0.20257045389211670320,
      0.28170880979016526136,   0.35897244047943501326,
      0.43384716943237648437,   0.50583471792793110324,
      0.57445602104780708113,   0.63925441582968170718,
      0.69979868037918435591,   0.75568590375397068074,
      0.80654416760531681555,   0.85203502193236218886,
      0.89185573900463221680,   0.92574133204858439683,
      0.95346633093352959567,   0.97484632859015350764,
      0.98973945426638557194,   0.99804993053568761981};
  std::array<double, 38> ref_wgt = {
      0.0050028807496393456759, 0.011613444716468674178,
      0.018156577709613236899,  0.024579739738232375895,
      0.030839500545175054659,  0.036894081594024738165,
      0.042703158504674434236,  0.048228061860758683374,
      0.053432019910332319974,  0.058280399146997206022,
      0.062740933392133054053,  0.066783937979140411935,
      0.070382507066898954739,  0.073512692584743457145,
      0.076153663548446396066,  0.078287844658210948075,
      0.079901033243527821586,  0.080982493770597100623,
      0.081525029280385786699,  0.081525029280385786699,
      0.080982493770597100623,  0.079901033243527821586,
      0.078287844658210948075,  0.076153663548446396066,
      0.073512692584743457145,  0.070382507066898954739,
      0.066783937979140411935,  0.062740933392133054053,
      0.058280399146997206022,  0.053432019910332319974,
      0.048228061860758683374,  0.042703158504674434236,
      0.036894081594024738165,  0.030839500545175054659,
      0.024579739738232375895,  0.018156577709613236899,
      0.011613444716468674178,  0.0050028807496393456759};
  IntegratorXX::GaussLegendre<double, double> quad(38);
  const auto& pts = quad.points();
  const auto& wgt = quad.weights();
  for(auto i = 0ul; i < 38; i++) {
    REQUIRE_THAT(pts[i], Catch::Matchers::WithinAbs(ref_pts[i], x_tolerance));
    REQUIRE_THAT(wgt[i], Catch::Matchers::WithinAbs(ref_wgt[i], w_tolerance));
  }
}

TEST_CASE("39 point GaussLegendre", "[1d-quad]") {
  std::array<double, 39> ref_pts = {
      -0.99814738306643290601,  -0.99025153685468598364,
      -0.97609870933347105384,  -0.95577521232465227711,
      -0.92940914848673822970,  -0.89716711929299288785,
      -0.85925293799990615391,  -0.81590629743014310435,
      -0.76740124293106349983,  -0.71404443589453467913,
      -0.65617321343201091073,  -0.59415345495727798869,
      -0.52837726866043747390,  -0.45926051230913604866,
      -0.38724016397156145585,  -0.31277155924818592254,
      -0.23632551246183576734,  -0.15838533999783779992,
      -0.079443804608755477582, 0,
      0.079443804608755477582,  0.15838533999783779992,
      0.23632551246183576734,   0.31277155924818592254,
      0.38724016397156145585,   0.45926051230913604866,
      0.52837726866043747390,   0.59415345495727798869,
      0.65617321343201091073,   0.71404443589453467913,
      0.76740124293106349983,   0.81590629743014310435,
      0.85925293799990615391,   0.89716711929299288785,
      0.92940914848673822970,   0.95577521232465227711,
      0.97609870933347105384,   0.99025153685468598364,
      0.99814738306643290601};
  std::array<double, 39> ref_wgt = {
      0.0047529446916351013707, 0.011034788939164594243,
      0.017256229093724919041,  0.023369384832178164595,
      0.029334955983903378592,  0.035115111498131330761,
      0.040673276847933843939,  0.045974301108916631884,
      0.050984665292129405214,  0.055672690340916299907,
      0.060008736088596149575,  0.063965388138682388987,
      0.067517630966231265363,  0.070643005970608760770,
      0.073321753414268617381,  0.075536937322836057705,
      0.077274552544682016729,  0.078523613287371176725,
      0.079276222568368471010,  0.079527622139442852417,
      0.079276222568368471010,  0.078523613287371176725,
      0.077274552544682016729,  0.075536937322836057705,
      0.073321753414268617381,  0.070643005970608760770,
      0.067517630966231265363,  0.063965388138682388987,
      0.060008736088596149575,  0.055672690340916299907,
      0.050984665292129405214,  0.045974301108916631884,
      0.040673276847933843939,  0.035115111498131330761,
      0.029334955983903378592,  0.023369384832178164595,
      0.017256229093724919041,  0.011034788939164594243,
      0.0047529446916351013707};
  IntegratorXX::GaussLegendre<double, double> quad(39);
  const auto& pts = quad.points();
  const auto& wgt = quad.weights();
  for(auto i = 0ul; i < 39; i++) {
    REQUIRE_THAT(pts[i], Catch::Matchers::WithinAbs(ref_pts[i], x_tolerance));
    REQUIRE_THAT(wgt[i], Catch::Matchers::WithinAbs(ref_wgt[i], w_tolerance));
  }
}

TEST_CASE("40 point GaussLegendre", "[1d-quad]") {
  std::array<double, 40> ref_pts = {
      -0.99823770971055920035, -0.99072623869945700645,
      -0.97725994998377426266, -0.95791681921379165580,
      -0.93281280827867653336, -0.90209880696887429673,
      -0.86595950321225950382, -0.82461223083331166320,
      -0.77830565142651938769, -0.72731825518992710328,
      -0.67195668461417954838, -0.61255388966798023795,
      -0.54946712509512820208, -0.48307580168617871291,
      -0.41377920437160500153, -0.34199409082575847301,
      -0.26815218500725368114, -0.19269758070137109972,
      -0.11608407067525520848, -0.038772417506050821933,
      0.038772417506050821933, 0.11608407067525520848,
      0.19269758070137109972,  0.26815218500725368114,
      0.34199409082575847301,  0.41377920437160500153,
      0.48307580168617871291,  0.54946712509512820208,
      0.61255388966798023795,  0.67195668461417954838,
      0.72731825518992710328,  0.77830565142651938769,
      0.82461223083331166320,  0.86595950321225950382,
      0.90209880696887429673,  0.93281280827867653336,
      0.95791681921379165580,  0.97725994998377426266,
      0.99072623869945700645,  0.99823770971055920035};
  std::array<double, 40> ref_wgt = {
      0.0045212770985331912584, 0.010498284531152813615,
      0.016421058381907888713,  0.022245849194166957262,
      0.027937006980023401098,  0.033460195282547847393,
      0.038782167974472017640,  0.043870908185673271992,
      0.048695807635072232061,  0.053227846983936824355,
      0.057439769099391551367,  0.061306242492928939167,
      0.064804013456601038075,  0.067912045815233903826,
      0.070611647391286779695,  0.072886582395804059060,
      0.074723169057968264200,  0.076110361900626242372,
      0.077039818164247965588,  0.077505947978424811264,
      0.077505947978424811264,  0.077039818164247965588,
      0.076110361900626242372,  0.074723169057968264200,
      0.072886582395804059060,  0.070611647391286779695,
      0.067912045815233903826,  0.064804013456601038075,
      0.061306242492928939167,  0.057439769099391551367,
      0.053227846983936824355,  0.048695807635072232061,
      0.043870908185673271992,  0.038782167974472017640,
      0.033460195282547847393,  0.027937006980023401098,
      0.022245849194166957262,  0.016421058381907888713,
      0.010498284531152813615,  0.0045212770985331912584};
  IntegratorXX::GaussLegendre<double, double> quad(40);
  const auto& pts = quad.points();
  const auto& wgt = quad.weights();
  for(auto i = 0ul; i < 40; i++) {
    REQUIRE_THAT(pts[i], Catch::Matchers::WithinAbs(ref_pts[i], x_tolerance));
    REQUIRE_THAT(wgt[i], Catch::Matchers::WithinAbs(ref_wgt[i], w_tolerance));
  }
}

TEST_CASE("41 point GaussLegendre", "[1d-quad]") {
  std::array<double, 41> ref_pts = {-0.99832158857477144152,
                                    -0.99116710969901630825,
                                    -0.97833867356108338447,
                                    -0.95990689173034622610,
                                    -0.93597698749785382568,
                                    -0.90668594475810117296,
                                    -0.87220151169244140883,
                                    -0.83272120040136133124,
                                    -0.78847114504740937274,
                                    -0.73970480306992618106,
                                    -0.68670150203495128958,
                                    -0.62976483907219632049,
                                    -0.56922094161021586965,
                                    -0.50541659919940603271,
                                    -0.43871727705140708852,
                                    -0.36950502264048144143,
                                    -0.29817627734182486592,
                                    -0.22513960563342277561,
                                    -0.15081335486399216357,
                                    -0.075623258989162996924,
                                    0,
                                    0.075623258989162996924,
                                    0.15081335486399216357,
                                    0.22513960563342277561,
                                    0.29817627734182486592,
                                    0.36950502264048144143,
                                    0.43871727705140708852,
                                    0.50541659919940603271,
                                    0.56922094161021586965,
                                    0.62976483907219632049,
                                    0.68670150203495128958,
                                    0.73970480306992618106,
                                    0.78847114504740937274,
                                    0.83272120040136133124,
                                    0.87220151169244140883,
                                    0.90668594475810117296,
                                    0.93597698749785382568,
                                    0.95990689173034622610,
                                    0.97833867356108338447,
                                    0.99116710969901630825,
                                    0.99832158857477144152};
  std::array<double, 41> ref_wgt = {
      0.0043061403581648876839, 0.0099999387739059453385,
      0.015644938407818588531,  0.021201063368779553076,
      0.026635899207110445468,  0.031918211731699281787,
      0.037017716703507988435,  0.041905195195909689429,
      0.046552648369014342061,  0.050933454294617494781,
      0.055022519242578741880,  0.058796420949871944991,
      0.062233542580966316472,  0.065314196453527410436,
      0.068020736760876766736,  0.070337660620817497482,
      0.072251696861023073396,  0.073751882027223469939,
      0.074829623176221551891,  0.075478747092715824027,
      0.075695535647298372319,  0.075478747092715824027,
      0.074829623176221551891,  0.073751882027223469939,
      0.072251696861023073396,  0.070337660620817497482,
      0.068020736760876766736,  0.065314196453527410436,
      0.062233542580966316472,  0.058796420949871944991,
      0.055022519242578741880,  0.050933454294617494781,
      0.046552648369014342061,  0.041905195195909689429,
      0.037017716703507988435,  0.031918211731699281787,
      0.026635899207110445468,  0.021201063368779553076,
      0.015644938407818588531,  0.0099999387739059453385,
      0.0043061403581648876839};
  IntegratorXX::GaussLegendre<double, double> quad(41);
  const auto& pts = quad.points();
  const auto& wgt = quad.weights();
  for(auto i = 0ul; i < 41; i++) {
    REQUIRE_THAT(pts[i], Catch::Matchers::WithinAbs(ref_pts[i], x_tolerance));
    REQUIRE_THAT(wgt[i], Catch::Matchers::WithinAbs(ref_wgt[i], w_tolerance));
  }
}

TEST_CASE("42 point GaussLegendre", "[1d-quad]") {
  std::array<double, 42> ref_pts = {
      -0.99839961899006241502,  -0.99157728834086091979,
      -0.97934250806374819371,  -0.96175936533820448875,
      -0.93892355735498817853,  -0.91095972490412745258,
      -0.87802056981217274271,  -0.84028598326181690093,
      -0.79796205325548741323,  -0.75127993568948048957,
      -0.70049459055617121374,  -0.64588338886924783396,
      -0.58774459748510932284,  -0.52639574993119228759,
      -0.46217191207042192976,  -0.39542385204297505768,
      -0.32651612446541151220,  -0.25582507934287908397,
      -0.18373680656485455085,  -0.11064502720851986835,
      -0.036948943165351775813, 0.036948943165351775813,
      0.11064502720851986835,   0.18373680656485455085,
      0.25582507934287908397,   0.32651612446541151220,
      0.39542385204297505768,   0.46217191207042192976,
      0.52639574993119228759,   0.58774459748510932284,
      0.64588338886924783396,   0.70049459055617121374,
      0.75127993568948048957,   0.79796205325548741323,
      0.84028598326181690093,   0.87802056981217274271,
      0.91095972490412745258,   0.93892355735498817853,
      0.96175936533820448875,   0.97934250806374819371,
      0.99157728834086091979,   0.99839961899006241502};
  std::array<double, 42> ref_wgt = {
      0.0041059986046490846106, 0.0095362203017485024118,
      0.014922443697357494145,  0.020227869569052644757,
      0.025422959526113047887,  0.030479240699603468363,
      0.035369071097592110833,  0.040065735180692261761,
      0.044543577771965877874,  0.048778140792803245027,
      0.052746295699174070344,  0.056426369358018381646,
      0.059798262227586654313,  0.062843558045002576409,
      0.065545624364908978927,  0.067889703376521944855,
      0.069862992492594159766,  0.071454714265170982922,
      0.072656175243804104888,  0.073460813453467528264,
      0.073864234232172879996,  0.073864234232172879996,
      0.073460813453467528264,  0.072656175243804104888,
      0.071454714265170982922,  0.069862992492594159766,
      0.067889703376521944855,  0.065545624364908978927,
      0.062843558045002576409,  0.059798262227586654313,
      0.056426369358018381646,  0.052746295699174070344,
      0.048778140792803245027,  0.044543577771965877874,
      0.040065735180692261761,  0.035369071097592110833,
      0.030479240699603468363,  0.025422959526113047887,
      0.020227869569052644757,  0.014922443697357494145,
      0.0095362203017485024118, 0.0041059986046490846106};
  IntegratorXX::GaussLegendre<double, double> quad(42);
  const auto& pts = quad.points();
  const auto& wgt = quad.weights();
  for(auto i = 0ul; i < 42; i++) {
    REQUIRE_THAT(pts[i], Catch::Matchers::WithinAbs(ref_pts[i], x_tolerance));
    REQUIRE_THAT(wgt[i], Catch::Matchers::WithinAbs(ref_wgt[i], w_tolerance));
  }
}

TEST_CASE("43 point GaussLegendre", "[1d-quad]") {
  std::array<double, 43> ref_pts = {
      -0.99847233224250771352,  -0.99195955759324414642,
      -0.98027822098025533151,  -0.96348661301407999341,
      -0.94167195684763786182,  -0.91494790720613872946,
      -0.88345376521861686334,  -0.84735371620931504900,
      -0.80683596413693863528,  -0.76211174719495512146,
      -0.71341423526895705485,  -0.66099731375149813317,
      -0.60513425963960093573,  -0.54611631666008471914,
      -0.48425117678573472407,  -0.41986137602926925249,
      -0.35328261286430380665,  -0.28486199803291362711,
      -0.21495624486051820901,  -0.14392980951071331077,
      -0.072152990874586235422, 0,
      0.072152990874586235422,  0.14392980951071331077,
      0.21495624486051820901,   0.28486199803291362711,
      0.35328261286430380665,   0.41986137602926925249,
      0.48425117678573472407,   0.54611631666008471914,
      0.60513425963960093573,   0.66099731375149813317,
      0.71341423526895705485,   0.76211174719495512146,
      0.80683596413693863528,   0.84735371620931504900,
      0.88345376521861686334,   0.91494790720613872946,
      0.94167195684763786182,   0.96348661301407999341,
      0.98027822098025533151,   0.99195955759324414642,
      0.99847233224250771352};
  std::array<double, 43> ref_wgt = {
      0.0039194902538441272829, 0.0091039966374014033189,
      0.014248756431576486109,  0.019319901423683900396,
      0.024290456613838815902,  0.029134413261498494916,
      0.033826492086860292345,  0.038342222194132657572,
      0.042658057197982083764,  0.046751494754346580011,
      0.050601192784390156524,  0.054187080318881786863,
      0.057490461956910519428,  0.060494115249991294520,
      0.063182380449396112326,  0.065541242126322797491,
      0.067558402229365169192,  0.069223344193656684282,
      0.070527387765085028126,  0.071463734252514141298,
      0.072027501971421974345,  0.072215751693798987977,
      0.072027501971421974345,  0.071463734252514141298,
      0.070527387765085028126,  0.069223344193656684282,
      0.067558402229365169192,  0.065541242126322797491,
      0.063182380449396112326,  0.060494115249991294520,
      0.057490461956910519428,  0.054187080318881786863,
      0.050601192784390156524,  0.046751494754346580011,
      0.042658057197982083764,  0.038342222194132657572,
      0.033826492086860292345,  0.029134413261498494916,
      0.024290456613838815902,  0.019319901423683900396,
      0.014248756431576486109,  0.0091039966374014033189,
      0.0039194902538441272829};
  IntegratorXX::GaussLegendre<double, double> quad(43);
  const auto& pts = quad.points();
  const auto& wgt = quad.weights();
  for(auto i = 0ul; i < 43; i++) {
    REQUIRE_THAT(pts[i], Catch::Matchers::WithinAbs(ref_pts[i], x_tolerance));
    REQUIRE_THAT(wgt[i], Catch::Matchers::WithinAbs(ref_wgt[i], w_tolerance));
  }
}

TEST_CASE("44 point GaussLegendre", "[1d-quad]") {
  std::array<double, 44> ref_pts = {
      -0.99854020063677422494, -0.99231639213851580848,
      -0.98115183307791396666, -0.96509965042249313939,
      -0.94423950911819409920, -0.91867525998417577432,
      -0.88853423828604320234, -0.85396659500471037873,
      -0.81514453964513501049, -0.77226147924875589902,
      -0.72553105366071700261, -0.67518607066612236533,
      -0.62147734590357584780, -0.56467245318547076842,
      -0.50505439138820231798, -0.44292017452541148383,
      -0.37857935201470713251, -0.31235246650278581224,
      -0.24456945692820125151, -0.17556801477551678575,
      -0.10569190170865324712, -0.035289236964135359058,
      0.035289236964135359058, 0.10569190170865324712,
      0.17556801477551678575,  0.24456945692820125151,
      0.31235246650278581224,  0.37857935201470713251,
      0.44292017452541148383,  0.50505439138820231798,
      0.56467245318547076842,  0.62147734590357584780,
      0.67518607066612236533,  0.72553105366071700261,
      0.77226147924875589902,  0.81514453964513501049,
      0.85396659500471037873,  0.88853423828604320234,
      0.91867525998417577432,  0.94423950911819409920,
      0.96509965042249313939,  0.98115183307791396666,
      0.99231639213851580848,  0.99854020063677422494};
  std::array<double, 44> ref_wgt = {
      0.0037454048031127775152, 0.0087004813675248441225,
      0.013619586755579985520,  0.018471481736814749172,
      0.023231481902019210629,  0.027875782821281010081,
      0.032381222812069820881,  0.036725347813808873643,
      0.040886512310346218908,  0.044843984081970031446,
      0.048578046448352037528,  0.052070096091704461881,
      0.055302735563728052549,  0.058259859877595495334,
      0.060926736701561968039,  0.063290079733203854950,
      0.065338114879181434984,  0.067060638906293652396,
      0.068449070269366660985,  0.069496491861572578037,
      0.070197685473558212587,  0.070549157789354068811,
      0.070549157789354068811,  0.070197685473558212587,
      0.069496491861572578037,  0.068449070269366660985,
      0.067060638906293652396,  0.065338114879181434984,
      0.063290079733203854950,  0.060926736701561968039,
      0.058259859877595495334,  0.055302735563728052549,
      0.052070096091704461881,  0.048578046448352037528,
      0.044843984081970031446,  0.040886512310346218908,
      0.036725347813808873643,  0.032381222812069820881,
      0.027875782821281010081,  0.023231481902019210629,
      0.018471481736814749172,  0.013619586755579985520,
      0.0087004813675248441225, 0.0037454048031127775152};
  IntegratorXX::GaussLegendre<double, double> quad(44);
  const auto& pts = quad.points();
  const auto& wgt = quad.weights();
  for(auto i = 0ul; i < 44; i++) {
    REQUIRE_THAT(pts[i], Catch::Matchers::WithinAbs(ref_pts[i], x_tolerance));
    REQUIRE_THAT(wgt[i], Catch::Matchers::WithinAbs(ref_wgt[i], w_tolerance));
  }
}

TEST_CASE("45 point GaussLegendre", "[1d-quad]") {
  std::array<double, 45> ref_pts = {-0.99860364518193663816,
                                    -0.99264999844720374175,
                                    -0.98196871503454056824,
                                    -0.96660831039689460474,
                                    -0.94664169099562906178,
                                    -0.92216393671900038810,
                                    -0.89329167175324173846,
                                    -0.86016247596066422534,
                                    -0.82293422050208633704,
                                    -0.78178431259390629131,
                                    -0.73690884894549035262,
                                    -0.68852168077120052523,
                                    -0.63685339445322335927,
                                    -0.58215021256935318668,
                                    -0.52467282046291606709,
                                    -0.46469512391963509858,
                                    -0.40250294385854191408,
                                    -0.33839265425060216164,
                                    -0.27266976975237756061,
                                    -0.20564748978326374572,
                                    -0.13764520598325302876,
                                    -0.068986980163144172490,
                                    0,
                                    0.068986980163144172490,
                                    0.13764520598325302876,
                                    0.20564748978326374572,
                                    0.27266976975237756061,
                                    0.33839265425060216164,
                                    0.40250294385854191408,
                                    0.46469512391963509858,
                                    0.52467282046291606709,
                                    0.58215021256935318668,
                                    0.63685339445322335927,
                                    0.68852168077120052523,
                                    0.73690884894549035262,
                                    0.78178431259390629131,
                                    0.82293422050208633704,
                                    0.86016247596066422534,
                                    0.89329167175324173846,
                                    0.92216393671900038810,
                                    0.94664169099562906178,
                                    0.96660831039689460474,
                                    0.98196871503454056824,
                                    0.99264999844720374175,
                                    0.99860364518193663816};
  std::array<double, 45> ref_wgt = {
      0.0035826631552835589312, 0.0083231892962182416457,
      0.013031104991582784321,  0.017677535257937590617,
      0.022239847550578732394,  0.026696213967577664806,
      0.031025374934515467163,  0.035206692201609016248,
      0.039220236729302447564,  0.043046880709164971152,
      0.046668387718373365268,  0.050067499237952029799,
      0.053228016731268951946,  0.056134878759786476644,
      0.058774232718841738574,  0.061133500831066522502,
      0.063201440073819937750,  0.064968195750723430854,
      0.066425348449842528083,  0.067565954163607536271,
      0.068384577378669674532,  0.068877316977661322882,
      0.069041824829232020111,  0.068877316977661322882,
      0.068384577378669674532,  0.067565954163607536271,
      0.066425348449842528083,  0.064968195750723430854,
      0.063201440073819937750,  0.061133500831066522502,
      0.058774232718841738574,  0.056134878759786476644,
      0.053228016731268951946,  0.050067499237952029799,
      0.046668387718373365268,  0.043046880709164971152,
      0.039220236729302447564,  0.035206692201609016248,
      0.031025374934515467163,  0.026696213967577664806,
      0.022239847550578732394,  0.017677535257937590617,
      0.013031104991582784321,  0.0083231892962182416457,
      0.0035826631552835589312};
  IntegratorXX::GaussLegendre<double, double> quad(45);
  const auto& pts = quad.points();
  const auto& wgt = quad.weights();
  for(auto i = 0ul; i < 45; i++) {
    REQUIRE_THAT(pts[i], Catch::Matchers::WithinAbs(ref_pts[i], x_tolerance));
    REQUIRE_THAT(wgt[i], Catch::Matchers::WithinAbs(ref_wgt[i], w_tolerance));
  }
}

TEST_CASE("46 point GaussLegendre", "[1d-quad]") {
  std::array<double, 46> ref_pts = {
      -0.99866304213381798113,  -0.99296234890617436407,
      -0.98273366980416686348,  -0.96802139185399194274,
      -0.94889236344608979562,  -0.92543379880675395098,
      -0.89775271153394196570,  -0.86597539486685806292,
      -0.83024683706606605303,  -0.79073005707527425519,
      -0.74760535961566605400,  -0.70106951202040569751,
      -0.65133484620199771511,  -0.59862828971271515318,
      -0.54319033026180263527,  -0.48527391838816466277,
      -0.42514331328282839732,  -0.36307287702099571012,
      -0.29934582270187001548,  -0.23425292220626976863,
      -0.16809117946710352861,  -0.10116247530558423952,
      -0.033772190016052041520, 0.033772190016052041520,
      0.10116247530558423952,   0.16809117946710352861,
      0.23425292220626976863,   0.29934582270187001548,
      0.36307287702099571012,   0.42514331328282839732,
      0.48527391838816466277,   0.54319033026180263527,
      0.59862828971271515318,   0.65133484620199771511,
      0.70106951202040569751,   0.74760535961566605400,
      0.79073005707527425519,   0.83024683706606605303,
      0.86597539486685806292,   0.89775271153394196570,
      0.92543379880675395098,   0.94889236344608979562,
      0.96802139185399194274,   0.98273366980416686348,
      0.99296234890617436407,   0.99866304213381798113};
  std::array<double, 46> ref_wgt = {
      0.0034303008681070482860, 0.0079698982297246224516,
      0.012479883770988684207,  0.016933514007836238046,
      0.021309998754136501054,  0.025589286397130010635,
      0.029751829552202755799,  0.033778627999106896521,
      0.037651305357386071328,  0.041352190109678729704,
      0.044864395277318126767,  0.048171895101712200530,
      0.051259598007143021335,  0.054113415385856754492,
      0.056720325843991235817,  0.059068434595546314808,
      0.061147027724650481015,  0.062946621064394508179,
      0.064459003467139069588,  0.065677274267781207379,
      0.066595874768454887376,  0.067210613600678175862,
      0.067518685849036458820,  0.067518685849036458820,
      0.067210613600678175862,  0.066595874768454887376,
      0.065677274267781207379,  0.064459003467139069588,
      0.062946621064394508179,  0.061147027724650481015,
      0.059068434595546314808,  0.056720325843991235817,
      0.054113415385856754492,  0.051259598007143021335,
      0.048171895101712200530,  0.044864395277318126767,
      0.041352190109678729704,  0.037651305357386071328,
      0.033778627999106896521,  0.029751829552202755799,
      0.025589286397130010635,  0.021309998754136501054,
      0.016933514007836238046,  0.012479883770988684207,
      0.0079698982297246224516, 0.0034303008681070482860};
  IntegratorXX::GaussLegendre<double, double> quad(46);
  const auto& pts = quad.points();
  const auto& wgt = quad.weights();
  for(auto i = 0ul; i < 46; i++) {
    REQUIRE_THAT(pts[i], Catch::Matchers::WithinAbs(ref_pts[i], x_tolerance));
    REQUIRE_THAT(wgt[i], Catch::Matchers::WithinAbs(ref_wgt[i], w_tolerance));
  }
}

TEST_CASE("47 point GaussLegendre", "[1d-quad]") {
  std::array<double, 47> ref_pts = {
      -0.99871872858421210918,  -0.99325521098776863469,
      -0.98345100307162370876,  -0.96934678732656449715,
      -0.95100396925770844259,  -0.92850269301236064820,
      -0.90194132943852535687,  -0.87143601579689631694,
      -0.83712013989990212128,  -0.79914375416774194292,
      -0.75767291844543863357,  -0.71288897340906430166,
      -0.66498774739033272914,  -0.61417869995637360860,
      -0.56068400593466419448,  -0.50473758386357791977,
      -0.44658407310485570273,  -0.38647776408466713958,
      -0.32468148633773590221,  -0.26146545921497457031,
      -0.19710611027911180796,  -0.13188486655451489705,
      -0.066086923916355675160, 0,
      0.066086923916355675160,  0.13188486655451489705,
      0.19710611027911180796,   0.26146545921497457031,
      0.32468148633773590221,   0.38647776408466713958,
      0.44658407310485570273,   0.50473758386357791977,
      0.56068400593466419448,   0.61417869995637360860,
      0.66498774739033272914,   0.71288897340906430166,
      0.75767291844543863357,   0.79914375416774194292,
      0.83712013989990212128,   0.87143601579689631694,
      0.90194132943852535687,   0.92850269301236064820,
      0.95100396925770844259,   0.96934678732656449715,
      0.98345100307162370876,   0.99325521098776863469,
      0.99871872858421210918};
  std::array<double, 47> ref_wgt = {
      0.0032874538425280148832, 0.0076386162958488336141,
      0.011962848464312320964,  0.016235333146433059671,
      0.020436938147668427642,  0.024549211659658818538,
      0.028554150700643386505,  0.032434235515184756768,
      0.036172496584174951613,  0.039752586122531003781,
      0.043158848648479538268,  0.046376389086505911204,
      0.049391137747361169605,  0.052189911780057144872,
      0.054760472781530225957,  0.057091580293231540222,
      0.059173040942338875976,  0.060995753008739645331,
      0.062551746220921662641,  0.063834216605717030631,
      0.064837556238945726703,  0.065557377766549740251,
      0.065990533588810474534,  0.066135129623655479653,
      0.065990533588810474534,  0.065557377766549740251,
      0.064837556238945726703,  0.063834216605717030631,
      0.062551746220921662641,  0.060995753008739645331,
      0.059173040942338875976,  0.057091580293231540222,
      0.054760472781530225957,  0.052189911780057144872,
      0.049391137747361169605,  0.046376389086505911204,
      0.043158848648479538268,  0.039752586122531003781,
      0.036172496584174951613,  0.032434235515184756768,
      0.028554150700643386505,  0.024549211659658818538,
      0.020436938147668427642,  0.016235333146433059671,
      0.011962848464312320964,  0.0076386162958488336141,
      0.0032874538425280148832};
  IntegratorXX::GaussLegendre<double, double> quad(47);
  const auto& pts = quad.points();
  const auto& wgt = quad.weights();
  for(auto i = 0ul; i < 47; i++) {
    REQUIRE_THAT(pts[i], Catch::Matchers::WithinAbs(ref_pts[i], x_tolerance));
    REQUIRE_THAT(wgt[i], Catch::Matchers::WithinAbs(ref_wgt[i], w_tolerance));
  }
}

TEST_CASE("48 point GaussLegendre", "[1d-quad]") {
  std::array<double, 48> ref_pts = {
      -0.99877100725242611860,  -0.99353017226635075755,
      -0.98412458372282685774,  -0.97059159254624725046,
      -0.95298770316043086072,  -0.93138669070655433311,
      -0.90587913671556967282,  -0.87657202027424788591,
      -0.84358826162439353071,  -0.80706620402944262708,
      -0.76715903251574033925,  -0.72403413092381465467,
      -0.67787237963266390521,  -0.62886739677651362400,
      -0.57722472608397270382,  -0.52316097472223303368,
      -0.46690290475095840454,  -0.40868648199071672992,
      -0.34875588629216073816,  -0.28736248735545557674,
      -0.22476379039468906122,  -0.16122235606889171806,
      -0.097004699209462698930, -0.032380170962869362033,
      0.032380170962869362033,  0.097004699209462698930,
      0.16122235606889171806,   0.22476379039468906122,
      0.28736248735545557674,   0.34875588629216073816,
      0.40868648199071672992,   0.46690290475095840454,
      0.52316097472223303368,   0.57722472608397270382,
      0.62886739677651362400,   0.67787237963266390521,
      0.72403413092381465467,   0.76715903251574033925,
      0.80706620402944262708,   0.84358826162439353071,
      0.87657202027424788591,   0.90587913671556967282,
      0.93138669070655433311,   0.95298770316043086072,
      0.97059159254624725046,   0.98412458372282685774,
      0.99353017226635075755,   0.99877100725242611860};
  std::array<double, 48> ref_wgt = {
      0.0031533460523058386327, 0.0073275539012762621024,
      0.011477234579234539490,  0.015579315722943848728,
      0.019616160457355527814,  0.023570760839324379141,
      0.027426509708356948200,  0.031167227832798088902,
      0.034777222564770438893,  0.038241351065830706317,
      0.041545082943464749214,  0.044674560856694280419,
      0.047616658492490474826,  0.050359035553854474958,
      0.052890189485193667096,  0.055199503699984162868,
      0.057277292100403215705,  0.059114839698395635746,
      0.060704439165893880053,  0.062039423159892663904,
      0.063114192286254025657,  0.063924238584648186624,
      0.064466164435950082206,  0.064737696812683922503,
      0.064737696812683922503,  0.064466164435950082206,
      0.063924238584648186624,  0.063114192286254025657,
      0.062039423159892663904,  0.060704439165893880053,
      0.059114839698395635746,  0.057277292100403215705,
      0.055199503699984162868,  0.052890189485193667096,
      0.050359035553854474958,  0.047616658492490474826,
      0.044674560856694280419,  0.041545082943464749214,
      0.038241351065830706317,  0.034777222564770438893,
      0.031167227832798088902,  0.027426509708356948200,
      0.023570760839324379141,  0.019616160457355527814,
      0.015579315722943848728,  0.011477234579234539490,
      0.0073275539012762621024, 0.0031533460523058386327};
  IntegratorXX::GaussLegendre<double, double> quad(48);
  const auto& pts = quad.points();
  const auto& wgt = quad.weights();
  for(auto i = 0ul; i < 48; i++) {
    REQUIRE_THAT(pts[i], Catch::Matchers::WithinAbs(ref_pts[i], x_tolerance));
    REQUIRE_THAT(wgt[i], Catch::Matchers::WithinAbs(ref_wgt[i], w_tolerance));
  }
}

TEST_CASE("49 point GaussLegendre", "[1d-quad]") {
  std::array<double, 49> ref_pts = {-0.99882015060663537936,
                                    -0.99378866194416779076,
                                    -0.98475789591421300436,
                                    -0.97176220090155538014,
                                    -0.95485365867413723356,
                                    -0.93410029475581014906,
                                    -0.90958565582807328521,
                                    -0.88140844557300891004,
                                    -0.84968211984416570104,
                                    -0.81453442735985543154,
                                    -0.77610689434544663502,
                                    -0.73455425423740269621,
                                    -0.69004382442513211350,
                                    -0.64275483241923766406,
                                    -0.59287769410890071246,
                                    -0.54061324699172606656,
                                    -0.48617194145249204218,
                                    -0.42977299334157652466,
                                    -0.37164350126228488886,
                                    -0.31201753211974876221,
                                    -0.25113517861257727351,
                                    -0.18924159246181358649,
                                    -0.12658599726967205107,
                                    -0.063420684982686786029,
                                    0,
                                    0.063420684982686786029,
                                    0.12658599726967205107,
                                    0.18924159246181358649,
                                    0.25113517861257727351,
                                    0.31201753211974876221,
                                    0.37164350126228488886,
                                    0.42977299334157652466,
                                    0.48617194145249204218,
                                    0.54061324699172606656,
                                    0.59287769410890071246,
                                    0.64275483241923766406,
                                    0.69004382442513211350,
                                    0.73455425423740269621,
                                    0.77610689434544663502,
                                    0.81453442735985543154,
                                    0.84968211984416570104,
                                    0.88140844557300891004,
                                    0.90958565582807328521,
                                    0.93410029475581014906,
                                    0.95485365867413723356,
                                    0.97176220090155538014,
                                    0.98475789591421300436,
                                    0.99378866194416779076,
                                    0.99882015060663537936};
  std::array<double, 49> ref_wgt = {
      0.0030272789889229050775, 0.0070350995900864514735,
      0.011020551031593580498,  0.014962144935624651030,
      0.018843595853089458444,  0.022649201587446676499,
      0.026363618927066016961,  0.029971884620583825351,
      0.033459466791622174342,  0.036812320963000689819,
      0.040016945766373021369,  0.043060436981259597988,
      0.045930539355595853542,  0.048615695887828240278,
      0.051105094330144590675,  0.053388710708258968528,
      0.055457349674803588690,  0.057302681530187475485,
      0.058917275760027266025,  0.060294630953152017303,
      0.061429200979192936297,  0.062316417320057267401,
      0.062952707465195699474,  0.063335509296491748591,
      0.063463281404790597718,  0.063335509296491748591,
      0.062952707465195699474,  0.062316417320057267401,
      0.061429200979192936297,  0.060294630953152017303,
      0.058917275760027266025,  0.057302681530187475485,
      0.055457349674803588690,  0.053388710708258968528,
      0.051105094330144590675,  0.048615695887828240278,
      0.045930539355595853542,  0.043060436981259597988,
      0.040016945766373021369,  0.036812320963000689819,
      0.033459466791622174342,  0.029971884620583825351,
      0.026363618927066016961,  0.022649201587446676499,
      0.018843595853089458444,  0.014962144935624651030,
      0.011020551031593580498,  0.0070350995900864514735,
      0.0030272789889229050775};
  IntegratorXX::GaussLegendre<double, double> quad(49);
  const auto& pts = quad.points();
  const auto& wgt = quad.weights();
  for(auto i = 0ul; i < 49; i++) {
    REQUIRE_THAT(pts[i], Catch::Matchers::WithinAbs(ref_pts[i], x_tolerance));
    REQUIRE_THAT(wgt[i], Catch::Matchers::WithinAbs(ref_wgt[i], w_tolerance));
  }
}

TEST_CASE("50 point GaussLegendre", "[1d-quad]") {
  std::array<double, 50> ref_pts = {
      -0.99886640442007105019,  -0.99403196943209071258,
      -0.98535408404800588231,  -0.97286438510669207371,
      -0.95661095524280794300,  -0.93665661894487793378,
      -0.91307855665579189309,  -0.88596797952361304864,
      -0.85542976942994608461,  -0.82158207085933594836,
      -0.78455583290039926391,  -0.74449430222606853826,
      -0.70155246870682225109,  -0.65589646568543936078,
      -0.60770292718495023918,  -0.55715830451465005432,
      -0.50445814490746420165,  -0.44980633497403878915,
      -0.39341431189756512739,  -0.33550024541943735684,
      -0.27628819377953199033,  -0.21600723687604175685,
      -0.15489058999814590207,  -0.093174701560086140854,
      -0.031098338327188876112, 0.031098338327188876112,
      0.093174701560086140854,  0.15489058999814590207,
      0.21600723687604175685,   0.27628819377953199033,
      0.33550024541943735684,   0.39341431189756512739,
      0.44980633497403878915,   0.50445814490746420165,
      0.55715830451465005432,   0.60770292718495023918,
      0.65589646568543936078,   0.70155246870682225109,
      0.74449430222606853826,   0.78455583290039926391,
      0.82158207085933594836,   0.85542976942994608461,
      0.88596797952361304864,   0.91307855665579189309,
      0.93665661894487793378,   0.95661095524280794300,
      0.97286438510669207371,   0.98535408404800588231,
      0.99403196943209071258,   0.99886640442007105019};
  std::array<double, 50> ref_wgt = {
      0.0029086225531551409584, 0.0067597991957454015028,
      0.010590548383650969264,  0.014380822761485574419,
      0.018115560713489390351,  0.021780243170124792982,
      0.025360673570012390440,  0.028842993580535198030,
      0.032213728223578016648,  0.035459835615146154161,
      0.038568756612587675245,  0.041528463090147697422,
      0.044327504338803275492,  0.046955051303948432966,
      0.049400938449466314921,  0.051655703069581138490,
      0.053710621888996246523,  0.055557744806212517624,
      0.057189925647728383723,  0.058600849813222445835,
      0.059785058704265457510,  0.060737970841770216032,
      0.061455899590316663756,  0.061936067420683243384,
      0.062176616655347262321,  0.062176616655347262321,
      0.061936067420683243384,  0.061455899590316663756,
      0.060737970841770216032,  0.059785058704265457510,
      0.058600849813222445835,  0.057189925647728383723,
      0.055557744806212517624,  0.053710621888996246523,
      0.051655703069581138490,  0.049400938449466314921,
      0.046955051303948432966,  0.044327504338803275492,
      0.041528463090147697422,  0.038568756612587675245,
      0.035459835615146154161,  0.032213728223578016648,
      0.028842993580535198030,  0.025360673570012390440,
      0.021780243170124792982,  0.018115560713489390351,
      0.014380822761485574419,  0.010590548383650969264,
      0.0067597991957454015028, 0.0029086225531551409584};
  IntegratorXX::GaussLegendre<double, double> quad(50);
  const auto& pts = quad.points();
  const auto& wgt = quad.weights();
  for(auto i = 0ul; i < 50; i++) {
    REQUIRE_THAT(pts[i], Catch::Matchers::WithinAbs(ref_pts[i], x_tolerance));
    REQUIRE_THAT(wgt[i], Catch::Matchers::WithinAbs(ref_wgt[i], w_tolerance));
  }
}

TEST_CASE("51 point GaussLegendre", "[1d-quad]") {
  std::array<double, 51> ref_pts = {
      -0.99890999084890349517,  -0.99426126043675257462,
      -0.98591599173590299658,  -0.97390336801932386723,
      -0.95826784861390819456,  -0.93906754400296238344,
      -0.91637386230978023082,  -0.89027121802952730328,
      -0.86085671118229237147,  -0.82823976382306483285,
      -0.79254171209938120523,  -0.75389535448537552576,
      -0.71244445757703664458,  -0.66834322117537008686,
      -0.62175570460072327375,  -0.57285521635130383652,
      -0.52182366936618584251,  -0.46885090428604106361,
      -0.41413398322630387794,  -0.35787645668840950978,
      -0.30028760633533193953,  -0.24158166644779870385,
      -0.18197702695707754532,  -0.12169542101888876696,
      -0.060961100150578724734, 0,
      0.060961100150578724734,  0.12169542101888876696,
      0.18197702695707754532,   0.24158166644779870385,
      0.30028760633533193953,   0.35787645668840950978,
      0.41413398322630387794,   0.46885090428604106361,
      0.52182366936618584251,   0.57285521635130383652,
      0.62175570460072327375,   0.66834322117537008686,
      0.71244445757703664458,   0.75389535448537552576,
      0.79254171209938120523,   0.82823976382306483285,
      0.86085671118229237147,   0.89027121802952730328,
      0.91637386230978023082,   0.93906754400296238344,
      0.95826784861390819456,   0.97390336801932386723,
      0.98591599173590299658,   0.99426126043675257462,
      0.99890999084890349517};
  std::array<double, 51> ref_wgt = {
      0.0027968071710898955755, 0.0065003377832526002921,
      0.010185191297821729939,  0.013832634006477822297,
      0.017428714723401052260,  0.020959988401703210580,
      0.024413300573781434273,  0.027775798594162477196,
      0.031034971290160008454,  0.034178693204188336236,
      0.037195268923260292843,  0.040073476285496453187,
      0.042802607997880086654,  0.045372511407650068748,
      0.047773626240623102000,  0.049997020150057409780,
      0.052034421936697087564,  0.053878252313045561434,
      0.055521652095738693017,  0.056958507720258662100,
      0.058183473982592140598,  0.059191993922961543784,
      0.059980315777503252090,  0.060545506934737795138,
      0.060885464844856343881,  0.060998924841205880160,
      0.060885464844856343881,  0.060545506934737795138,
      0.059980315777503252090,  0.059191993922961543784,
      0.058183473982592140598,  0.056958507720258662100,
      0.055521652095738693017,  0.053878252313045561434,
      0.052034421936697087564,  0.049997020150057409780,
      0.047773626240623102000,  0.045372511407650068748,
      0.042802607997880086654,  0.040073476285496453187,
      0.037195268923260292843,  0.034178693204188336236,
      0.031034971290160008454,  0.027775798594162477196,
      0.024413300573781434273,  0.020959988401703210580,
      0.017428714723401052260,  0.013832634006477822297,
      0.010185191297821729939,  0.0065003377832526002921,
      0.0027968071710898955755};
  IntegratorXX::GaussLegendre<double, double> quad(51);
  const auto& pts = quad.points();
  const auto& wgt = quad.weights();
  for(auto i = 0ul; i < 51; i++) {
    REQUIRE_THAT(pts[i], Catch::Matchers::WithinAbs(ref_pts[i], x_tolerance));
    REQUIRE_THAT(wgt[i], Catch::Matchers::WithinAbs(ref_wgt[i], w_tolerance));
  }
}

TEST_CASE("52 point GaussLegendre", "[1d-quad]") {
  std::array<double, 52> ref_pts = {
      -0.99895111110395027809,  -0.99447759092921602925,
      -0.98644619565154984065,  -0.97488388422174450314,
      -0.95983182693308655253,  -0.94134385364135905684,
      -0.91948612891642453989,  -0.89433689053449532252,
      -0.86598616284606758524,  -0.83453543232673453496,
      -0.80009728343046832433,  -0.76279499519374496028,
      -0.72276209974998319368,  -0.68014190422716770209,
      -0.63508697769524592430,  -0.58775860497957906990,
      -0.53832620928582743838,  -0.48696674569809607778,
      -0.43386406771876167031,  -0.37920826911609366925,
      -0.32319500343480782550,  -0.26602478360500182747,
      -0.20790226415636605969,  -0.14903550860694918049,
      -0.089635244648900565489, -0.029914109797338766044,
      0.029914109797338766044,  0.089635244648900565489,
      0.14903550860694918049,   0.20790226415636605969,
      0.26602478360500182747,   0.32319500343480782550,
      0.37920826911609366925,   0.43386406771876167031,
      0.48696674569809607778,   0.53832620928582743838,
      0.58775860497957906990,   0.63508697769524592430,
      0.68014190422716770209,   0.72276209974998319368,
      0.76279499519374496028,   0.80009728343046832433,
      0.83453543232673453496,   0.86598616284606758524,
      0.89433689053449532252,   0.91948612891642453989,
      0.94134385364135905684,   0.95983182693308655253,
      0.97488388422174450314,   0.98644619565154984065,
      0.99447759092921602925,   0.99895111110395027809};
  std::array<double, 52> ref_wgt = {
      0.0026913169500471111190, 0.0062555239629732768997,
      0.0098026345794627520620, 0.013315114982340960657,
      0.016780023396300735678,  0.020184891507980792203,
      0.023517513553984461590,  0.026765953746504013449,
      0.029918581147143946641,  0.032964109089718797915,
      0.035891634835097232942,  0.038690678310423978985,
      0.041351219500560271679,  0.043863734259000407995,
      0.046219228372784793508,  0.048409269744074896854,
      0.050426018566342377218,  0.052262255383906993034,
      0.053911406932757264751,  0.055367569669302652549,
      0.056625530902368597191,  0.057680787452526827654,
      0.058529561771813868550,  0.059168815466042970369,
      0.059596260171248158258,  0.059810365745291860248,
      0.059810365745291860248,  0.059596260171248158258,
      0.059168815466042970369,  0.058529561771813868550,
      0.057680787452526827654,  0.056625530902368597191,
      0.055367569669302652549,  0.053911406932757264751,
      0.052262255383906993034,  0.050426018566342377218,
      0.048409269744074896854,  0.046219228372784793508,
      0.043863734259000407995,  0.041351219500560271679,
      0.038690678310423978985,  0.035891634835097232942,
      0.032964109089718797915,  0.029918581147143946641,
      0.026765953746504013449,  0.023517513553984461590,
      0.020184891507980792203,  0.016780023396300735678,
      0.013315114982340960657,  0.0098026345794627520620,
      0.0062555239629732768997, 0.0026913169500471111190};
  IntegratorXX::GaussLegendre<double, double> quad(52);
  const auto& pts = quad.points();
  const auto& wgt = quad.weights();
  for(auto i = 0ul; i < 52; i++) {
    REQUIRE_THAT(pts[i], Catch::Matchers::WithinAbs(ref_pts[i], x_tolerance));
    REQUIRE_THAT(wgt[i], Catch::Matchers::WithinAbs(ref_wgt[i], w_tolerance));
  }
}

TEST_CASE("53 point GaussLegendre", "[1d-quad]") {
  std::array<double, 53> ref_pts = {-0.99898994777632822712,
                                    -0.99468191930800707864,
                                    -0.98694703502337152172,
                                    -0.97581023371498458163,
                                    -0.96130969462313633237,
                                    -0.94349535346444187902,
                                    -0.92242860304281212827,
                                    -0.89818205787542662593,
                                    -0.87083929755824135160,
                                    -0.84049457654580137543,
                                    -0.80725249841689547822,
                                    -0.77122765492553230787,
                                    -0.73254423080751025378,
                                    -0.69133557560136672354,
                                    -0.64774374391651006875,
                                    -0.60191900571376932746,
                                    -0.55401932827706788101,
                                    -0.50420983165713343704,
                                    -0.45266221946184579138,
                                    -0.39955418695395297739,
                                    -0.34506880849572235669,
                                    -0.28939390645162620643,
                                    -0.23272140372427259364,
                                    -0.17524666215532575073,
                                    -0.11716780907195515014,
                                    -0.058685054300259465023,
                                    0,
                                    0.058685054300259465023,
                                    0.11716780907195515014,
                                    0.17524666215532575073,
                                    0.23272140372427259364,
                                    0.28939390645162620643,
                                    0.34506880849572235669,
                                    0.39955418695395297739,
                                    0.45266221946184579138,
                                    0.50420983165713343704,
                                    0.55401932827706788101,
                                    0.60191900571376932746,
                                    0.64774374391651006875,
                                    0.69133557560136672354,
                                    0.73254423080751025378,
                                    0.77122765492553230787,
                                    0.80725249841689547822,
                                    0.84049457654580137543,
                                    0.87083929755824135160,
                                    0.89818205787542662593,
                                    0.92242860304281212827,
                                    0.94349535346444187902,
                                    0.96130969462313633237,
                                    0.97581023371498458163,
                                    0.98694703502337152172,
                                    0.99468191930800707864,
                                    0.99898994777632822712};
  std::array<double, 53> ref_wgt = {
      0.0025916837205670318116, 0.0060242762269486732812,
      0.0094412022849403443867, 0.012826026144240379179,
      0.016166725256687463928,  0.019451721107636895388,
      0.022669673057070208399,  0.025809482510757517714,
      0.028860323617823736263,  0.031811678459019323063,
      0.034653372583534237958,  0.037375609803482915674,
      0.039969005843540382127,  0.042424620634520013592,
      0.044733989103672810213,  0.046889150340750314022,
      0.048882675032699140420,  0.050707691069292715297,
      0.052357907229872718200,  0.053827634868731029042,
      0.055111807523933599002,  0.056205998381739709809,
      0.057106435536267191773,  0.057810014991713196320,
      0.058314311362256007556,  0.058617586232720263318,
      0.058718794151164364525,  0.058617586232720263318,
      0.058314311362256007556,  0.057810014991713196320,
      0.057106435536267191773,  0.056205998381739709809,
      0.055111807523933599002,  0.053827634868731029042,
      0.052357907229872718200,  0.050707691069292715297,
      0.048882675032699140420,  0.046889150340750314022,
      0.044733989103672810213,  0.042424620634520013592,
      0.039969005843540382127,  0.037375609803482915674,
      0.034653372583534237958,  0.031811678459019323063,
      0.028860323617823736263,  0.025809482510757517714,
      0.022669673057070208399,  0.019451721107636895388,
      0.016166725256687463928,  0.012826026144240379179,
      0.0094412022849403443867, 0.0060242762269486732812,
      0.0025916837205670318116};
  IntegratorXX::GaussLegendre<double, double> quad(53);
  const auto& pts = quad.points();
  const auto& wgt = quad.weights();
  for(auto i = 0ul; i < 53; i++) {
    REQUIRE_THAT(pts[i], Catch::Matchers::WithinAbs(ref_pts[i], x_tolerance));
    REQUIRE_THAT(wgt[i], Catch::Matchers::WithinAbs(ref_wgt[i], w_tolerance));
  }
}

TEST_CASE("54 point GaussLegendre", "[1d-quad]") {
  std::array<double, 54> ref_pts = {
      -0.99902666686734098385,  -0.99487511701833888492,
      -0.98742063739734355855,  -0.97668632885790323720,
      -0.96270764578592358326,  -0.94553097516499585376,
      -0.92521335986665148626,  -0.90182228628470158076,
      -0.87543545406556893942,  -0.84614051597077294943,
      -0.81403478591356783547,  -0.77922491534625402154,
      -0.74182653880918431629,  -0.70196388971917291939,
      -0.65976938763198312469,  -0.61538319833112737073,
      -0.56895276819520942973,  -0.52063233438593307333,
      -0.47058241248138228368,  -0.41896926325520452804,
      -0.36596434037219118198,  -0.31174372083446822888,
      -0.25648752006999730008,  -0.20037929360621356978,
      -0.14360542731625615395,  -0.086354518263248215285,
      -0.028816748199341777656, 0.028816748199341777656,
      0.086354518263248215285,  0.14360542731625615395,
      0.20037929360621356978,   0.25648752006999730008,
      0.31174372083446822888,   0.36596434037219118198,
      0.41896926325520452804,   0.47058241248138228368,
      0.52063233438593307333,   0.56895276819520942973,
      0.61538319833112737073,   0.65976938763198312469,
      0.70196388971917291939,   0.74182653880918431629,
      0.77922491534625402154,   0.81403478591356783547,
      0.84614051597077294943,   0.87543545406556893942,
      0.90182228628470158076,   0.92521335986665148626,
      0.94553097516499585376,   0.96270764578592358326,
      0.97668632885790323720,   0.98742063739734355855,
      0.99487511701833888492,   0.99902666686734098385};
  std::array<double, 54> ref_wgt = {
      0.0024974818357615857759, 0.0058056110152399848788,
      0.0090993694555093969480, 0.012363328128847644166,
      0.015586303035924131703,  0.018757527621469377912,
      0.021866451422853085946,  0.024902741467208773050,
      0.027856309310595870287,  0.030717342497870676054,
      0.033476336464372645716,  0.036124125840383552583,
      0.038651914782102516837,  0.041051306136644974222,
      0.043314329309597015442,  0.045433466728276713975,
      0.047401678806444991059,  0.049212427324528886069,
      0.050859697146188144320,  0.052338016198298744666,
      0.053642473647553611272,  0.054768736213057986306,
      0.055713062560589987683,  0.056472315730625965031,
      0.057043973558794598568,  0.057426137054112114859,
      0.057617536707147024672,  0.057617536707147024672,
      0.057426137054112114859,  0.057043973558794598568,
      0.056472315730625965031,  0.055713062560589987683,
      0.054768736213057986306,  0.053642473647553611272,
      0.052338016198298744666,  0.050859697146188144320,
      0.049212427324528886069,  0.047401678806444991059,
      0.045433466728276713975,  0.043314329309597015442,
      0.041051306136644974222,  0.038651914782102516837,
      0.036124125840383552583,  0.033476336464372645716,
      0.030717342497870676054,  0.027856309310595870287,
      0.024902741467208773050,  0.021866451422853085946,
      0.018757527621469377912,  0.015586303035924131703,
      0.012363328128847644166,  0.0090993694555093969480,
      0.0058056110152399848788, 0.0024974818357615857759};
  IntegratorXX::GaussLegendre<double, double> quad(54);
  const auto& pts = quad.points();
  const auto& wgt = quad.weights();
  for(auto i = 0ul; i < 54; i++) {
    REQUIRE_THAT(pts[i], Catch::Matchers::WithinAbs(ref_pts[i], x_tolerance));
    REQUIRE_THAT(wgt[i], Catch::Matchers::WithinAbs(ref_wgt[i], w_tolerance));
  }
}

TEST_CASE("55 point GaussLegendre", "[1d-quad]") {
  std::array<double, 55> ref_pts = {
      -0.99906141956481854148,  -0.99505797784741187504,
      -0.98786894119888919852,  -0.97751573550398920886,
      -0.96403132859313519878,  -0.94745886804121074186,
      -0.92785142472079169682,  -0.90527180074400002578,
      -0.87979232241989550607,  -0.85149460661715447146,
      -0.82046929855932091245,  -0.78681578112762236590,
      -0.75064185634802190867,  -0.71206339998663783891,
      -0.67120399031982639580,  -0.62819451224992814009,
      -0.58317273802603210297,  -0.53628288590834329672,
      -0.48767515818747409721,  -0.43750526003717459181,
      -0.38593390074097942976,  -0.33312627889002388519,
      -0.27925155320080653855,  -0.22448230064784548340,
      -0.16899396364687320828,  -0.11296428805932926659,
      -0.056572753818336776327, 0,
      0.056572753818336776327,  0.11296428805932926659,
      0.16899396364687320828,   0.22448230064784548340,
      0.27925155320080653855,   0.33312627889002388519,
      0.38593390074097942976,   0.43750526003717459181,
      0.48767515818747409721,   0.53628288590834329672,
      0.58317273802603210297,   0.62819451224992814009,
      0.67120399031982639580,   0.71206339998663783891,
      0.75064185634802190867,   0.78681578112762236590,
      0.82046929855932091245,   0.85149460661715447146,
      0.87979232241989550607,   0.90527180074400002578,
      0.92785142472079169682,   0.94745886804121074186,
      0.96403132859313519878,   0.97751573550398920886,
      0.98786894119888919852,   0.99505797784741187504,
      0.99906141956481854148};
  std::array<double, 55> ref_wgt = {
      0.0024083236199797888192, 0.0055986322665607673541,
      0.0087757461070585281774, 0.011925160719848612171,
      0.015036458333511788213,  0.018099614520729062408,
      0.021104801668016454120,  0.024042388009725622008,
      0.026902961456396270667,  0.029677357765161041221,
      0.032356689226185831685,  0.034932372873589887407,
      0.037396157867965545283,  0.039740151874337179609,
      0.041956846317718762395,  0.044039140421606589895,
      0.045980363946283838104,  0.047774298551200695550,
      0.049415197711551739481,  0.050897805124493979225,
      0.052217371545632084564,  0.053369670001605472724,
      0.054351009329911102070,  0.055158246002508687597,
      0.055788794195284087103,  0.056240634071084368028,
      0.056512318249772001401,  0.056602976444560425440,
      0.056512318249772001401,  0.056240634071084368028,
      0.055788794195284087103,  0.055158246002508687597,
      0.054351009329911102070,  0.053369670001605472724,
      0.052217371545632084564,  0.050897805124493979225,
      0.049415197711551739481,  0.047774298551200695550,
      0.045980363946283838104,  0.044039140421606589895,
      0.041956846317718762395,  0.039740151874337179609,
      0.037396157867965545283,  0.034932372873589887407,
      0.032356689226185831685,  0.029677357765161041221,
      0.026902961456396270667,  0.024042388009725622008,
      0.021104801668016454120,  0.018099614520729062408,
      0.015036458333511788213,  0.011925160719848612171,
      0.0087757461070585281774, 0.0055986322665607673541,
      0.0024083236199797888192};
  IntegratorXX::GaussLegendre<double, double> quad(55);
  const auto& pts = quad.points();
  const auto& wgt = quad.weights();
  for(auto i = 0ul; i < 55; i++) {
    REQUIRE_THAT(pts[i], Catch::Matchers::WithinAbs(ref_pts[i], x_tolerance));
    REQUIRE_THAT(wgt[i], Catch::Matchers::WithinAbs(ref_wgt[i], w_tolerance));
  }
}

TEST_CASE("56 point GaussLegendre", "[1d-quad]") {
  std::array<double, 56> ref_pts = {
      -0.99909434380146558435,  -0.99523122608106974722,
      -0.98829371554016151109,  -0.97830170914025638338,
      -0.96528590190549018363,  -0.94928647956196263565,
      -0.93035288024749630055,  -0.90854362042065549085,
      -0.88392610832782754079,  -0.85657643376274863540,
      -0.82657913214288165167,  -0.79402692289386649803,
      -0.75902042270512890220,  -0.72166783445018808352,
      -0.68208461269447045550,  -0.64039310680700689427,
      -0.59672218277066332010,  -0.55120682485553461875,
      -0.50398771838438171420,  -0.45521081487845957895,
      -0.40502688092709127812,  -0.35359103217495452097,
      -0.30106225386722066905,  -0.24760290943433720397,
      -0.19337823863527525824,  -0.13855584681037624201,
      -0.083305186822435374440, -0.027797035287275437094,
      0.027797035287275437094,  0.083305186822435374440,
      0.13855584681037624201,   0.19337823863527525824,
      0.24760290943433720397,   0.30106225386722066905,
      0.35359103217495452097,   0.40502688092709127812,
      0.45521081487845957895,   0.50398771838438171420,
      0.55120682485553461875,   0.59672218277066332010,
      0.64039310680700689427,   0.68208461269447045550,
      0.72166783445018808352,   0.75902042270512890220,
      0.79402692289386649803,   0.82657913214288165167,
      0.85657643376274863540,   0.88392610832782754079,
      0.90854362042065549085,   0.93035288024749630055,
      0.94928647956196263565,   0.96528590190549018363,
      0.97830170914025638338,   0.98829371554016151109,
      0.99523122608106974722,   0.99909434380146558435};
  std::array<double, 56> ref_wgt = {
      0.0023238553757732155011, 0.0054025222460153377613,
      0.0084690631633078876616, 0.011509824340383382174,
      0.014515089278021471808,  0.017475512911400946505,
      0.020381929882402572635,  0.023225351562565316937,
      0.025996987058391952192,  0.028688268473822741730,
      0.031290876747310447868,  0.033796767115611761295,
      0.036198193872315186036,  0.038487734259247662487,
      0.040658311384744517880,  0.042703216084667086511,
      0.044616127652692283213,  0.046391133373001896762,
      0.048022746793600258121,  0.049505924683047578920,
      0.050836082617798480560,  0.052009109151741399843,
      0.053021378524010763968,  0.053869761865714485709,
      0.054551636870889421062,  0.055064895901762425796,
      0.055407952503245123218,  0.055579746306514395846,
      0.055579746306514395846,  0.055407952503245123218,
      0.055064895901762425796,  0.054551636870889421062,
      0.053869761865714485709,  0.053021378524010763968,
      0.052009109151741399843,  0.050836082617798480560,
      0.049505924683047578920,  0.048022746793600258121,
      0.046391133373001896762,  0.044616127652692283213,
      0.042703216084667086511,  0.040658311384744517880,
      0.038487734259247662487,  0.036198193872315186036,
      0.033796767115611761295,  0.031290876747310447868,
      0.028688268473822741730,  0.025996987058391952192,
      0.023225351562565316937,  0.020381929882402572635,
      0.017475512911400946505,  0.014515089278021471808,
      0.011509824340383382174,  0.0084690631633078876616,
      0.0054025222460153377613, 0.0023238553757732155011};
  IntegratorXX::GaussLegendre<double, double> quad(56);
  const auto& pts = quad.points();
  const auto& wgt = quad.weights();
  for(auto i = 0ul; i < 56; i++) {
    REQUIRE_THAT(pts[i], Catch::Matchers::WithinAbs(ref_pts[i], x_tolerance));
    REQUIRE_THAT(wgt[i], Catch::Matchers::WithinAbs(ref_wgt[i], w_tolerance));
  }
}

TEST_CASE("57 point GaussLegendre", "[1d-quad]") {
  std::array<double, 57> ref_pts = {-0.99912556562526285057,
                                    -0.99539552367843031114,
                                    -0.98869657765022204885,
                                    -0.97904722670946871380,
                                    -0.96647608517188667911,
                                    -0.95102062644787674191,
                                    -0.93272696106710169610,
                                    -0.91164967852139121273,
                                    -0.88785167888222132951,
                                    -0.86140398326204694472,
                                    -0.83238552115043912083,
                                    -0.80088289454721824208,
                                    -0.76699011935945019549,
                                    -0.73080834474452332283,
                                    -0.69244555119951773904,
                                    -0.65201622828097689125,
                                    -0.60964103290871536542,
                                    -0.56544642926923675902,
                                    -0.51956431139118760631,
                                    -0.47213160951797570959,
                                    -0.42328988145156395096,
                                    -0.37318489008659445855,
                                    -0.32196616839537864059,
                                    -0.26978657316183876576,
                                    -0.21680182879612403641,
                                    -0.16317006259126425104,
                                    -0.10905133280878780098,
                                    -0.054607151001646824220,
                                    0,
                                    0.054607151001646824220,
                                    0.10905133280878780098,
                                    0.16317006259126425104,
                                    0.21680182879612403641,
                                    0.26978657316183876576,
                                    0.32196616839537864059,
                                    0.37318489008659445855,
                                    0.42328988145156395096,
                                    0.47213160951797570959,
                                    0.51956431139118760631,
                                    0.56544642926923675902,
                                    0.60964103290871536542,
                                    0.65201622828097689125,
                                    0.69244555119951773904,
                                    0.73080834474452332283,
                                    0.76699011935945019549,
                                    0.80088289454721824208,
                                    0.83238552115043912083,
                                    0.86140398326204694472,
                                    0.88785167888222132951,
                                    0.91164967852139121273,
                                    0.93272696106710169610,
                                    0.95102062644787674191,
                                    0.96647608517188667911,
                                    0.97904722670946871380,
                                    0.98869657765022204885,
                                    0.99539552367843031114,
                                    0.99912556562526285057};
  std::array<double, 57> ref_wgt = {
      0.0022437538722506629096, 0.0052165334747187793905,
      0.0081781600678212326262, 0.011115763732335990146,
      0.014020270790753556170,  0.016882959023441549035,
      0.019695270699488520382,  0.022448807890776438080,
      0.025135350990918122647,  0.027746881402180192321,
      0.030275604842693999458,  0.032713974366371568542,
      0.035054712782312617506,  0.037290834324417317355,
      0.039415665475480114090,  0.041422864870801110363,
      0.043306442216215196596,  0.045060776161381157797,
      0.046680631073641503784,  0.048161172661687751269,
      0.049497982402019678994,  0.050687070724927408657,
      0.051724888920517824721,  0.052608339729177432440,
      0.053334786584819158427,  0.053902061483298574643,
      0.054308471452498643139,  0.054552803604761886480,
      0.054634328756584024063,  0.054552803604761886480,
      0.054308471452498643139,  0.053902061483298574643,
      0.053334786584819158427,  0.052608339729177432440,
      0.051724888920517824721,  0.050687070724927408657,
      0.049497982402019678994,  0.048161172661687751269,
      0.046680631073641503784,  0.045060776161381157797,
      0.043306442216215196596,  0.041422864870801110363,
      0.039415665475480114090,  0.037290834324417317355,
      0.035054712782312617506,  0.032713974366371568542,
      0.030275604842693999458,  0.027746881402180192321,
      0.025135350990918122647,  0.022448807890776438080,
      0.019695270699488520382,  0.016882959023441549035,
      0.014020270790753556170,  0.011115763732335990146,
      0.0081781600678212326262, 0.0052165334747187793905,
      0.0022437538722506629096};
  IntegratorXX::GaussLegendre<double, double> quad(57);
  const auto& pts = quad.points();
  const auto& wgt = quad.weights();
  for(auto i = 0ul; i < 57; i++) {
    REQUIRE_THAT(pts[i], Catch::Matchers::WithinAbs(ref_pts[i], x_tolerance));
    REQUIRE_THAT(wgt[i], Catch::Matchers::WithinAbs(ref_wgt[i], w_tolerance));
  }
}

TEST_CASE("58 point GaussLegendre", "[1d-quad]") {
  std::array<double, 58> ref_pts = {
      -0.99915520040738660644,  -0.99555147659729090260,
      -0.98907900824844263650,  -0.97975501469435030911,
      -0.96760620250292409015,  -0.95266755751886909144,
      -0.93498213758825934848,  -0.91460092856435254069,
      -0.89158269202203017640,  -0.86599379407480747928,
      -0.83790801333937331635,  -0.80740632791308814105,
      -0.77457668174965274527,  -0.73951373102004226785,
      -0.70231857115390811348,  -0.66309844533212526643,
      -0.62196643526307911103,  -0.57904113513022503049,
      -0.53444630964884758640,  -0.48831053721671846362,
      -0.44076683918683956519,  -0.39195229633075315037,
      -0.34200765359799526125,  -0.29107691431110918953,
      -0.23930692496615345443,  -0.18684695183576132137,
      -0.13384825059546685702,  -0.080463630214142729310,
      -0.026847012365942355803, 0.026847012365942355803,
      0.080463630214142729310,  0.13384825059546685702,
      0.18684695183576132137,   0.23930692496615345443,
      0.29107691431110918953,   0.34200765359799526125,
      0.39195229633075315037,   0.44076683918683956519,
      0.48831053721671846362,   0.53444630964884758640,
      0.57904113513022503049,   0.62196643526307911103,
      0.66309844533212526643,   0.70231857115390811348,
      0.73951373102004226785,   0.77457668174965274527,
      0.80740632791308814105,   0.83790801333937331635,
      0.86599379407480747928,   0.89158269202203017640,
      0.91460092856435254069,   0.93498213758825934848,
      0.95266755751886909144,   0.96760620250292409015,
      0.97975501469435030911,   0.98907900824844263650,
      0.99555147659729090260,   0.99915520040738660644};
  std::array<double, 58> ref_wgt = {
      0.0021677232496274499430, 0.0050399816126502430850,
      0.0079019738499986747540, 0.010741553532878774117,
      0.013550237112988812145,  0.016319874234970965052,
      0.019042465461893408656,  0.021710156140146235767,
      0.024315252724963952540,  0.026850243181981868476,
      0.029307818044160490718,  0.031680891253809327320,
      0.033962620493416010798,  0.036146426867087270541,
      0.038226013845858433229,  0.040195385409867796888,
      0.042048863329582125995,  0.043781103533640251039,
      0.045387111514819802504,  0.046862256729026346918,
      0.048202285945417748407,  0.049403335508962392866,
      0.050461942479953125298,  0.051375054618285725475,
      0.052140039183669818971,  0.052754690526370833430,
      0.053217236446579014103,  0.053526343304058252101,
      0.053681119863334848864,  0.053681119863334848864,
      0.053526343304058252101,  0.053217236446579014103,
      0.052754690526370833430,  0.052140039183669818971,
      0.051375054618285725475,  0.050461942479953125298,
      0.049403335508962392866,  0.048202285945417748407,
      0.046862256729026346918,  0.045387111514819802504,
      0.043781103533640251039,  0.042048863329582125995,
      0.040195385409867796888,  0.038226013845858433229,
      0.036146426867087270541,  0.033962620493416010798,
      0.031680891253809327320,  0.029307818044160490718,
      0.026850243181981868476,  0.024315252724963952540,
      0.021710156140146235767,  0.019042465461893408656,
      0.016319874234970965052,  0.013550237112988812145,
      0.010741553532878774117,  0.0079019738499986747540,
      0.0050399816126502430850, 0.0021677232496274499430};
  IntegratorXX::GaussLegendre<double, double> quad(58);
  const auto& pts = quad.points();
  const auto& wgt = quad.weights();
  for(auto i = 0ul; i < 58; i++) {
    REQUIRE_THAT(pts[i], Catch::Matchers::WithinAbs(ref_pts[i], x_tolerance));
    REQUIRE_THAT(wgt[i], Catch::Matchers::WithinAbs(ref_wgt[i], w_tolerance));
  }
}

TEST_CASE("59 point GaussLegendre", "[1d-quad]") {
  std::array<double, 59> ref_pts = {
      -0.99918335390929468376,  -0.99569964038324596469,
      -0.98944236513373093178,  -0.98042757395671568845,
      -0.96868022168178153135,  -0.95423300937695105586,
      -0.93712619035345385941,  -0.91740743878815528135,
      -0.89513171174347208536,  -0.87036109429288226096,
      -0.84316462581687220147,  -0.81361810728821157143,
      -0.78180388986236090563,  -0.74781064527864023189,
      -0.71173311867719773160,  -0.67367186450493722702,
      -0.63373296623885009751,  -0.59202774070403014446,
      -0.54867242780839638437,  -0.50378786655771797877,
      -0.45749915825326669023,  -0.40993531781041896672,
      -0.36122891416979480999,  -0.31151570080301370032,
      -0.26093423734281171161,  -0.20962550339203654492,
      -0.15773250558785796812,  -0.10539987901634414384,
      -0.052773484088310003952, 0,
      0.052773484088310003952,  0.10539987901634414384,
      0.15773250558785796812,   0.20962550339203654492,
      0.26093423734281171161,   0.31151570080301370032,
      0.36122891416979480999,   0.40993531781041896672,
      0.45749915825326669023,   0.50378786655771797877,
      0.54867242780839638437,   0.59202774070403014446,
      0.63373296623885009751,   0.67367186450493722702,
      0.71173311867719773160,   0.74781064527864023189,
      0.78180388986236090563,   0.81361810728821157143,
      0.84316462581687220147,   0.87036109429288226096,
      0.89513171174347208536,   0.91740743878815528135,
      0.93712619035345385941,   0.95423300937695105586,
      0.96868022168178153135,   0.98042757395671568845,
      0.98944236513373093178,   0.99569964038324596469,
      0.99918335390929468376};
  std::array<double, 59> ref_wgt = {
      0.0020954922845412234027, 0.0048722391682652847686,
      0.0076395294534875751427, 0.010385885500995862194,
      0.013103366306345191018,  0.015784347313081466147,
      0.018421342753610029361,  0.021006998288437187350,
      0.023534105393713363425,  0.025995619731298500187,
      0.028384680200534797905,  0.030694627836111683240,
      0.032919024271045277757,  0.035051669636400108784,
      0.037086619818870922692,  0.039018203016160009503,
      0.040841035538686707660,  0.042550036811067638667,
      0.044140443530297380691,  0.045607822940509769832,
      0.046948085186962019193,  0.048157494714606440388,
      0.049232680679361985780,  0.050170646342996902811,
      0.050968777425393916850,  0.051624849390891482146,
      0.052137033648375391384,  0.052503902647828739051,
      0.052724433859127931961,  0.052798012621990421416,
      0.052724433859127931961,  0.052503902647828739051,
      0.052137033648375391384,  0.051624849390891482146,
      0.050968777425393916850,  0.050170646342996902811,
      0.049232680679361985780,  0.048157494714606440388,
      0.046948085186962019193,  0.045607822940509769832,
      0.044140443530297380691,  0.042550036811067638667,
      0.040841035538686707660,  0.039018203016160009503,
      0.037086619818870922692,  0.035051669636400108784,
      0.032919024271045277757,  0.030694627836111683240,
      0.028384680200534797905,  0.025995619731298500187,
      0.023534105393713363425,  0.021006998288437187350,
      0.018421342753610029361,  0.015784347313081466147,
      0.013103366306345191018,  0.010385885500995862194,
      0.0076395294534875751427, 0.0048722391682652847686,
      0.0020954922845412234027};
  IntegratorXX::GaussLegendre<double, double> quad(59);
  const auto& pts = quad.points();
  const auto& wgt = quad.weights();
  for(auto i = 0ul; i < 59; i++) {
    REQUIRE_THAT(pts[i], Catch::Matchers::WithinAbs(ref_pts[i], x_tolerance));
    REQUIRE_THAT(wgt[i], Catch::Matchers::WithinAbs(ref_wgt[i], w_tolerance));
  }
}

TEST_CASE("60 point GaussLegendre", "[1d-quad]") {
  std::array<double, 60> ref_pts = {
      -0.99921012322743602203,  -0.99584052511883817388,
      -0.98978789522222171737,  -0.98106720175259818562,
      -0.96970178876505273372,  -0.95572225583999610740,
      -0.93916627611642324950,  -0.92007847617762755286,
      -0.89851031081004594194,  -0.87451992264689831513,
      -0.84817198478592963249,  -0.81953752616214575937,
      -0.78869373993226405457,  -0.75572377530658568687,
      -0.72071651335573039944,  -0.68376632738135543722,
      -0.64497282848947706781,  -0.60444059704851036344,
      -0.56227890075394453918,  -0.51860140005856974742,
      -0.47352584176170711111,  -0.42717374158307838931,
      -0.37967005657679797716,  -0.33114284826844819425,
      -0.28172293742326169169,  -0.23154355137602933801,
      -0.18073996487342541724,  -0.12944913539694500315,
      -0.077809333949536569419, -0.025959772301247798589,
      0.025959772301247798589,  0.077809333949536569419,
      0.12944913539694500315,   0.18073996487342541724,
      0.23154355137602933801,   0.28172293742326169169,
      0.33114284826844819425,   0.37967005657679797716,
      0.42717374158307838931,   0.47352584176170711111,
      0.51860140005856974742,   0.56227890075394453918,
      0.60444059704851036344,   0.64497282848947706781,
      0.68376632738135543722,   0.72071651335573039944,
      0.75572377530658568687,   0.78869373993226405457,
      0.81953752616214575937,   0.84817198478592963249,
      0.87451992264689831513,   0.89851031081004594194,
      0.92007847617762755286,   0.93916627611642324950,
      0.95572225583999610740,   0.96970178876505273372,
      0.98106720175259818562,   0.98978789522222171737,
      0.99584052511883817388,   0.99921012322743602203};
  std::array<double, 60> ref_wgt = {
      0.0020268119688737584964, 0.0047127299269535686408,
      0.0073899311633454555315, 0.010047557182287984358,
      0.012678166476815960131,  0.015274618596784799307,
      0.017829901014207720260,  0.020337120729457286775,
      0.022789516943997819864,  0.025180477621521248380,
      0.027503556749924791635,  0.029752491500788945241,
      0.031921219019296328949,  0.034003892724946422835,
      0.035994898051084503067,  0.037888867569243444031,
      0.039680695452380799470,  0.041365551235584755613,
      0.042938892835935641954,  0.044396478795787113328,
      0.045734379716114486647,  0.046948988848912204847,
      0.048037031819971180964,  0.048995575455756835389,
      0.049822035690550181011,  0.050514184532509374598,
      0.051070156069855627405,  0.051488451500980933995,
      0.051767943174910187544,  0.051907877631220639733,
      0.051907877631220639733,  0.051767943174910187544,
      0.051488451500980933995,  0.051070156069855627405,
      0.050514184532509374598,  0.049822035690550181011,
      0.048995575455756835389,  0.048037031819971180964,
      0.046948988848912204847,  0.045734379716114486647,
      0.044396478795787113328,  0.042938892835935641954,
      0.041365551235584755613,  0.039680695452380799470,
      0.037888867569243444031,  0.035994898051084503067,
      0.034003892724946422835,  0.031921219019296328949,
      0.029752491500788945241,  0.027503556749924791635,
      0.025180477621521248380,  0.022789516943997819864,
      0.020337120729457286775,  0.017829901014207720260,
      0.015274618596784799307,  0.012678166476815960131,
      0.010047557182287984358,  0.0073899311633454555315,
      0.0047127299269535686408, 0.0020268119688737584964};
  IntegratorXX::GaussLegendre<double, double> quad(60);
  const auto& pts = quad.points();
  const auto& wgt = quad.weights();
  for(auto i = 0ul; i < 60; i++) {
    REQUIRE_THAT(pts[i], Catch::Matchers::WithinAbs(ref_pts[i], x_tolerance));
    REQUIRE_THAT(wgt[i], Catch::Matchers::WithinAbs(ref_wgt[i], w_tolerance));
  }
}

TEST_CASE("61 point GaussLegendre", "[1d-quad]") {
  std::array<double, 61> ref_pts = {-0.99923559763136347173,
                                    -0.99597459981512023427,
                                    -0.99011674523251705097,
                                    -0.98167601128403707969,
                                    -0.97067425883318290825,
                                    -0.95714015191298409137,
                                    -0.94110898668136114748,
                                    -0.92262258138295526126,
                                    -0.90172916247400117064,
                                    -0.87848323721488103248,
                                    -0.85294545084766344556,
                                    -0.82518242810865995066,
                                    -0.79526659928235964915,
                                    -0.76327601117231219715,
                                    -0.72929412344946510969,
                                    -0.69340959089449115550,
                                    -0.65571603209507087170,
                                    -0.61631178519792172471,
                                    -0.57529965135083061860,
                                    -0.53278662650292526564,
                                    -0.48888362226225211882,
                                    -0.44370517653853160200,
                                    -0.39736915472575660918,
                                    -0.34999644220406683453,
                                    -0.30171062896303071260,
                                    -0.25263768716905349583,
                                    -0.20290564251805849923,
                                    -0.15264424023081530053,
                                    -0.10198460656227406896,
                                    -0.051058906707974349367,
                                    0,
                                    0.051058906707974349367,
                                    0.10198460656227406896,
                                    0.15264424023081530053,
                                    0.20290564251805849923,
                                    0.25263768716905349583,
                                    0.30171062896303071260,
                                    0.34999644220406683453,
                                    0.39736915472575660918,
                                    0.44370517653853160200,
                                    0.48888362226225211882,
                                    0.53278662650292526564,
                                    0.57529965135083061860,
                                    0.61631178519792172471,
                                    0.65571603209507087170,
                                    0.69340959089449115550,
                                    0.72929412344946510969,
                                    0.76327601117231219715,
                                    0.79526659928235964915,
                                    0.82518242810865995066,
                                    0.85294545084766344556,
                                    0.87848323721488103248,
                                    0.90172916247400117064,
                                    0.92262258138295526126,
                                    0.94110898668136114748,
                                    0.95714015191298409137,
                                    0.97067425883318290825,
                                    0.98167601128403707969,
                                    0.99011674523251705097,
                                    0.99597459981512023427,
                                    0.99923559763136347173};
  std::array<double, 61> ref_wgt = {
      0.0019614533616702826718, 0.0045609240060124171846,
      0.0071523549917490895859, 0.0097254618303561337361,
      0.012273263507812104629,  0.014789065884937914546,
      0.017266292987613743594,  0.019698477746101181331,
      0.022079273148319044002,  0.024402467187544202915,
      0.026661998524150889663,  0.028851972088183401504,
      0.030966674368397394825,  0.033000588275907410633,
      0.034948407516533351091,  0.036805050423154817384,
      0.038565673207008172746,  0.040225682590998247368,
      0.041780747790888492067,  0.043226811812496097901,
      0.044560102035083488272,  0.045777140053145959371,
      0.046874750750809065976,  0.047850070585095607162,
      0.048700555056411526088,  0.049423985346735589940,
      0.050018474108178253425,  0.050482470386797404648,
      0.050814763668818343208,  0.051014487038697263544,
      0.051081119440786217978,  0.051014487038697263544,
      0.050814763668818343208,  0.050482470386797404648,
      0.050018474108178253425,  0.049423985346735589940,
      0.048700555056411526088,  0.047850070585095607162,
      0.046874750750809065976,  0.045777140053145959371,
      0.044560102035083488272,  0.043226811812496097901,
      0.041780747790888492067,  0.040225682590998247368,
      0.038565673207008172746,  0.036805050423154817384,
      0.034948407516533351091,  0.033000588275907410633,
      0.030966674368397394825,  0.028851972088183401504,
      0.026661998524150889663,  0.024402467187544202915,
      0.022079273148319044002,  0.019698477746101181331,
      0.017266292987613743594,  0.014789065884937914546,
      0.012273263507812104629,  0.0097254618303561337361,
      0.0071523549917490895859, 0.0045609240060124171846,
      0.0019614533616702826718};
  IntegratorXX::GaussLegendre<double, double> quad(61);
  const auto& pts = quad.points();
  const auto& wgt = quad.weights();
  for(auto i = 0ul; i < 61; i++) {
    REQUIRE_THAT(pts[i], Catch::Matchers::WithinAbs(ref_pts[i], x_tolerance));
    REQUIRE_THAT(wgt[i], Catch::Matchers::WithinAbs(ref_wgt[i], w_tolerance));
  }
}

TEST_CASE("62 point GaussLegendre", "[1d-quad]") {
  std::array<double, 62> ref_pts = {
      -0.99925985930877702970,  -0.99610229631626713289,
      -0.99042997118929035243,  -0.98225594909723664949,
      -0.97160072337165180645,  -0.95849117297392709203,
      -0.94296040139232850383,  -0.92504763563620375523,
      -0.90479812252109346576,  -0.88226301283189736307,
      -0.85749923151207092282,  -0.83056933360400485135,
      -0.80154134610397637154,  -0.77048859605541931899,
      -0.73748952528315674986,  -0.70262749222229705512,
      -0.66599056133547944700,  -0.62767128064688518073,
      -0.58776644795308733800,  -0.54637686630025109582,
      -0.50360708934475595592,  -0.45956515724011339521,
      -0.41436232371712604813,  -0.36811277504656452966,
      -0.32093334159419400407,  -0.27294320269672634319,
      -0.22426358560416553167,  -0.17501745924901562856,
      -0.12532922361589680862,  -0.075324395496234332764,
      -0.025129291421820614727, 0.025129291421820614727,
      0.075324395496234332764,  0.12532922361589680862,
      0.17501745924901562856,   0.22426358560416553167,
      0.27294320269672634319,   0.32093334159419400407,
      0.36811277504656452966,   0.41436232371712604813,
      0.45956515724011339521,   0.50360708934475595592,
      0.54637686630025109582,   0.58776644795308733800,
      0.62767128064688518073,   0.66599056133547944700,
      0.70262749222229705512,   0.73748952528315674986,
      0.77048859605541931899,   0.80154134610397637154,
      0.83056933360400485135,   0.85749923151207092282,
      0.88226301283189736307,   0.90479812252109346576,
      0.92504763563620375523,   0.94296040139232850383,
      0.95849117297392709203,   0.97160072337165180645,
      0.98225594909723664949,   0.99042997118929035243,
      0.99610229631626713289,   0.99925985930877702970};
  std::array<double, 62> ref_wgt = {
      0.0018992056795136904804, 0.0044163334569309048133,
      0.0069260419018309608717, 0.0094185794284203876379,
      0.011887390117010501945,  0.014326191823806517767,
      0.016728811790177316289,  0.019089176658573198733,
      0.021401322277669968841,  0.023659407208682792575,
      0.025857726954024698027,  0.027990728163314637541,
      0.030053022573989870077,  0.032039400581624678106,
      0.033944844379410545091,  0.035764540622768141286,
      0.037493892582280029986,  0.039128531751963084123,
      0.040664328882417440968,  0.042097404410385096643,
      0.043424138258047419580,  0.044641178977124414294,
      0.045745452214570180777,  0.046734168478415524802,
      0.047604830184101232270,  0.048355237963477672835,
      0.048983496220517837105,  0.049488017919699292528,
      0.049867528594952394245,  0.050121069569043288075,
      0.050248000375256281688,  0.050248000375256281688,
      0.050121069569043288075,  0.049867528594952394245,
      0.049488017919699292528,  0.048983496220517837105,
      0.048355237963477672835,  0.047604830184101232270,
      0.046734168478415524802,  0.045745452214570180777,
      0.044641178977124414294,  0.043424138258047419580,
      0.042097404410385096643,  0.040664328882417440968,
      0.039128531751963084123,  0.037493892582280029986,
      0.035764540622768141286,  0.033944844379410545091,
      0.032039400581624678106,  0.030053022573989870077,
      0.027990728163314637541,  0.025857726954024698027,
      0.023659407208682792575,  0.021401322277669968841,
      0.019089176658573198733,  0.016728811790177316289,
      0.014326191823806517767,  0.011887390117010501945,
      0.0094185794284203876379, 0.0069260419018309608717,
      0.0044163334569309048133, 0.0018992056795136904804};
  IntegratorXX::GaussLegendre<double, double> quad(62);
  const auto& pts = quad.points();
  const auto& wgt = quad.weights();
  for(auto i = 0ul; i < 62; i++) {
    REQUIRE_THAT(pts[i], Catch::Matchers::WithinAbs(ref_pts[i], x_tolerance));
    REQUIRE_THAT(wgt[i], Catch::Matchers::WithinAbs(ref_wgt[i], w_tolerance));
  }
}

TEST_CASE("63 point GaussLegendre", "[1d-quad]") {
  std::array<double, 63> ref_pts = {
      -0.99928298402912378038,  -0.99622401277797010860,
      -0.99072854689218946681,  -0.98280881059372723486,
      -0.97248403469757002280,  -0.95977944975894192707,
      -0.94472613404100980297,  -0.92736092062184320545,
      -0.90772630277853155804,  -0.88587032850785342629,
      -0.86184648236412371954,  -0.83571355431950284347,
      -0.80753549577345676005,  -0.77738126299037233556,
      -0.74532464831784741783,  -0.71144409958484580785,
      -0.67582252811498609013,  -0.63854710582136538500,
      -0.59970905187762523574,  -0.55940340948628501327,
      -0.51772881329003324812,  -0.47478724799480439992,
      -0.43068379879511160066,  -0.38552639421224789248,
      -0.33942554197458440247,  -0.29249405858625144004,
      -0.24484679324595336275,  -0.19660034679150668456,
      -0.14787278635787196857,  -0.098783356446945279530,
      -0.049452187116159627234, 0,
      0.049452187116159627234,  0.098783356446945279530,
      0.14787278635787196857,   0.19660034679150668456,
      0.24484679324595336275,   0.29249405858625144004,
      0.33942554197458440247,   0.38552639421224789248,
      0.43068379879511160066,   0.47478724799480439992,
      0.51772881329003324812,   0.55940340948628501327,
      0.59970905187762523574,   0.63854710582136538500,
      0.67582252811498609013,   0.71144409958484580785,
      0.74532464831784741783,   0.77738126299037233556,
      0.80753549577345676005,   0.83571355431950284347,
      0.86184648236412371954,   0.88587032850785342629,
      0.90772630277853155804,   0.92736092062184320545,
      0.94472613404100980297,   0.95977944975894192707,
      0.97248403469757002280,   0.98280881059372723486,
      0.99072854689218946681,   0.99622401277797010860,
      0.99928298402912378038};
  std::array<double, 63> ref_wgt = {
      0.0018398745955770841171, 0.0042785083468637618661,
      0.0067102917659601362519, 0.0091259686763266563541,
      0.011519376076880041751,  0.013884612616115610825,
      0.016215878410338338882,  0.018507464460161270409,
      0.020753761258039090775,  0.022949271004889933149,
      0.025088620553344986619,  0.027166574359097933225,
      0.029178047208280526946,  0.031118116622219817508,
      0.032982034883779341766,  0.034765240645355877697,
      0.036463370085457289630,  0.038072267584349556764,
      0.039587995891544093985,  0.041006845759666398635,
      0.042325345020815822983,  0.043540267083027590799,
      0.044648638825941395370,  0.045647747876292608686,
      0.046535149245383696510,  0.047308671312268919081,
      0.047966421137995131411,  0.048506789097883847864,
      0.048928452820511989945,  0.049230380423747560785,
      0.049411833039918178967,  0.049472366623931020889,
      0.049411833039918178967,  0.049230380423747560785,
      0.048928452820511989945,  0.048506789097883847864,
      0.047966421137995131411,  0.047308671312268919081,
      0.046535149245383696510,  0.045647747876292608686,
      0.044648638825941395370,  0.043540267083027590799,
      0.042325345020815822983,  0.041006845759666398635,
      0.039587995891544093985,  0.038072267584349556764,
      0.036463370085457289630,  0.034765240645355877697,
      0.032982034883779341766,  0.031118116622219817508,
      0.029178047208280526946,  0.027166574359097933225,
      0.025088620553344986619,  0.022949271004889933149,
      0.020753761258039090775,  0.018507464460161270409,
      0.016215878410338338882,  0.013884612616115610825,
      0.011519376076880041751,  0.0091259686763266563541,
      0.0067102917659601362519, 0.0042785083468637618661,
      0.0018398745955770841171};
  IntegratorXX::GaussLegendre<double, double> quad(63);
  const auto& pts = quad.points();
  const auto& wgt = quad.weights();
  for(auto i = 0ul; i < 63; i++) {
    REQUIRE_THAT(pts[i], Catch::Matchers::WithinAbs(ref_pts[i], x_tolerance));
    REQUIRE_THAT(wgt[i], Catch::Matchers::WithinAbs(ref_wgt[i], w_tolerance));
  }
}

TEST_CASE("64 point GaussLegendre", "[1d-quad]") {
  std::array<double, 64> ref_pts = {
      -0.99930504173577213946,  -0.99634011677195527935,
      -0.99101337147674432074,  -0.98333625388462595693,
      -0.97332682778991096374,  -0.96100879965205371892,
      -0.94641137485840281606,  -0.92956917213193957582,
      -0.91052213707850280576,  -0.88931544599511410585,
      -0.86599939815409281976,  -0.84062929625258036275,
      -0.81326531512279755974,  -0.78397235894334140761,
      -0.75281990726053189661,  -0.71988185017161082685,
      -0.68523631305423324256,  -0.64896547125465733986,
      -0.61115535517239325025,  -0.57189564620263403428,
      -0.53127946401989454566,  -0.48940314570705295748,
      -0.44636601725346408798,  -0.40227015796399160370,
      -0.35722015833766811595,  -0.31132287199021095616,
      -0.26468716220876741637,  -0.21742364374000708415,
      -0.16964442042399281804,  -0.12146281929612055447,
      -0.072993121787799039450, -0.024350292663424432509,
      0.024350292663424432509,  0.072993121787799039450,
      0.12146281929612055447,   0.16964442042399281804,
      0.21742364374000708415,   0.26468716220876741637,
      0.31132287199021095616,   0.35722015833766811595,
      0.40227015796399160370,   0.44636601725346408798,
      0.48940314570705295748,   0.53127946401989454566,
      0.57189564620263403428,   0.61115535517239325025,
      0.64896547125465733986,   0.68523631305423324256,
      0.71988185017161082685,   0.75281990726053189661,
      0.78397235894334140761,   0.81326531512279755974,
      0.84062929625258036275,   0.86599939815409281976,
      0.88931544599511410585,   0.91052213707850280576,
      0.92956917213193957582,   0.94641137485840281606,
      0.96100879965205371892,   0.97332682778991096374,
      0.98333625388462595693,   0.99101337147674432074,
      0.99634011677195527935,   0.99930504173577213946};
  std::array<double, 64> ref_wgt = {
      0.0017832807216964329474, 0.0041470332605624676353,
      0.0065044579689783628561, 0.0088467598263639477230,
      0.011168139460131128819,  0.013463047896718642598,
      0.015726030476024719322,  0.017951715775697343085,
      0.020134823153530209372,  0.022270173808383254159,
      0.024352702568710873338,  0.026377469715054658672,
      0.028339672614259483228,  0.030234657072402478868,
      0.032057928354851553585,  0.033805161837141609392,
      0.035472213256882383811,  0.037055128540240046040,
      0.038550153178615629129,  0.039953741132720341387,
      0.041262563242623528610,  0.042473515123653589007,
      0.043583724529323453377,  0.044590558163756563060,
      0.045491627927418144480,  0.046284796581314417296,
      0.046968182816210017325,  0.047540165714830308662,
      0.047999388596458307728,  0.048344762234802957170,
      0.048575467441503426935,  0.048690957009139720383,
      0.048690957009139720383,  0.048575467441503426935,
      0.048344762234802957170,  0.047999388596458307728,
      0.047540165714830308662,  0.046968182816210017325,
      0.046284796581314417296,  0.045491627927418144480,
      0.044590558163756563060,  0.043583724529323453377,
      0.042473515123653589007,  0.041262563242623528610,
      0.039953741132720341387,  0.038550153178615629129,
      0.037055128540240046040,  0.035472213256882383811,
      0.033805161837141609392,  0.032057928354851553585,
      0.030234657072402478868,  0.028339672614259483228,
      0.026377469715054658672,  0.024352702568710873338,
      0.022270173808383254159,  0.020134823153530209372,
      0.017951715775697343085,  0.015726030476024719322,
      0.013463047896718642598,  0.011168139460131128819,
      0.0088467598263639477230, 0.0065044579689783628561,
      0.0041470332605624676353, 0.0017832807216964329474};
  IntegratorXX::GaussLegendre<double, double> quad(64);
  const auto& pts = quad.points();
  const auto& wgt = quad.weights();
  for(auto i = 0ul; i < 64; i++) {
    REQUIRE_THAT(pts[i], Catch::Matchers::WithinAbs(ref_pts[i], x_tolerance));
    REQUIRE_THAT(wgt[i], Catch::Matchers::WithinAbs(ref_wgt[i], w_tolerance));
  }
}

TEST_CASE("65 point GaussLegendre", "[1d-quad]") {
  std::array<double, 65> ref_pts = {-0.99932609707541287727,
                                    -0.99645094806184916306,
                                    -0.99128527617680166872,
                                    -0.98383981218703494138,
                                    -0.97413153983355116908,
                                    -0.96218275471805523771,
                                    -0.94802092816840750637,
                                    -0.93167862822874933797,
                                    -0.91319344054284626174,
                                    -0.89260788050473893142,
                                    -0.86996929492640703619,
                                    -0.84532975289993028394,
                                    -0.81874592592265145343,
                                    -0.79027895749212184305,
                                    -0.75999432244199978687,
                                    -0.72796167632942467901,
                                    -0.69425469521399163355,
                                    -0.65895090619362513304,
                                    -0.62213150908540024158,
                                    -0.58388118966048731333,
                                    -0.54428792486222713855,
                                    -0.50344278045500688234,
                                    -0.46143970156914505770,
                                    -0.41837529662340900926,
                                    -0.37434861512206601201,
                                    -0.32946091983748640765,
                                    -0.28381545390224873062,
                                    -0.23751720334641680657,
                                    -0.19067265562614276977,
                                    -0.14338955469897517113,
                                    -0.095776653209197505652,
                                    -0.047943462353171857523,
                                    0,
                                    0.047943462353171857523,
                                    0.095776653209197505652,
                                    0.14338955469897517113,
                                    0.19067265562614276977,
                                    0.23751720334641680657,
                                    0.28381545390224873062,
                                    0.32946091983748640765,
                                    0.37434861512206601201,
                                    0.41837529662340900926,
                                    0.46143970156914505770,
                                    0.50344278045500688234,
                                    0.54428792486222713855,
                                    0.58388118966048731333,
                                    0.62213150908540024158,
                                    0.65895090619362513304,
                                    0.69425469521399163355,
                                    0.72796167632942467901,
                                    0.75999432244199978687,
                                    0.79027895749212184305,
                                    0.81874592592265145343,
                                    0.84532975289993028394,
                                    0.86996929492640703619,
                                    0.89260788050473893142,
                                    0.91319344054284626174,
                                    0.93167862822874933797,
                                    0.94802092816840750637,
                                    0.96218275471805523771,
                                    0.97413153983355116908,
                                    0.98383981218703494138,
                                    0.99128527617680166872,
                                    0.99645094806184916306,
                                    0.99932609707541287727};
  std::array<double, 65> ref_wgt = {
      0.0017292582513002508983, 0.0040215241720037363471,
      0.0063079425789717545502, 0.0085801482668814598936,
      0.010832678789597968622,  0.013060311639994846336,
      0.015257912146448310349,  0.017420421997670248495,
      0.019542865836750062827,  0.021620361284934062842,
      0.023648129691287236699,  0.025621506938037758214,
      0.027535954088450343942,  0.029387067789310668063,
      0.031170590380189142464,  0.032882419676368574984,
      0.034518618398549058625,  0.036075423225565273932,
      0.037549253448257709810,  0.038936719204051197617,
      0.040234629273005533815,  0.041439998417240293023,
      0.042550054246755802719,  0.043562243595800486532,
      0.044474238395082974427,  0.045283941026300230657,
      0.045989489146651696964,  0.046589259972233498302,
      0.047081874010454522246,  0.047466198232885503153,
      0.047741348681240621559,  0.047906692500495862031,
      0.047961849394466618121,  0.047906692500495862031,
      0.047741348681240621559,  0.047466198232885503153,
      0.047081874010454522246,  0.046589259972233498302,
      0.045989489146651696964,  0.045283941026300230657,
      0.044474238395082974427,  0.043562243595800486532,
      0.042550054246755802719,  0.041439998417240293023,
      0.040234629273005533815,  0.038936719204051197617,
      0.037549253448257709810,  0.036075423225565273932,
      0.034518618398549058625,  0.032882419676368574984,
      0.031170590380189142464,  0.029387067789310668063,
      0.027535954088450343942,  0.025621506938037758214,
      0.023648129691287236699,  0.021620361284934062842,
      0.019542865836750062827,  0.017420421997670248495,
      0.015257912146448310349,  0.013060311639994846336,
      0.010832678789597968622,  0.0085801482668814598936,
      0.0063079425789717545502, 0.0040215241720037363471,
      0.0017292582513002508983};
  IntegratorXX::GaussLegendre<double, double> quad(65);
  const auto& pts = quad.points();
  const auto& wgt = quad.weights();
  for(auto i = 0ul; i < 65; i++) {
    REQUIRE_THAT(pts[i], Catch::Matchers::WithinAbs(ref_pts[i], x_tolerance));
    REQUIRE_THAT(wgt[i], Catch::Matchers::WithinAbs(ref_wgt[i], w_tolerance));
  }
}

TEST_CASE("66 point GaussLegendre", "[1d-quad]") {
  std::array<double, 66> ref_pts = {
      -0.99934620987217788207,  -0.99655682108955269112,
      -0.99154503038337574553,  -0.98432090493514013289,
      -0.97490042774628595186,  -0.96330458685925737096,
      -0.94955924620623533909,  -0.93369507254479249437,
      -0.91574746294520701595,  -0.89575646444656393846,
      -0.87376668416694473040,  -0.84982718953601621946,
      -0.82399139869558761135,  -0.79631696124582457053,
      -0.76686562957531962587,  -0.73570312104951279958,
      -0.70289897135887418584,  -0.66852637935096759260,
      -0.63266204369096316940,  -0.59538599171413845833,
      -0.55678140085172306424,  -0.51693441302823151357,
      -0.47593394244423684296,  -0.43387147717337066836,
      -0.39084087501618294976,  -0.34693815406633754890,
      -0.30226127845643610002,  -0.25690993976153022299,
      -0.21098533454807899347,  -0.16458993856471460725,
      -0.11782727807867599711,  -0.070801698868141591289,
      -0.023618133385924570536, 0.023618133385924570536,
      0.070801698868141591289,  0.11782727807867599711,
      0.16458993856471460725,   0.21098533454807899347,
      0.25690993976153022299,   0.30226127845643610002,
      0.34693815406633754890,   0.39084087501618294976,
      0.43387147717337066836,   0.47593394244423684296,
      0.51693441302823151357,   0.55678140085172306424,
      0.59538599171413845833,   0.63266204369096316940,
      0.66852637935096759260,   0.70289897135887418584,
      0.73570312104951279958,   0.76686562957531962587,
      0.79631696124582457053,   0.82399139869558761135,
      0.84982718953601621946,   0.87376668416694473040,
      0.89575646444656393846,   0.91574746294520701595,
      0.93369507254479249437,   0.94955924620623533909,
      0.96330458685925737096,   0.97490042774628595186,
      0.98432090493514013289,   0.99154503038337574553,
      0.99655682108955269112,   0.99934620987217788207};
  std::array<double, 66> ref_wgt = {
      0.0016776537440072385994, 0.0039016256417442482592,
      0.0061201920184479363656, 0.0083253887659909014167,
      0.010512065987705754657,  0.012675303981261681876,
      0.014810265002733960174,  0.016912181472245217180,
      0.018976361722771325935,  0.020998199091864625777,
      0.022973181735326655918,  0.024896902514757372638,
      0.026765068754250001909,  0.028573511782931871183,
      0.030318196218868519194,  0.031995228964046887271,
      0.033600867886112232670,  0.035131530165472555901,
      0.036583800288139094414,  0.037954437665941620949,
      0.039240383866828330188,  0.040438769438954979126,
      0.041546920313241881318,  0.042562363770055716319,
      0.043482833956667478648,  0.044306276943153161905,
      0.045030855305441500215,  0.045654952225273056120,
      0.046177175097915975472,  0.046596358639584103626,
      0.046911567487620827746,  0.047122098287644732185,
      0.047227481262998554846,  0.047227481262998554846,
      0.047122098287644732185,  0.046911567487620827746,
      0.046596358639584103626,  0.046177175097915975472,
      0.045654952225273056120,  0.045030855305441500215,
      0.044306276943153161905,  0.043482833956667478648,
      0.042562363770055716319,  0.041546920313241881318,
      0.040438769438954979126,  0.039240383866828330188,
      0.037954437665941620949,  0.036583800288139094414,
      0.035131530165472555901,  0.033600867886112232670,
      0.031995228964046887271,  0.030318196218868519194,
      0.028573511782931871183,  0.026765068754250001909,
      0.024896902514757372638,  0.022973181735326655918,
      0.020998199091864625777,  0.018976361722771325935,
      0.016912181472245217180,  0.014810265002733960174,
      0.012675303981261681876,  0.010512065987705754657,
      0.0083253887659909014167, 0.0061201920184479363656,
      0.0039016256417442482592, 0.0016776537440072385994};
  IntegratorXX::GaussLegendre<double, double> quad(66);
  const auto& pts = quad.points();
  const auto& wgt = quad.weights();
  for(auto i = 0ul; i < 66; i++) {
    REQUIRE_THAT(pts[i], Catch::Matchers::WithinAbs(ref_pts[i], x_tolerance));
    REQUIRE_THAT(wgt[i], Catch::Matchers::WithinAbs(ref_wgt[i], w_tolerance));
  }
}

TEST_CASE("67 point GaussLegendre", "[1d-quad]") {
  std::array<double, 67> ref_pts = {
      -0.99936543555297679797,  -0.99665802720611373536,
      -0.99179334708230960946,  -0.98478084775595111344,
      -0.97563558392290805239,  -0.96437733042771261170,
      -0.95103045954014537321,  -0.93562387327075087687,
      -0.91819093681273858125,  -0.89876940496132037582,
      -0.87740133983165872040,  -0.85413301953705065079,
      -0.82901483785330119769,  -0.80210119502169443442,
      -0.77345037989998032754,  -0.74312444370436620670,
      -0.71118906561004032786,  -0.67771341049828082878,
      -0.64276997915661535428,  -0.60643445125555738620,
      -0.56878552144147102126,  -0.52990472890023601617,
      -0.48987628076064662610,  -0.44878686971989088400,
      -0.40672548628601391599,  -0.36378322604395417083,
      -0.32005309236253633107,  -0.27562979496968958772,
      -0.23060954483211573793,  -0.18508984578364016882,
      -0.13916928335352371356,  -0.092947311252079876632,
      -0.046524035976017219565, 0,
      0.046524035976017219565,  0.092947311252079876632,
      0.13916928335352371356,   0.18508984578364016882,
      0.23060954483211573793,   0.27562979496968958772,
      0.32005309236253633107,   0.36378322604395417083,
      0.40672548628601391599,   0.44878686971989088400,
      0.48987628076064662610,   0.52990472890023601617,
      0.56878552144147102126,   0.60643445125555738620,
      0.64276997915661535428,   0.67771341049828082878,
      0.71118906561004032786,   0.74312444370436620670,
      0.77345037989998032754,   0.80210119502169443442,
      0.82901483785330119769,   0.85413301953705065079,
      0.87740133983165872040,   0.89876940496132037582,
      0.91819093681273858125,   0.93562387327075087687,
      0.95103045954014537321,   0.96437733042771261170,
      0.97563558392290805239,   0.98478084775595111344,
      0.99179334708230960946,   0.99665802720611373536,
      0.99936543555297679797};
  std::array<double, 67> ref_wgt = {
      0.0016283250352400128664, 0.0037870083018255084460,
      0.0059406931775822352165, 0.0080817902990231362154,
      0.010205440034102440987,  0.012307003849288150522,
      0.014381919827200550931,  0.016425690622530879205,
      0.018433888456804573872,  0.020402163371343540449,
      0.022326252196452076923,  0.024201987609673164721,
      0.026025307086213238804,  0.027792261662436769987,
      0.029499024470945669696,  0.031141899019472823937,
      0.032717327191531205427,  0.034221896949536646740,
      0.035652349722745006661,  0.037005587463492582023,
      0.038278679356179480648,  0.039468868164308882643,
      0.040573576201744525227,  0.041590410915199243099,
      0.042517170065830491472,  0.043351846498699517359,
      0.044092632489751018308,  0.044737923660889825472,
      0.045286322454669531568,  0.045736641161063690937,
      0.046087904489761576197,  0.046339351682415621108,
      0.046490438160264628208,  0.046540836703563508250,
      0.046490438160264628208,  0.046339351682415621108,
      0.046087904489761576197,  0.045736641161063690937,
      0.045286322454669531568,  0.044737923660889825472,
      0.044092632489751018308,  0.043351846498699517359,
      0.042517170065830491472,  0.041590410915199243099,
      0.040573576201744525227,  0.039468868164308882643,
      0.038278679356179480648,  0.037005587463492582023,
      0.035652349722745006661,  0.034221896949536646740,
      0.032717327191531205427,  0.031141899019472823937,
      0.029499024470945669696,  0.027792261662436769987,
      0.026025307086213238804,  0.024201987609673164721,
      0.022326252196452076923,  0.020402163371343540449,
      0.018433888456804573872,  0.016425690622530879205,
      0.014381919827200550931,  0.012307003849288150522,
      0.010205440034102440987,  0.0080817902990231362154,
      0.0059406931775822352165, 0.0037870083018255084460,
      0.0016283250352400128664};
  IntegratorXX::GaussLegendre<double, double> quad(67);
  const auto& pts = quad.points();
  const auto& wgt = quad.weights();
  for(auto i = 0ul; i < 67; i++) {
    REQUIRE_THAT(pts[i], Catch::Matchers::WithinAbs(ref_pts[i], x_tolerance));
    REQUIRE_THAT(wgt[i], Catch::Matchers::WithinAbs(ref_wgt[i], w_tolerance));
  }
}

TEST_CASE("68 point GaussLegendre", "[1d-quad]") {
  std::array<double, 68> ref_pts = {
      -0.99938382552970434716,  -0.99675483667666429254,
      -0.99203088774244857465,  -0.98522086144024463889,
      -0.97633895040035695694,  -0.96540380258219980323,
      -0.95243840447960204932,  -0.93747001831280088649,
      -0.92053012084791816646,  -0.90165433592010783022,
      -0.88088235901745591770,  -0.85825787358265984550,
      -0.83382845904167094582,  -0.80764549068970866523,
      -0.77976403161889765875,  -0.75024271690291651977,
      -0.71914363027647299262,  -0.68653217356601294478,
      -0.65247692914467696420,  -0.61704951569988342272,
      -0.58032443761635074018,  -0.54237892829100338581,
      -0.50329278770908487264,  -0.46314821462293903917,
      -0.42202963368631357915,  -0.38002351790767447750,
      -0.33721820679588076273,  -0.29370372058063873998,
      -0.24957157089841673451,  -0.20491456834193929584,
      -0.15982662727797896100,  -0.11440256834391068443,
      -0.068737919038377152211, -0.022928712825422349714,
      0.022928712825422349714,  0.068737919038377152211,
      0.11440256834391068443,   0.15982662727797896100,
      0.20491456834193929584,   0.24957157089841673451,
      0.29370372058063873998,   0.33721820679588076273,
      0.38002351790767447750,   0.42202963368631357915,
      0.46314821462293903917,   0.50329278770908487264,
      0.54237892829100338581,   0.58032443761635074018,
      0.61704951569988342272,   0.65247692914467696420,
      0.68653217356601294478,   0.71914363027647299262,
      0.75024271690291651977,   0.77976403161889765875,
      0.80764549068970866523,   0.83382845904167094582,
      0.85825787358265984550,   0.88088235901745591770,
      0.90165433592010783022,   0.92053012084791816646,
      0.93747001831280088649,   0.95243840447960204932,
      0.96540380258219980323,   0.97633895040035695694,
      0.98522086144024463889,   0.99203088774244857465,
      0.99675483667666429254,   0.99938382552970434716};
  std::array<double, 68> ref_wgt = {
      0.0015811402563729129392, 0.0036773665950117306336,
      0.0057689699187299520215, 0.0078487113931771674150,
      0.0099120012515859372091, 0.011954462319769442103,
      0.013971789174457655816,  0.015959735909613800072,
      0.017914120457923152489,  0.019830832087955498291,
      0.021705839610378079801,  0.023535199685876333361,
      0.025315065045176398324,  0.027041692545903961558,
      0.028711451027484990711,  0.030320828938553980342,
      0.031866441716821064939,  0.033345038903980687903,
      0.034753510979751513167,  0.036088895900179870715,
      0.037348385326186667716,  0.038529330529106714493,
      0.039629247960712308025,  0.040645824475954076141,
      0.041576922197402916485,  0.042420583011142499301,
      0.043175032684644223226,  0.043838684597956052011,
      0.044410143080352755909,  0.044888206345426667826,
      0.045271869018443777869,  0.045560324250648285981,
      0.045752965416067950519,  0.045849387387250974687,
      0.045849387387250974687,  0.045752965416067950519,
      0.045560324250648285981,  0.045271869018443777869,
      0.044888206345426667826,  0.044410143080352755909,
      0.043838684597956052011,  0.043175032684644223226,
      0.042420583011142499301,  0.041576922197402916485,
      0.040645824475954076141,  0.039629247960712308025,
      0.038529330529106714493,  0.037348385326186667716,
      0.036088895900179870715,  0.034753510979751513167,
      0.033345038903980687903,  0.031866441716821064939,
      0.030320828938553980342,  0.028711451027484990711,
      0.027041692545903961558,  0.025315065045176398324,
      0.023535199685876333361,  0.021705839610378079801,
      0.019830832087955498291,  0.017914120457923152489,
      0.015959735909613800072,  0.013971789174457655816,
      0.011954462319769442103,  0.0099120012515859372091,
      0.0078487113931771674150, 0.0057689699187299520215,
      0.0036773665950117306336, 0.0015811402563729129392};
  IntegratorXX::GaussLegendre<double, double> quad(68);
  const auto& pts = quad.points();
  const auto& wgt = quad.weights();
  for(auto i = 0ul; i < 68; i++) {
    REQUIRE_THAT(pts[i], Catch::Matchers::WithinAbs(ref_pts[i], x_tolerance));
    REQUIRE_THAT(wgt[i], Catch::Matchers::WithinAbs(ref_wgt[i], w_tolerance));
  }
}

TEST_CASE("69 point GaussLegendre", "[1d-quad]") {
  std::array<double, 69> ref_pts = {-0.99940142754324478821,
                                    -0.99684750048519510046,
                                    -0.99225826671685311870,
                                    -0.98564208002263759324,
                                    -0.97701233162209426339,
                                    -0.96638662164286056686,
                                    -0.95378664780518189753,
                                    -0.93923814704160847297,
                                    -0.92277083918044499719,
                                    -0.90441836498582714007,
                                    -0.88421821694725243666,
                                    -0.86221166247274408386,
                                    -0.83844365948050421326,
                                    -0.81296276450029561386,
                                    -0.78582103344675976034,
                                    -0.75707391525583785160,
                                    -0.72678013859600808866,
                                    -0.69500159188292846093,
                                    -0.66180319684107824402,
                                    -0.62725277586984940177,
                                    -0.59142091348455582557,
                                    -0.55438081211513201454,
                                    -0.51620814255693370917,
                                    -0.47698088937904571034,
                                    -0.43677919160584442087,
                                    -0.39568517899724444735,
                                    -0.35378280426206631796,
                                    -0.31115767154728118659,
                                    -0.26789686155350342858,
                                    -0.22408875363399901328,
                                    -0.17982284524064316436,
                                    -0.13518956908568299216,
                                    -0.090280108392828742562,
                                    -0.045186210615101723532,
                                    0,
                                    0.045186210615101723532,
                                    0.090280108392828742562,
                                    0.13518956908568299216,
                                    0.17982284524064316436,
                                    0.22408875363399901328,
                                    0.26789686155350342858,
                                    0.31115767154728118659,
                                    0.35378280426206631796,
                                    0.39568517899724444735,
                                    0.43677919160584442087,
                                    0.47698088937904571034,
                                    0.51620814255693370917,
                                    0.55438081211513201454,
                                    0.59142091348455582557,
                                    0.62725277586984940177,
                                    0.66180319684107824402,
                                    0.69500159188292846093,
                                    0.72678013859600808866,
                                    0.75707391525583785160,
                                    0.78582103344675976034,
                                    0.81296276450029561386,
                                    0.83844365948050421326,
                                    0.86221166247274408386,
                                    0.88421821694725243666,
                                    0.90441836498582714007,
                                    0.92277083918044499719,
                                    0.93923814704160847297,
                                    0.95378664780518189753,
                                    0.96638662164286056686,
                                    0.97701233162209426339,
                                    0.98564208002263759324,
                                    0.99225826671685311870,
                                    0.99684750048519510046,
                                    0.99940142754324478821};
  std::array<double, 69> ref_wgt = {
      0.0015359769527920840751, 0.0035724167393973726097,
      0.0056045799278705948285, 0.0076255559312015106114,
      0.0096310061504155755887, 0.011616796610671965549,
      0.013578860649075671000,  0.015513186543406164740,
      0.017415821231969829132,  0.019282877128849402789,
      0.021110539639871894628,  0.022895074790740785656,
      0.024632836784542455364,  0.026320275416869483792,
      0.027953943312187705991,  0.029530502957906711780,
      0.031046733517890539033,  0.032499537409646111245,
      0.033885946630832289498,  0.035203128821683486148,
      0.036448393050700514057,  0.037619195311640906508,
      0.038713143720492513933,  0.039728003401761641206,
      0.040661701054061600538,  0.041512329185654502083,
      0.042278150011280512852,  0.042957599002305213878,
      0.043549288082926741034,  0.044052008465909284381,
      0.044464733122047138096,  0.044786618878312557542,
      0.045017008140399802199,  0.045155430236145460517,
      0.045201602377079954242,  0.045155430236145460517,
      0.045017008140399802199,  0.044786618878312557542,
      0.044464733122047138096,  0.044052008465909284381,
      0.043549288082926741034,  0.042957599002305213878,
      0.042278150011280512852,  0.041512329185654502083,
      0.040661701054061600538,  0.039728003401761641206,
      0.038713143720492513933,  0.037619195311640906508,
      0.036448393050700514057,  0.035203128821683486148,
      0.033885946630832289498,  0.032499537409646111245,
      0.031046733517890539033,  0.029530502957906711780,
      0.027953943312187705991,  0.026320275416869483792,
      0.024632836784542455364,  0.022895074790740785656,
      0.021110539639871894628,  0.019282877128849402789,
      0.017415821231969829132,  0.015513186543406164740,
      0.013578860649075671000,  0.011616796610671965549,
      0.0096310061504155755887, 0.0076255559312015106114,
      0.0056045799278705948285, 0.0035724167393973726097,
      0.0015359769527920840751};
  IntegratorXX::GaussLegendre<double, double> quad(69);
  const auto& pts = quad.points();
  const auto& wgt = quad.weights();
  for(auto i = 0ul; i < 69; i++) {
    REQUIRE_THAT(pts[i], Catch::Matchers::WithinAbs(ref_pts[i], x_tolerance));
    REQUIRE_THAT(wgt[i], Catch::Matchers::WithinAbs(ref_wgt[i], w_tolerance));
  }
}

TEST_CASE("70 point GaussLegendre", "[1d-quad]") {
  std::array<double, 70> ref_pts = {
      -0.99941828597357584206,  -0.99693625196168015661,
      -0.99247605521168998110,  -0.98604555807039865993,
      -0.97765740595759240039,  -0.96732822366498643839,
      -0.95507850911429284264,  -0.94093257900381535552,
      -0.92491851689793444027,  -0.90706811626092284944,
      -0.88741681686334817112,  -0.86600363421385862938,
      -0.84287108199898024232,  -0.81806508762544118903,
      -0.79163490100789275811,  -0.76363299677189956892,
      -0.73411497006094264131,  -0.70313942615152859706,
      -0.67076786409407740565,  -0.63706455460977809628,
      -0.60209641248535548734,  -0.56593286371880828637,
      -0.52864570767971112727,  -0.49030897455763658927,
      -0.45099877838164786573,  -0.41079316590263058937,
      -0.36977196163846189584,  -0.32801660938964325785,
      -0.28561001054003786169,  -0.24263635946374064578,
      -0.19918097636485766415,  -0.15533013788207024731,
      -0.11117090579429869374,  -0.066790954167551324004,
      -0.022278395286140309694, 0.022278395286140309694,
      0.066790954167551324004,  0.11117090579429869374,
      0.15533013788207024731,   0.19918097636485766415,
      0.24263635946374064578,   0.28561001054003786169,
      0.32801660938964325785,   0.36977196163846189584,
      0.41079316590263058937,   0.45099877838164786573,
      0.49030897455763658927,   0.52864570767971112727,
      0.56593286371880828637,   0.60209641248535548734,
      0.63706455460977809628,   0.67076786409407740565,
      0.70313942615152859706,   0.73411497006094264131,
      0.76363299677189956892,   0.79163490100789275811,
      0.81806508762544118903,   0.84287108199898024232,
      0.86600363421385862938,   0.88741681686334817112,
      0.90706811626092284944,   0.92491851689793444027,
      0.94093257900381535552,   0.95507850911429284264,
      0.96732822366498643839,   0.97765740595759240039,
      0.98604555807039865993,   0.99247605521168998110,
      0.99693625196168015661,   0.99941828597357584206};
  std::array<double, 70> ref_wgt = {
      0.0014927212888445157310, 0.0034718948930781432550,
      0.0054471118742172183128, 0.0074117693631902103621,
      0.0093617627696990268115, 0.011293184649931537650,
      0.013202190814676747625,  0.015084987865443127682,
      0.016937836376302932532,  0.018757057093133423415,
      0.020539037824326453385,  0.022280240452256595834,
      0.023977207889100292279,  0.025626570908468482799,
      0.027225054818664417159,  0.028769485955808280661,
      0.030256797980154237817,  0.031684037961308481735,
      0.033048372239372420471,  0.034347092049906537569,
      0.035577618901292380533,  0.036737509693672695348,
      0.037824461569222817197,  0.038836316484073403979,
      0.039771065492776567478,  0.040626852736789616351,
      0.041401979129045208638,  0.042094905727284406021,
      0.042704256789449777770,  0.043228822505068699789,
      0.043667561397201440253,  0.044019602390183458757,
      0.044284246539055406776,  0.044460968417246370824,
      0.044549417159754667202,  0.044549417159754667202,
      0.044460968417246370824,  0.044284246539055406776,
      0.044019602390183458757,  0.043667561397201440253,
      0.043228822505068699789,  0.042704256789449777770,
      0.042094905727284406021,  0.041401979129045208638,
      0.040626852736789616351,  0.039771065492776567478,
      0.038836316484073403979,  0.037824461569222817197,
      0.036737509693672695348,  0.035577618901292380533,
      0.034347092049906537569,  0.033048372239372420471,
      0.031684037961308481735,  0.030256797980154237817,
      0.028769485955808280661,  0.027225054818664417159,
      0.025626570908468482799,  0.023977207889100292279,
      0.022280240452256595834,  0.020539037824326453385,
      0.018757057093133423415,  0.016937836376302932532,
      0.015084987865443127682,  0.013202190814676747625,
      0.011293184649931537650,  0.0093617627696990268115,
      0.0074117693631902103621, 0.0054471118742172183128,
      0.0034718948930781432550, 0.0014927212888445157310};
  IntegratorXX::GaussLegendre<double, double> quad(70);
  const auto& pts = quad.points();
  const auto& wgt = quad.weights();
  for(auto i = 0ul; i < 70; i++) {
    REQUIRE_THAT(pts[i], Catch::Matchers::WithinAbs(ref_pts[i], x_tolerance));
    REQUIRE_THAT(wgt[i], Catch::Matchers::WithinAbs(ref_wgt[i], w_tolerance));
  }
}

TEST_CASE("71 point GaussLegendre", "[1d-quad]") {
  std::array<double, 71> ref_pts = {
      -0.99943444211973692756,  -0.99702130825125513007,
      -0.99268478487064156994,  -0.98643227726826136809,
      -0.97827573611360179287,  -0.96823087742632534568,
      -0.95631708104105287488,  -0.94255733992227115912,
      -0.92697821225087141077,  -0.90960976898453435944,
      -0.89048553535520651167,  -0.86964242595630741115,
      -0.84712067339187396894,  -0.82296375056755275239,
      -0.79721828674931796064,  -0.76993397754103664741,
      -0.74116348894937684801,  -0.71096235571854437097,
      -0.67938887412964457628,  -0.64650398947078764280,
      -0.61237117839468233631,  -0.57705632639051981049,
      -0.54062760060648735600,  -0.50315531826829007083,
      -0.46471181094759782295,  -0.42537128494236955586,
      -0.38520967803852729599,  -0.34430451292944702471,
      -0.30273474757619137643,  -0.26058062279731866202,
      -0.21792350738245333553,  -0.17484574102858486317,
      -0.13143047540226608701,  -0.087761513634500682362,
      -0.043923148558135329332, 0,
      0.043923148558135329332,  0.087761513634500682362,
      0.13143047540226608701,   0.17484574102858486317,
      0.21792350738245333553,   0.26058062279731866202,
      0.30273474757619137643,   0.34430451292944702471,
      0.38520967803852729599,   0.42537128494236955586,
      0.46471181094759782295,   0.50315531826829007083,
      0.54062760060648735600,   0.57705632639051981049,
      0.61237117839468233631,   0.64650398947078764280,
      0.67938887412964457628,   0.71096235571854437097,
      0.74116348894937684801,   0.76993397754103664741,
      0.79721828674931796064,   0.82296375056755275239,
      0.84712067339187396894,   0.86964242595630741115,
      0.89048553535520651167,   0.90960976898453435944,
      0.92697821225087141077,   0.94255733992227115912,
      0.95631708104105287488,   0.96823087742632534568,
      0.97827573611360179287,   0.98643227726826136809,
      0.99268478487064156994,   0.99702130825125513007,
      0.99943444211973692756};
  std::array<double, 71> ref_wgt = {
      0.0014512673300293972685, 0.0033755554967306758651,
      0.0052961828440258926327, 0.0072068352818314933873,
      0.0091036264619920058513, 0.010982860154298551706,
      0.012840899668087806070,  0.014674155334611529200,
      0.016479087207462396551,  0.018252210704678670502,
      0.019990102932350111287,  0.021689409135985367962,
      0.023346849109223252632,  0.024959223494313873055,
      0.026523419942157908008,  0.028036419111741490618,
      0.029495300493708812465,  0.030897248045090721699,
      0.032239555623443526942,  0.033519632209454030834,
      0.034735006907682188375,  0.035883333715648910778,
      0.036962396051982031856,  0.037970111034831156214,
      0.038904533502262947492,  0.039763859766857581674,
      0.040546431097246896435,  0.041250736919866024249,
      0.041875417734733006190,  0.042419267739624593035,
      0.042881237157580435021,  0.043260434263241266599,
      0.043556127104108533371,  0.043767744913402144972,
      0.043894879211788586321,  0.043937284595852365758,
      0.043894879211788586321,  0.043767744913402144972,
      0.043556127104108533371,  0.043260434263241266599,
      0.042881237157580435021,  0.042419267739624593035,
      0.041875417734733006190,  0.041250736919866024249,
      0.040546431097246896435,  0.039763859766857581674,
      0.038904533502262947492,  0.037970111034831156214,
      0.036962396051982031856,  0.035883333715648910778,
      0.034735006907682188375,  0.033519632209454030834,
      0.032239555623443526942,  0.030897248045090721699,
      0.029495300493708812465,  0.028036419111741490618,
      0.026523419942157908008,  0.024959223494313873055,
      0.023346849109223252632,  0.021689409135985367962,
      0.019990102932350111287,  0.018252210704678670502,
      0.016479087207462396551,  0.014674155334611529200,
      0.012840899668087806070,  0.010982860154298551706,
      0.0091036264619920058513, 0.0072068352818314933873,
      0.0052961828440258926327, 0.0033755554967306758651,
      0.0014512673300293972685};
  IntegratorXX::GaussLegendre<double, double> quad(71);
  const auto& pts = quad.points();
  const auto& wgt = quad.weights();
  for(auto i = 0ul; i < 71; i++) {
    REQUIRE_THAT(pts[i], Catch::Matchers::WithinAbs(ref_pts[i], x_tolerance));
    REQUIRE_THAT(wgt[i], Catch::Matchers::WithinAbs(ref_wgt[i], w_tolerance));
  }
}

TEST_CASE("72 point GaussLegendre", "[1d-quad]") {
  std::array<double, 72> ref_pts = {
      -0.99944993445296264218,  -0.99710287164272907847,
      -0.99288495101680190823,  -0.98680315237583046581,
      -0.97886877855723377180,  -0.96909669799878042592,
      -0.95750524757769822566,  -0.94411618527253796501,
      -0.92895464588091801057,  -0.91204909268867146992,
      -0.89343126358809125620,  -0.87313611129877890528,
      -0.85120173765443785111,  -0.82766932202275431462,
      -0.80258304396929185203,  -0.77599000029998256214,
      -0.74794011663283239067,  -0.71848605366223496136,
      -0.68768310829046780749,  -0.65558910981120105615,
      -0.62226431133946819101,  -0.58777127669165559920,
      -0.55217476292771439740,  -0.51554159877600352386,
      -0.47794055916894045718,  -0.43944223612496073208,
      -0.40011890621916161270,  -0.36004439489141923754,
      -0.31929393784671217133,  -0.27794403980784760698,
      -0.23607233088575992506,  -0.19375742083702605980,
      -0.15107875148221003033,  -0.10811644756210281481,
      -0.064951166311857114075, -0.021663946035424044670,
      0.021663946035424044670,  0.064951166311857114075,
      0.10811644756210281481,   0.15107875148221003033,
      0.19375742083702605980,   0.23607233088575992506,
      0.27794403980784760698,   0.31929393784671217133,
      0.36004439489141923754,   0.40011890621916161270,
      0.43944223612496073208,   0.47794055916894045718,
      0.51554159877600352386,   0.55217476292771439740,
      0.58777127669165559920,   0.62226431133946819101,
      0.65558910981120105615,   0.68768310829046780749,
      0.71848605366223496136,   0.74794011663283239067,
      0.77599000029998256214,   0.80258304396929185203,
      0.82766932202275431462,   0.85120173765443785111,
      0.87313611129877890528,   0.89343126358809125620,
      0.91204909268867146992,   0.92895464588091801057,
      0.94411618527253796501,   0.95750524757769822566,
      0.96909669799878042592,   0.97886877855723377180,
      0.98680315237583046581,   0.99288495101680190823,
      0.99710287164272907847,   0.99944993445296264218};
  std::array<double, 72> ref_wgt = {
      0.0014115163939734341358, 0.0032831697746674958019,
      0.0051514360187908869082, 0.0070102723218618632961,
      0.0088559960737061533840, 0.010685108165351897159,
      0.012494165619873757768,  0.014279769054554193267,
      0.016038564950285155218,  0.017767250789200653594,
      0.019462580863294278043,  0.021121372216440553510,
      0.022740510555035754456,  0.024316956064419164326,
      0.025847749100655890284,  0.027330015738950934434,
      0.028760973164701761095,  0.030137934895375479293,
      0.031458315822561813978,  0.032719637064293846704,
      0.033919530618286059497,  0.035055743807217870434,
      0.036126143507637992986,  0.037128720154502899461,
      0.038061591513802163834,  0.038923006216169663800,
      0.039711347044834901782,  0.040425133971733970043,
      0.041063026936075061102,  0.041623828360138598208,
      0.042106485397586464147,  0.042510091910057720078,
      0.042833890168338813667,  0.043077272274913699745,
      0.043239781305222617485,  0.043321112165486537076,
      0.043321112165486537076,  0.043239781305222617485,
      0.043077272274913699745,  0.042833890168338813667,
      0.042510091910057720078,  0.042106485397586464147,
      0.041623828360138598208,  0.041063026936075061102,
      0.040425133971733970043,  0.039711347044834901782,
      0.038923006216169663800,  0.038061591513802163834,
      0.037128720154502899461,  0.036126143507637992986,
      0.035055743807217870434,  0.033919530618286059497,
      0.032719637064293846704,  0.031458315822561813978,
      0.030137934895375479293,  0.028760973164701761095,
      0.027330015738950934434,  0.025847749100655890284,
      0.024316956064419164326,  0.022740510555035754456,
      0.021121372216440553510,  0.019462580863294278043,
      0.017767250789200653594,  0.016038564950285155218,
      0.014279769054554193267,  0.012494165619873757768,
      0.010685108165351897159,  0.0088559960737061533840,
      0.0070102723218618632961, 0.0051514360187908869082,
      0.0032831697746674958019, 0.0014115163939734341358};
  IntegratorXX::GaussLegendre<double, double> quad(72);
  const auto& pts = quad.points();
  const auto& wgt = quad.weights();
  for(auto i = 0ul; i < 72; i++) {
    REQUIRE_THAT(pts[i], Catch::Matchers::WithinAbs(ref_pts[i], x_tolerance));
    REQUIRE_THAT(wgt[i], Catch::Matchers::WithinAbs(ref_wgt[i], w_tolerance));
  }
}

TEST_CASE("73 point GaussLegendre", "[1d-quad]") {
  std::array<double, 73> ref_pts = {-0.99946479884588117100,
                                    -0.99718113077161126725,
                                    -0.99307701558894515156,
                                    -0.98715903662493211478,
                                    -0.97943789205648362456,
                                    -0.96992765905498591275,
                                    -0.95864570069797422041,
                                    -0.94561262168948357193,
                                    -0.93085222738122455990,
                                    -0.91439147917625641474,
                                    -0.89626044484669122105,
                                    -0.87649224342065149983,
                                    -0.85512298459429948451,
                                    -0.83219170272490974376,
                                    -0.80774028550273592481,
                                    -0.78181339742164475133,
                                    -0.75445839818332348024,
                                    -0.72572525618155981850,
                                    -0.69566645722326271722,
                                    -0.66433690865219633888,
                                    -0.63179383905011845651,
                                    -0.59809669369827097600,
                                    -0.56330702599001651274,
                                    -0.52748838499287093680,
                                    -0.49070619936525198770,
                                    -0.45302765783994539519,
                                    -0.41452158649257576389,
                                    -0.37525832301925150291,
                                    -0.33530958825302245612,
                                    -0.29474835515383676826,
                                    -0.25364871551130139356,
                                    -0.21208574460373052653,
                                    -0.17013536406070075851,
                                    -0.12787420317961430175,
                                    -0.085379458949596300996,
                                    -0.042728755038413991186,
                                    0,
                                    0.042728755038413991186,
                                    0.085379458949596300996,
                                    0.12787420317961430175,
                                    0.17013536406070075851,
                                    0.21208574460373052653,
                                    0.25364871551130139356,
                                    0.29474835515383676826,
                                    0.33530958825302245612,
                                    0.37525832301925150291,
                                    0.41452158649257576389,
                                    0.45302765783994539519,
                                    0.49070619936525198770,
                                    0.52748838499287093680,
                                    0.56330702599001651274,
                                    0.59809669369827097600,
                                    0.63179383905011845651,
                                    0.66433690865219633888,
                                    0.69566645722326271722,
                                    0.72572525618155981850,
                                    0.75445839818332348024,
                                    0.78181339742164475133,
                                    0.80774028550273592481,
                                    0.83219170272490974376,
                                    0.85512298459429948451,
                                    0.87649224342065149983,
                                    0.89626044484669122105,
                                    0.91439147917625641474,
                                    0.93085222738122455990,
                                    0.94561262168948357193,
                                    0.95864570069797422041,
                                    0.96992765905498591275,
                                    0.97943789205648362456,
                                    0.98715903662493211478,
                                    0.99307701558894515156,
                                    0.99718113077161126725,
                                    0.99946479884588117100};
  std::array<double, 73> ref_wgt = {
      0.0013733764627596192240, 0.0031945243772890345221,
      0.0050125385716061902638, 0.0068216313491747923622,
      0.0086183104795322476139, 0.010399260995000532201,
      0.012161220929281112728,  0.013900968788314650868,
      0.015615325433591422996,  0.017301158762489083006,
      0.018955389048670021690,  0.020574994420361169166,
      0.022157016317040072057,  0.023698564864218974627,
      0.025196824137538312813,  0.026649057298727482952,
      0.028052611590572060324,  0.029404923180116560105,
      0.030703521840433504938,  0.031946035461976706487,
      0.033130194385043840677,  0.034253835545302215414,
      0.035314906424728287509,  0.036311468800697784690,
      0.037241702286349773157,  0.038103907655739800596,
      0.038896509947696739520,  0.039618061342706143317,
      0.040267243807560033365,  0.040842871502938861549,
      0.041343892949525494527,  0.041769392948692853754,
      0.042118594254255636269,  0.042390858992231594405,
      0.042585689826018387026,  0.042702730864857222077,
      0.042741768313923562411,  0.042702730864857222077,
      0.042585689826018387026,  0.042390858992231594405,
      0.042118594254255636269,  0.041769392948692853754,
      0.041343892949525494527,  0.040842871502938861549,
      0.040267243807560033365,  0.039618061342706143317,
      0.038896509947696739520,  0.038103907655739800596,
      0.037241702286349773157,  0.036311468800697784690,
      0.035314906424728287509,  0.034253835545302215414,
      0.033130194385043840677,  0.031946035461976706487,
      0.030703521840433504938,  0.029404923180116560105,
      0.028052611590572060324,  0.026649057298727482952,
      0.025196824137538312813,  0.023698564864218974627,
      0.022157016317040072057,  0.020574994420361169166,
      0.018955389048670021690,  0.017301158762489083006,
      0.015615325433591422996,  0.013900968788314650868,
      0.012161220929281112728,  0.010399260995000532201,
      0.0086183104795322476139, 0.0068216313491747923622,
      0.0050125385716061902638, 0.0031945243772890345221,
      0.0013733764627596192240};
  IntegratorXX::GaussLegendre<double, double> quad(73);
  const auto& pts = quad.points();
  const auto& wgt = quad.weights();
  for(auto i = 0ul; i < 73; i++) {
    REQUIRE_THAT(pts[i], Catch::Matchers::WithinAbs(ref_pts[i], x_tolerance));
    REQUIRE_THAT(wgt[i], Catch::Matchers::WithinAbs(ref_wgt[i], w_tolerance));
  }
}

TEST_CASE("74 point GaussLegendre", "[1d-quad]") {
  std::array<double, 74> ref_pts = {
      -0.99947906878032952427,  -0.99725626171101639084,
      -0.99326140980464497271,  -0.98750072661623855961,
      -0.97998434543130033610,  -0.97072560404251872682,
      -0.95974095545952891270,  -0.94704992642838500827,
      -0.93267507946205456609,  -0.91664197164290646068,
      -0.89897910876189579558,  -0.87971789445208880923,
      -0.85889257426598357680,  -0.83654017474281573917,
      -0.81270043755197437388,  -0.78741574881957551782,
      -0.76073106375899447597,  -0.73269382673688027776,
      -0.70335388691544185906,  -0.67276340962024760272,
      -0.64097678359069238860,  -0.60805052427777982553,
      -0.57404317336099415250,  -0.53901519466281708324,
      -0.50302886664588516591,  -0.46614817168388118342,
      -0.42843868230300327938,  -0.38996744459625075057,
      -0.35080285901779804749,  -0.31101455876939063705,
      -0.27067328599498040554,  -0.22985076600371703102,
      -0.18861957974491857831,  -0.14705303476175341173,
      -0.10522503485307097186,  -0.063209948675116291896,
      -0.021082477516748304448, 0.021082477516748304448,
      0.063209948675116291896,  0.10522503485307097186,
      0.14705303476175341173,   0.18861957974491857831,
      0.22985076600371703102,   0.27067328599498040554,
      0.31101455876939063705,   0.35080285901779804749,
      0.38996744459625075057,   0.42843868230300327938,
      0.46614817168388118342,   0.50302886664588516591,
      0.53901519466281708324,   0.57404317336099415250,
      0.60805052427777982553,   0.64097678359069238860,
      0.67276340962024760272,   0.70335388691544185906,
      0.73269382673688027776,   0.76073106375899447597,
      0.78741574881957551782,   0.81270043755197437388,
      0.83654017474281573917,   0.85889257426598357680,
      0.87971789445208880923,   0.89897910876189579558,
      0.91664197164290646068,   0.93267507946205456609,
      0.94704992642838500827,   0.95974095545952891270,
      0.97072560404251872682,   0.97998434543130033610,
      0.98750072661623855961,   0.99326140980464497271,
      0.99725626171101639084,   0.99947906878032952427};
  std::array<double, 74> ref_wgt = {
      0.0013367616500698835503, 0.0031094201498967546787,
      0.0048791797585941445843, 0.0066404929091143576348,
      0.0083900454339713970641, 0.010124694538287305421,
      0.011841347547499667323,  0.013536949411787494341,
      0.015208484243401234809,  0.016852979582024853585,
      0.018467511308979879783,  0.020049208702794944253,
      0.021595259481675888970,  0.023102914774915823031,
      0.024569493995942767246,  0.025992389600723787867,
      0.027369071719679352302,  0.028697092653269875342,
      0.029974091222461187340,  0.031197796965915426033,
      0.032366034176216999525,  0.033476725767828766264,
      0.034527896969826461003,  0.035517678836800959926,
      0.036444311571658564482,  0.037306147654394155734,
      0.038101654771263248896,  0.038829418539137707758,
      0.039488145020196468324,  0.040076663022476966759,
      0.040593926182194728058,  0.041039014824127266847,
      0.041411137596753510820,  0.041709632879240754379,
      0.041933969957777021470,  0.042083749969156972475,
      0.042158706609943422122,  0.042158706609943422122,
      0.042083749969156972475,  0.041933969957777021470,
      0.041709632879240754379,  0.041411137596753510820,
      0.041039014824127266847,  0.040593926182194728058,
      0.040076663022476966759,  0.039488145020196468324,
      0.038829418539137707758,  0.038101654771263248896,
      0.037306147654394155734,  0.036444311571658564482,
      0.035517678836800959926,  0.034527896969826461003,
      0.033476725767828766264,  0.032366034176216999525,
      0.031197796965915426033,  0.029974091222461187340,
      0.028697092653269875342,  0.027369071719679352302,
      0.025992389600723787867,  0.024569493995942767246,
      0.023102914774915823031,  0.021595259481675888970,
      0.020049208702794944253,  0.018467511308979879783,
      0.016852979582024853585,  0.015208484243401234809,
      0.013536949411787494341,  0.011841347547499667323,
      0.010124694538287305421,  0.0083900454339713970641,
      0.0066404929091143576348, 0.0048791797585941445843,
      0.0031094201498967546787, 0.0013367616500698835503};
  IntegratorXX::GaussLegendre<double, double> quad(74);
  const auto& pts = quad.points();
  const auto& wgt = quad.weights();
  for(auto i = 0ul; i < 74; i++) {
    REQUIRE_THAT(pts[i], Catch::Matchers::WithinAbs(ref_pts[i], x_tolerance));
    REQUIRE_THAT(wgt[i], Catch::Matchers::WithinAbs(ref_wgt[i], w_tolerance));
  }
}

TEST_CASE("75 point GaussLegendre", "[1d-quad]") {
  std::array<double, 75> ref_pts = {
      -0.99949277553603545648,  -0.99732842896223180331,
      -0.99343853657889270438,  -0.98782896676752452014,
      -0.98050932459741660577,  -0.97149225634306382336,
      -0.96079336374189231416,  -0.94843116507928737792,
      -0.93442705996410715684,  -0.91880529122839399127,
      -0.90159290254844633409,  -0.88281969144789554216,
      -0.86251815762688342546,  -0.84072344665495805010,
      -0.81747328910354131484,  -0.79280793521356351036,
      -0.76677008520664192552,  -0.73940481535803252650,
      -0.71075949995804112677,  -0.68088372929626959804,
      -0.64982922381026223259,  -0.61764974454692596445,
      -0.58440100009157788032,  -0.55014055012564555150,
      -0.51492770577991664053,  -0.47882342695580315702,
      -0.44189021679234826654,  -0.40419201346165361319,
      -0.36579407948003592533,  -0.32676288872652630236,
      -0.28716601136429724694,  -0.24707199686423475690,
      -0.20655025533315960711,  -0.16567093735213781839,
      -0.12450481253290026163,  -0.083123147002610991697,
      -0.041597580029079455975, 0,
      0.041597580029079455975,  0.083123147002610991697,
      0.12450481253290026163,   0.16567093735213781839,
      0.20655025533315960711,   0.24707199686423475690,
      0.28716601136429724694,   0.32676288872652630236,
      0.36579407948003592533,   0.40419201346165361319,
      0.44189021679234826654,   0.47882342695580315702,
      0.51492770577991664053,   0.55014055012564555150,
      0.58440100009157788032,   0.61764974454692596445,
      0.64982922381026223259,   0.68088372929626959804,
      0.71075949995804112677,   0.73940481535803252650,
      0.76677008520664192552,   0.79280793521356351036,
      0.81747328910354131484,   0.84072344665495805010,
      0.86251815762688342546,   0.88281969144789554216,
      0.90159290254844633409,   0.91880529122839399127,
      0.93442705996410715684,   0.94843116507928737792,
      0.96079336374189231416,   0.97149225634306382336,
      0.98050932459741660577,   0.98782896676752452014,
      0.99343853657889270438,   0.99732842896223180331,
      0.99949277553603545648};
  std::array<double, 75> ref_wgt = {
      0.0013015917173758559938, 0.0030276710146060412912,
      0.0047510691850152739659, 0.0064664649070375384020,
      0.0081707107073278264037, 0.0098608249161140183921,
      0.011533873328304495967,  0.013186956762824802120,
      0.014817212289814468520,  0.016421817119024640044,
      0.017997993125645050638,  0.019543011520127889380,
      0.021054197512282842236,  0.022528934913865776451,
      0.023964670653716959175,  0.025358919190216379094,
      0.026709266810120851772,  0.028013375804780540825,
      0.029268988515725986805,  0.030473931242214539203,
      0.031626118003749648056,  0.032723554150934220521,
      0.033764339818334092647,  0.034746673213330406535,
      0.035668853735240453089,  0.036529284919290339007,
      0.037326477200332090167,  0.038059050491513603136,
      0.038725736573432575841,  0.039325381289635162521,
      0.039856946544656352576,  0.040319512101141577558,
      0.040712277172937330299,  0.041034561811392106676,
      0.041285808082467189083,  0.041465581032619092135,
      0.041573569441781278783,  0.041609586362141409380,
      0.041573569441781278783,  0.041465581032619092135,
      0.041285808082467189083,  0.041034561811392106676,
      0.040712277172937330299,  0.040319512101141577558,
      0.039856946544656352576,  0.039325381289635162521,
      0.038725736573432575841,  0.038059050491513603136,
      0.037326477200332090167,  0.036529284919290339007,
      0.035668853735240453089,  0.034746673213330406535,
      0.033764339818334092647,  0.032723554150934220521,
      0.031626118003749648056,  0.030473931242214539203,
      0.029268988515725986805,  0.028013375804780540825,
      0.026709266810120851772,  0.025358919190216379094,
      0.023964670653716959175,  0.022528934913865776451,
      0.021054197512282842236,  0.019543011520127889380,
      0.017997993125645050638,  0.016421817119024640044,
      0.014817212289814468520,  0.013186956762824802120,
      0.011533873328304495967,  0.0098608249161140183921,
      0.0081707107073278264037, 0.0064664649070375384020,
      0.0047510691850152739659, 0.0030276710146060412912,
      0.0013015917173758559938};
  IntegratorXX::GaussLegendre<double, double> quad(75);
  const auto& pts = quad.points();
  const auto& wgt = quad.weights();
  for(auto i = 0ul; i < 75; i++) {
    REQUIRE_THAT(pts[i], Catch::Matchers::WithinAbs(ref_pts[i], x_tolerance));
    REQUIRE_THAT(wgt[i], Catch::Matchers::WithinAbs(ref_wgt[i], w_tolerance));
  }
}

TEST_CASE("76 point GaussLegendre", "[1d-quad]") {
  std::array<double, 76> ref_pts = {
      -0.99950594836215307811,  -0.99739778635535543669,
      -0.99360877272352698462,  -0.98814445335983743850,
      -0.98101393897565589525,  -0.97222922852037690448,
      -0.96180512675876782717,  -0.94975920771089638508,
      -0.93611178193481079626,  -0.92088586125215011849,
      -0.90410711954556682854,  -0.88580384929208278722,
      -0.86600691377198195523,  -0.84474969498334239401,
      -0.82206803732897461348,  -0.79800018716120016975,
      -0.77258672828180976130,  -0.74587051350361044315,
      -0.71789659238770363937,  -0.68871213527764059700,
      -0.65836635375814263028,  -0.62691041767226655915,
      -0.59439736883679291815,  -0.56088203160123747900,
      -0.52642092040124259096,  -0.49107214446219386486,
      -0.45489530981372633943,  -0.41795141878032729880,
      -0.38030276711750444347,  -0.34201283896696202393,
      -0.30314619980790777810,  -0.26376838758499427648,
      -0.22394580219647413376,  -0.18374559352891447742,
      -0.14323554822726752145,  -0.10248397539122701830,
      -0.061559591390611208429, -0.020531403993998635502,
      0.020531403993998635502,  0.061559591390611208429,
      0.10248397539122701830,   0.14323554822726752145,
      0.18374559352891447742,   0.22394580219647413376,
      0.26376838758499427648,   0.30314619980790777810,
      0.34201283896696202393,   0.38030276711750444347,
      0.41795141878032729880,   0.45489530981372633943,
      0.49107214446219386486,   0.52642092040124259096,
      0.56088203160123747900,   0.59439736883679291815,
      0.62691041767226655915,   0.65836635375814263028,
      0.68871213527764059700,   0.71789659238770363937,
      0.74587051350361044315,   0.77258672828180976130,
      0.79800018716120016975,   0.82206803732897461348,
      0.84474969498334239401,   0.86600691377198195523,
      0.88580384929208278722,   0.90410711954556682854,
      0.92088586125215011849,   0.93611178193481079626,
      0.94975920771089638508,   0.96180512675876782717,
      0.97222922852037690448,   0.98101393897565589525,
      0.98814445335983743850,   0.99360877272352698462,
      0.99739778635535543669,   0.99950594836215307811};
  std::array<double, 76> ref_wgt = {
      0.0012677916340853596633, 0.0029491029536424749004,
      0.0046279352280374213261, 0.0062991804973284458666,
      0.0079598474772397346211, 0.0096071054147137540824,
      0.011238168569667687240,  0.012850283847510144945,
      0.014440731748276679940,  0.016006829912248570889,
      0.017545937291474230954,  0.019055458467190582807,
      0.020532847967908021093,  0.021975614534416249168,
      0.023381325307011186622,  0.024747609920659671643,
      0.026072164497985983524,  0.027352755531827521674,
      0.028587223650054003774,  0.029773487255905040957,
      0.030909546037491595390,  0.031993484340421600069,
      0.033023474397791741007,  0.033997779412056380847,
      0.034914756483550767444,  0.035772859380713947528,
      0.036570641147329617007,  0.037306756542381609828,
      0.037979964308405283195,  0.038589129264506738343,
      0.039133224220518440768,  0.039611331709062058423,
      0.040022645532596826116,  0.040366472122844023154,
      0.040642231710294738777,  0.040849459301828492280,
      0.040987805464793951541,  0.041057036916229422593,
      0.041057036916229422593,  0.040987805464793951541,
      0.040849459301828492280,  0.040642231710294738777,
      0.040366472122844023154,  0.040022645532596826116,
      0.039611331709062058423,  0.039133224220518440768,
      0.038589129264506738343,  0.037979964308405283195,
      0.037306756542381609828,  0.036570641147329617007,
      0.035772859380713947528,  0.034914756483550767444,
      0.033997779412056380847,  0.033023474397791741007,
      0.031993484340421600069,  0.030909546037491595390,
      0.029773487255905040957,  0.028587223650054003774,
      0.027352755531827521674,  0.026072164497985983524,
      0.024747609920659671643,  0.023381325307011186622,
      0.021975614534416249168,  0.020532847967908021093,
      0.019055458467190582807,  0.017545937291474230954,
      0.016006829912248570889,  0.014440731748276679940,
      0.012850283847510144945,  0.011238168569667687240,
      0.0096071054147137540824, 0.0079598474772397346211,
      0.0062991804973284458666, 0.0046279352280374213261,
      0.0029491029536424749004, 0.0012677916340853596633};
  IntegratorXX::GaussLegendre<double, double> quad(76);
  const auto& pts = quad.points();
  const auto& wgt = quad.weights();
  for(auto i = 0ul; i < 76; i++) {
    REQUIRE_THAT(pts[i], Catch::Matchers::WithinAbs(ref_pts[i], x_tolerance));
    REQUIRE_THAT(wgt[i], Catch::Matchers::WithinAbs(ref_wgt[i], w_tolerance));
  }
}

TEST_CASE("77 point GaussLegendre", "[1d-quad]") {
  std::array<double, 77> ref_pts = {-0.99951861463341000975,
                                    -0.99746447786921409987,
                                    -0.99377247094987824831,
                                    -0.98844783822256130732,
                                    -0.98149922733113846239,
                                    -0.97293803074910839035,
                                    -0.96277830646773431194,
                                    -0.95103674360059187152,
                                    -0.93773263195906104419,
                                    -0.92288782935940219993,
                                    -0.90652672532125781802,
                                    -0.88867620082556406989,
                                    -0.86936558406773405988,
                                    -0.84862660222962403647,
                                    -0.82649332932900211944,
                                    -0.80300213022292522738,
                                    -0.77819160085254314187,
                                    -0.75210250482521594138,
                                    -0.72477770643691172878,
                                    -0.69626210024424222479,
                                    -0.66660253730145149359,
                                    -0.63584774818331236701,
                                    -0.60404826292025738497,
                                    -0.57125632797719825081,
                                    -0.53752582041237773902,
                                    -0.50291215935725151781,
                                    -0.46747221496281179464,
                                    -0.43126421496193568207,
                                    -0.39434764900126356047,
                                    -0.35678317089978107058,
                                    -0.31863249899468730878,
                                    -0.27995831473827612206,
                                    -0.24082415971243219761,
                                    -0.20129433122994435664,
                                    -0.16143377669416093161,
                                    -0.12130798689055258664,
                                    -0.080982888385503131207,
                                    -0.040524735209115925930,
                                    0,
                                    0.040524735209115925930,
                                    0.080982888385503131207,
                                    0.12130798689055258664,
                                    0.16143377669416093161,
                                    0.20129433122994435664,
                                    0.24082415971243219761,
                                    0.27995831473827612206,
                                    0.31863249899468730878,
                                    0.35678317089978107058,
                                    0.39434764900126356047,
                                    0.43126421496193568207,
                                    0.46747221496281179464,
                                    0.50291215935725151781,
                                    0.53752582041237773902,
                                    0.57125632797719825081,
                                    0.60404826292025738497,
                                    0.63584774818331236701,
                                    0.66660253730145149359,
                                    0.69626210024424222479,
                                    0.72477770643691172878,
                                    0.75210250482521594138,
                                    0.77819160085254314187,
                                    0.80300213022292522738,
                                    0.82649332932900211944,
                                    0.84862660222962403647,
                                    0.86936558406773405988,
                                    0.88867620082556406989,
                                    0.90652672532125781802,
                                    0.92288782935940219993,
                                    0.93773263195906104419,
                                    0.95103674360059187152,
                                    0.96277830646773431194,
                                    0.97293803074910839035,
                                    0.98149922733113846239,
                                    0.98844783822256130732,
                                    0.99377247094987824831,
                                    0.99746447786921409987,
                                    0.99951861463341000975};
  std::array<double, 77> ref_wgt = {
      0.0012352911771394096142, 0.0028735530836526916573,
      0.0045095236002058353332, 0.0061382961597563418393,
      0.0077570259500830707318, 0.0093630236923864307693,
      0.010953642853911354239,  0.012526267369227365187,
      0.014078312340027004050,  0.015607227268749131295,
      0.017110499906531104176,  0.018585660248341485509,
      0.020030284534316176396,  0.021441999205456135505,
      0.022818484790129520513,  0.024157479707955844941,
      0.025456783981694403753,  0.026714262849557890832,
      0.027927850271276968542,  0.029095552321768761349,
      0.030215450466622998691,  0.031285704713905433394,
      0.032304556637030975594,  0.033270332263698545303,
      0.034181444826115679265,  0.035036397367978278455,
      0.035833785203911962603,  0.036572298227327454533,
      0.037250723062893718879,  0.037867945060089320262,
      0.038422950124554523674,  0.038914826384233785621,
      0.039342765687570151937,  0.039706064931289310681,
      0.040004127215591237410,  0.040236462824851084195,
      0.040402690032217756170,  0.040502535726788031955,
      0.040535835862325650292,  0.040502535726788031955,
      0.040402690032217756170,  0.040236462824851084195,
      0.040004127215591237410,  0.039706064931289310681,
      0.039342765687570151937,  0.038914826384233785621,
      0.038422950124554523674,  0.037867945060089320262,
      0.037250723062893718879,  0.036572298227327454533,
      0.035833785203911962603,  0.035036397367978278455,
      0.034181444826115679265,  0.033270332263698545303,
      0.032304556637030975594,  0.031285704713905433394,
      0.030215450466622998691,  0.029095552321768761349,
      0.027927850271276968542,  0.026714262849557890832,
      0.025456783981694403753,  0.024157479707955844941,
      0.022818484790129520513,  0.021441999205456135505,
      0.020030284534316176396,  0.018585660248341485509,
      0.017110499906531104176,  0.015607227268749131295,
      0.014078312340027004050,  0.012526267369227365187,
      0.010953642853911354239,  0.0093630236923864307693,
      0.0077570259500830707318, 0.0061382961597563418393,
      0.0045095236002058353332, 0.0028735530836526916573,
      0.0012352911771394096142};
  IntegratorXX::GaussLegendre<double, double> quad(77);
  const auto& pts = quad.points();
  const auto& wgt = quad.weights();
  for(auto i = 0ul; i < 77; i++) {
    REQUIRE_THAT(pts[i], Catch::Matchers::WithinAbs(ref_pts[i], x_tolerance));
    REQUIRE_THAT(wgt[i], Catch::Matchers::WithinAbs(ref_wgt[i], w_tolerance));
  }
}

TEST_CASE("78 point GaussLegendre", "[1d-quad]") {
  std::array<double, 78> ref_pts = {
      -0.99953079999242375952,  -0.99752863837872436150,
      -0.99392996169448874318,  -0.98873973209371743438,
      -0.98196616309955049778,  -0.97362007850623644206,
      -0.96371483598675590156,  -0.95226629468986336372,
      -0.93929278691494659307,  -0.92481508778006377636,
      -0.90885638157318825821,  -0.89144222445881857881,
      -0.87260050347272450493,  -0.85236139182255770329,
      -0.83075730054591127274,  -0.80782282659420168677,
      -0.78359469742114278707,  -0.75811171216231531507,
      -0.73141467949883039750,  -0.70354635230392377212,
      -0.67455135917675079032,  -0.64447613297279285459,
      -0.61336883644518477680,  -0.58127928511595175522,
      -0.54825886750061260875,  -0.51436046281386405802,
      -0.47963835628810723969,  -0.44414815224040860307,
      -0.40794668502709839165,  -0.37109192802859627433,
      -0.33364290081021056078,  -0.29565957460758014522,
      -0.25720277628811244299,  -0.21833409094221197881,
      -0.17911576326028915156,  -0.13961059785348359491,
      -0.099881858677728410528, -0.059993167722217693636,
      -0.020008403124517922952, 0.020008403124517922952,
      0.059993167722217693636,  0.099881858677728410528,
      0.13961059785348359491,   0.17911576326028915156,
      0.21833409094221197881,   0.25720277628811244299,
      0.29565957460758014522,   0.33364290081021056078,
      0.37109192802859627433,   0.40794668502709839165,
      0.44414815224040860307,   0.47963835628810723969,
      0.51436046281386405802,   0.54825886750061260875,
      0.58127928511595175522,   0.61336883644518477680,
      0.64447613297279285459,   0.67455135917675079032,
      0.70354635230392377212,   0.73141467949883039750,
      0.75811171216231531507,   0.78359469742114278707,
      0.80782282659420168677,   0.83075730054591127274,
      0.85236139182255770329,   0.87260050347272450493,
      0.89144222445881857881,   0.90885638157318825821,
      0.92481508778006377636,   0.93929278691494659307,
      0.95226629468986336372,   0.96371483598675590156,
      0.97362007850623644206,   0.98196616309955049778,
      0.98873973209371743438,   0.99392996169448874318,
      0.99752863837872436150,   0.99953079999242375952};
  std::array<double, 78> ref_wgt = {
      0.0012040245660673532803, 0.0028008688118386304116,
      0.0043955960394603467427, 0.0059834899444404079896,
      0.0075618431894397188270, 0.0091280992272550872769,
      0.010679742157481113354,  0.012214284549789886398,
      0.013729267920144148394,  0.015222265680178451693,
      0.016690886689343891866,  0.018132778954982328644,
      0.019545633343399923378,  0.020927187251877726785,
      0.022275228219113886763,  0.023587597461457472096,
      0.024862193326222450761,  0.026096974655108835030,
      0.027289964051624364865,  0.028439251046897516262,
      0.029542995158606946412,  0.030599428838013045289,
      0.031606860300304797739,  0.032563676233689044408,
      0.033468344382858977973,  0.034319416002689090290,
      0.035115528178217189475,  0.035855406007191695445,
      0.036537864641684700648,  0.037161811185498386851,
      0.037726246444324247864,  0.038230266525850987650,
      0.038673064287257674004,  0.039053930627773413147,
      0.039372255624233121937,  0.039627529507810542956,
      0.039819343480364089225,  0.039947390369088024879,
      0.040011465118420482989,  0.040011465118420482989,
      0.039947390369088024879,  0.039819343480364089225,
      0.039627529507810542956,  0.039372255624233121937,
      0.039053930627773413147,  0.038673064287257674004,
      0.038230266525850987650,  0.037726246444324247864,
      0.037161811185498386851,  0.036537864641684700648,
      0.035855406007191695445,  0.035115528178217189475,
      0.034319416002689090290,  0.033468344382858977973,
      0.032563676233689044408,  0.031606860300304797739,
      0.030599428838013045289,  0.029542995158606946412,
      0.028439251046897516262,  0.027289964051624364865,
      0.026096974655108835030,  0.024862193326222450761,
      0.023587597461457472096,  0.022275228219113886763,
      0.020927187251877726785,  0.019545633343399923378,
      0.018132778954982328644,  0.016690886689343891866,
      0.015222265680178451693,  0.013729267920144148394,
      0.012214284549789886398,  0.010679742157481113354,
      0.0091280992272550872769, 0.0075618431894397188270,
      0.0059834899444404079896, 0.0043955960394603467427,
      0.0028008688118386304116, 0.0012040245660673532803};
  IntegratorXX::GaussLegendre<double, double> quad(78);
  const auto& pts = quad.points();
  const auto& wgt = quad.weights();
  for(auto i = 0ul; i < 78; i++) {
    REQUIRE_THAT(pts[i], Catch::Matchers::WithinAbs(ref_pts[i], x_tolerance));
    REQUIRE_THAT(wgt[i], Catch::Matchers::WithinAbs(ref_wgt[i], w_tolerance));
  }
}

TEST_CASE("79 point GaussLegendre", "[1d-quad]") {
  std::array<double, 79> ref_pts = {
      -0.99954252847956984432,  -0.99759039433694143518,
      -0.99408155478554262241,  -0.98902070768778433787,
      -0.98241565925127893010,  -0.97427669959780711818,
      -0.96461652911486478611,  -0.95345022788926913596,
      -0.94079522930657725030,  -0.92667129188090387366,
      -0.91110046803458080024,  -0.89410706950423510131,
      -0.87571762930352947666,  -0.85596086025521937647,
      -0.83486761013777788207,  -0.81247081350780677376,
      -0.78880544026919776556,  -0.76390844106717010846,
      -0.73781868959127820952,  -0.71057692187682416376,
      -0.68222567269907105928,  -0.65280920915934399852,
      -0.62237346156657723888,  -0.59096595172213998285,
      -0.55863571871985890666,  -0.52543324237705454790,
      -0.49141036441611982110,  -0.45662020751968913115,
      -0.42111709238577192873,  -0.38495645291235088392,
      -0.34819474964386786724,  -0.31088938161473643721,
      -0.27309859672752354374,  -0.23488140080573191588,
      -0.19629746546318464166,  -0.15740703493386160503,
      -0.11827083200766088117,  -0.078949963218954405448,
      -0.039505823435974064059, 0,
      0.039505823435974064059,  0.078949963218954405448,
      0.11827083200766088117,   0.15740703493386160503,
      0.19629746546318464166,   0.23488140080573191588,
      0.27309859672752354374,   0.31088938161473643721,
      0.34819474964386786724,   0.38495645291235088392,
      0.42111709238577192873,   0.45662020751968913115,
      0.49141036441611982110,   0.52543324237705454790,
      0.55863571871985890666,   0.59096595172213998285,
      0.62237346156657723888,   0.65280920915934399852,
      0.68222567269907105928,   0.71057692187682416376,
      0.73781868959127820952,   0.76390844106717010846,
      0.78880544026919776556,   0.81247081350780677376,
      0.83486761013777788207,   0.85596086025521937647,
      0.87571762930352947666,   0.89410706950423510131,
      0.91110046803458080024,   0.92667129188090387366,
      0.94079522930657725030,   0.95345022788926913596,
      0.96461652911486478611,   0.97427669959780711818,
      0.98241565925127893010,   0.98902070768778433787,
      0.99408155478554262241,   0.99759039433694143518,
      0.99954252847956984432};
  std::array<double, 79> ref_wgt = {
      0.0011739301299566130212, 0.0027309070657548559185,
      0.0042859291131265312182, 0.0058344598687634655892,
      0.0073739211313301768304, 0.0089018809826524862537,
      0.010415946204513382579,  0.011913750215116998700,
      0.013392953344825676197,  0.014851245526350069319,
      0.016286349576191682092,  0.017696024624310417865,
      0.019078069558937488585,  0.020430326438140859878,
      0.021750683846608079769,  0.023037080185719026277,
      0.024287506888799492639,  0.025500011555128773947,
      0.026672700997105556538,  0.027803744195447058944,
      0.028891375157607266782,  0.029933895674838362896,
      0.030929677973524835288,  0.031877167256611170361,
      0.032774884131130817853,  0.033621426918030930050,
      0.034415473840676600883,  0.035155785088611131128,
      0.035841204753345752289,  0.036470662633153427529,
      0.037043175904046784160,  0.037557850654329770478,
      0.038013883280326049546,  0.038410561741104177405,
      0.038747266670239967068,  0.039023472342879796026,
      0.039238747496594643555,  0.039392756004743003934,
      0.039485257401291164754,  0.039516107256271311709,
      0.039485257401291164754,  0.039392756004743003934,
      0.039238747496594643555,  0.039023472342879796026,
      0.038747266670239967068,  0.038410561741104177405,
      0.038013883280326049546,  0.037557850654329770478,
      0.037043175904046784160,  0.036470662633153427529,
      0.035841204753345752289,  0.035155785088611131128,
      0.034415473840676600883,  0.033621426918030930050,
      0.032774884131130817853,  0.031877167256611170361,
      0.030929677973524835288,  0.029933895674838362896,
      0.028891375157607266782,  0.027803744195447058944,
      0.026672700997105556538,  0.025500011555128773947,
      0.024287506888799492639,  0.023037080185719026277,
      0.021750683846608079769,  0.020430326438140859878,
      0.019078069558937488585,  0.017696024624310417865,
      0.016286349576191682092,  0.014851245526350069319,
      0.013392953344825676197,  0.011913750215116998700,
      0.010415946204513382579,  0.0089018809826524862537,
      0.0073739211313301768304, 0.0058344598687634655892,
      0.0042859291131265312182, 0.0027309070657548559185,
      0.0011739301299566130212};
  IntegratorXX::GaussLegendre<double, double> quad(79);
  const auto& pts = quad.points();
  const auto& wgt = quad.weights();
  for(auto i = 0ul; i < 79; i++) {
    REQUIRE_THAT(pts[i], Catch::Matchers::WithinAbs(ref_pts[i], x_tolerance));
    REQUIRE_THAT(wgt[i], Catch::Matchers::WithinAbs(ref_wgt[i], w_tolerance));
  }
}

TEST_CASE("80 point GaussLegendre", "[1d-quad]") {
  std::array<double, 80> ref_pts = {
      -0.99955382265163062988,  -0.99764986439823768890,
      -0.99422754096568827789,  -0.98929130249975553103,
      -0.98284857273862907042,  -0.97490914058572779339,
      -0.96548508904379925145,  -0.95459076634363490549,
      -0.94224276130987267475,  -0.92845987717244579595,
      -0.91326310257175765416,  -0.89667557943877068319,
      -0.87872256767821382870,  -0.85943140666311109698,
      -0.83883147358025527562,  -0.81695413868146347037,
      -0.79383271750460544995,  -0.76950242013504137387,
      -0.74400029758359727232,  -0.71736518536209988025,
      -0.68963764434202760077,  -0.66085989898611980174,
      -0.63107577304687196625,  -0.60033062282975174315,
      -0.56867126812270978473,  -0.53614592089713193202,
      -0.50280411188878498759,  -0.46869661517054447704,
      -0.43387537083175609306,  -0.39839340588196922702,
      -0.36230475349948731562,  -0.32566437074770191462,
      -0.28852805488451185311,  -0.25095235839227212049,
      -0.21299450285766613257,  -0.17471229183264681256,
      -0.13616402280914388656,  -0.097408398441584599063,
      -0.058504437152420668629, -0.019511383256793997654,
      0.019511383256793997654,  0.058504437152420668629,
      0.097408398441584599063,  0.13616402280914388656,
      0.17471229183264681256,   0.21299450285766613257,
      0.25095235839227212049,   0.28852805488451185311,
      0.32566437074770191462,   0.36230475349948731562,
      0.39839340588196922702,   0.43387537083175609306,
      0.46869661517054447704,   0.50280411188878498759,
      0.53614592089713193202,   0.56867126812270978473,
      0.60033062282975174315,   0.63107577304687196625,
      0.66085989898611980174,   0.68963764434202760077,
      0.71736518536209988025,   0.74400029758359727232,
      0.76950242013504137387,   0.79383271750460544995,
      0.81695413868146347037,   0.83883147358025527562,
      0.85943140666311109698,   0.87872256767821382870,
      0.89667557943877068319,   0.91326310257175765416,
      0.92845987717244579595,   0.94224276130987267475,
      0.95459076634363490549,   0.96548508904379925145,
      0.97490914058572779339,   0.98284857273862907042,
      0.98929130249975553103,   0.99422754096568827789,
      0.99764986439823768890,   0.99955382265163062988};
  std::array<double, 80> ref_wgt = {
      0.0011449500031869415346, 0.0026635335895126816693,
      0.0041803131246948952367, 0.0056909224514031986493,
      0.0071929047681173127527, 0.0086839452692608584264,
      0.010161766041103064521,  0.011624114120797826916,
      0.013068761592401339294,  0.014493508040509076117,
      0.015896183583725688045,  0.017274652056269306359,
      0.018626814208299031429,  0.019950610878141998929,
      0.021244026115782006389,  0.022505090246332461926,
      0.023731882865930101293,  0.024922535764115491105,
      0.026075235767565117903,  0.027188227500486380674,
      0.028259816057276862397,  0.029288369583267847693,
      0.030272321759557980661,  0.031210174188114701642,
      0.032100498673487773148,  0.032941939397645401383,
      0.033733214984611522817,  0.034473120451753928794,
      0.035160529044747593496,  0.035794393953416054603,
      0.036373749905835978044,  0.036897714638276008839,
      0.037365490238730490027,  0.037776364362001397490,
      0.038129711314477638344,  0.038424993006959423185,
      0.038661759774076463327,  0.038839651059051968932,
      0.038958395962769531199,  0.039017813656306654811,
      0.039017813656306654811,  0.038958395962769531199,
      0.038839651059051968932,  0.038661759774076463327,
      0.038424993006959423185,  0.038129711314477638344,
      0.037776364362001397490,  0.037365490238730490027,
      0.036897714638276008839,  0.036373749905835978044,
      0.035794393953416054603,  0.035160529044747593496,
      0.034473120451753928794,  0.033733214984611522817,
      0.032941939397645401383,  0.032100498673487773148,
      0.031210174188114701642,  0.030272321759557980661,
      0.029288369583267847693,  0.028259816057276862397,
      0.027188227500486380674,  0.026075235767565117903,
      0.024922535764115491105,  0.023731882865930101293,
      0.022505090246332461926,  0.021244026115782006389,
      0.019950610878141998929,  0.018626814208299031429,
      0.017274652056269306359,  0.015896183583725688045,
      0.014493508040509076117,  0.013068761592401339294,
      0.011624114120797826916,  0.010161766041103064521,
      0.0086839452692608584264, 0.0071929047681173127527,
      0.0056909224514031986493, 0.0041803131246948952367,
      0.0026635335895126816693, 0.0011449500031869415346};
  IntegratorXX::GaussLegendre<double, double> quad(80);
  const auto& pts = quad.points();
  const auto& wgt = quad.weights();
  for(auto i = 0ul; i < 80; i++) {
    REQUIRE_THAT(pts[i], Catch::Matchers::WithinAbs(ref_pts[i], x_tolerance));
    REQUIRE_THAT(wgt[i], Catch::Matchers::WithinAbs(ref_wgt[i], w_tolerance));
  }
}

TEST_CASE("81 point GaussLegendre", "[1d-quad]") {
  std::array<double, 81> ref_pts = {-0.99956470369031903448,
                                    -0.99770715998834646366,
                                    -0.99436819328521986502,
                                    -0.98955202137102199913,
                                    -0.98326570856643022722,
                                    -0.97551857267236129692,
                                    -0.96632211633805611107,
                                    -0.95568999975640251525,
                                    -0.94363801765281382118,
                                    -0.93018407491516750302,
                                    -0.91534815964075071729,
                                    -0.89915231328615653085,
                                    -0.88162059784672014617,
                                    -0.86277906006979189467,
                                    -0.84265569273646704621,
                                    -0.82128039306091022346,
                                    -0.79868491826502828216,
                                    -0.77490283839242343141,
                                    -0.74996948643062067222,
                                    -0.72392190581505261444,
                                    -0.69679879539243560968,
                                    -0.66864045192509014660,
                                    -0.63948871022149455464,
                                    -0.60938688098193654606,
                                    -0.57837968645155136948,
                                    -0.54651319397631127308,
                                    -0.51383474756065821552,
                                    -0.48039289752844827014,
                                    -0.44623732839169905665,
                                    -0.41141878503429754169,
                                    -0.37598899732033128792,
                                    -0.34000060323904833978,
                                    -0.30350707070062616455,
                                    -0.26656261809893533915,
                                    -0.22922213375931610544,
                                    -0.19154109439104285574,
                                    -0.15357548266563063686,
                                    -0.11538170404343671126,
                                    -0.077016502972127177318,
                                    -0.038536878581511983836,
                                    0,
                                    0.038536878581511983836,
                                    0.077016502972127177318,
                                    0.11538170404343671126,
                                    0.15357548266563063686,
                                    0.19154109439104285574,
                                    0.22922213375931610544,
                                    0.26656261809893533915,
                                    0.30350707070062616455,
                                    0.34000060323904833978,
                                    0.37598899732033128792,
                                    0.41141878503429754169,
                                    0.44623732839169905665,
                                    0.48039289752844827014,
                                    0.51383474756065821552,
                                    0.54651319397631127308,
                                    0.57837968645155136948,
                                    0.60938688098193654606,
                                    0.63948871022149455464,
                                    0.66864045192509014660,
                                    0.69679879539243560968,
                                    0.72392190581505261444,
                                    0.74996948643062067222,
                                    0.77490283839242343141,
                                    0.79868491826502828216,
                                    0.82128039306091022346,
                                    0.84265569273646704621,
                                    0.86277906006979189467,
                                    0.88162059784672014617,
                                    0.89915231328615653085,
                                    0.91534815964075071729,
                                    0.93018407491516750302,
                                    0.94363801765281382118,
                                    0.95568999975640251525,
                                    0.96632211633805611107,
                                    0.97551857267236129692,
                                    0.98326570856643022722,
                                    0.98955202137102199913,
                                    0.99436819328521986502,
                                    0.99770715998834646366,
                                    0.99956470369031903448};
  std::array<double, 81> ref_wgt = {
      0.0011170298471246066061, 0.0025986222999289530135,
      0.0040785511134213955860, 0.0055526113702562789023,
      0.0070184604849316255116, 0.0084738937853455654496,
      0.0099167418095958754997, 0.011344858495416255762,
      0.012756121115134421000,  0.014148432513236065548,
      0.015519723912464362938,  0.016867957867635139474,
      0.018191131241255761152,  0.019487278155601918216,
      0.020754472901445608540,  0.021990832792751632771,
      0.023194520960273919881,  0.024363749078563097332,
      0.025496780021665677069,  0.026591930443219921091,
      0.027647573276924926911,  0.028662140153560676226,
      0.029634123730905597658,  0.030562079933052661896,
      0.031444630095774066418,  0.032280463014732688872,
      0.033068336893488004421,  0.033807081188396245551,
      0.034495598347659795895,  0.035132865441939379416,
      0.035717935684104568531,  0.036249939835863412798,
      0.036728087499180439517,  0.037151668290563712145,
      0.037520052896475837859,  0.037832694008300559248,
      0.038089127135475601831,  0.038288971295583524430,
      0.038431929580375172100,  0.038517789596884695238,
      0.038546423782980703390,  0.038517789596884695238,
      0.038431929580375172100,  0.038288971295583524430,
      0.038089127135475601831,  0.037832694008300559248,
      0.037520052896475837859,  0.037151668290563712145,
      0.036728087499180439517,  0.036249939835863412798,
      0.035717935684104568531,  0.035132865441939379416,
      0.034495598347659795895,  0.033807081188396245551,
      0.033068336893488004421,  0.032280463014732688872,
      0.031444630095774066418,  0.030562079933052661896,
      0.029634123730905597658,  0.028662140153560676226,
      0.027647573276924926911,  0.026591930443219921091,
      0.025496780021665677069,  0.024363749078563097332,
      0.023194520960273919881,  0.021990832792751632771,
      0.020754472901445608540,  0.019487278155601918216,
      0.018191131241255761152,  0.016867957867635139474,
      0.015519723912464362938,  0.014148432513236065548,
      0.012756121115134421000,  0.011344858495416255762,
      0.0099167418095958754997, 0.0084738937853455654496,
      0.0070184604849316255116, 0.0055526113702562789023,
      0.0040785511134213955860, 0.0025986222999289530135,
      0.0011170298471246066061};
  IntegratorXX::GaussLegendre<double, double> quad(81);
  const auto& pts = quad.points();
  const auto& wgt = quad.weights();
  for(auto i = 0ul; i < 81; i++) {
    REQUIRE_THAT(pts[i], Catch::Matchers::WithinAbs(ref_pts[i], x_tolerance));
    REQUIRE_THAT(wgt[i], Catch::Matchers::WithinAbs(ref_wgt[i], w_tolerance));
  }
}

TEST_CASE("82 point GaussLegendre", "[1d-quad]") {
  std::array<double, 82> ref_pts = {
      -0.99957519150165264887,  -0.99776238582638586256,
      -0.99450376837807562893,  -0.98980333883990894993,
      -0.98366782352200760337,  -0.97610609709449882869,
      -0.96712911625259069600,  -0.95674989386161090312,
      -0.94498347743896048918,  -0.93184692645462288785,
      -0.91735928725328010715,  -0.90154156528884125820,
      -0.88441669459672470823,  -0.86600950450476544857,
      -0.84634668361291370180,  -0.82545674108576765603,
      -0.80336996531010829930,  -0.78011837997535824519,
      -0.75573569763956041730,  -0.73025727084759624505,
      -0.70372004087216667849,  -0.67616248415164702457,
      -0.64762455650234659857,  -0.61814763518597868204,
      -0.58777445891628486715,  -0.55654906589176381235,
      -0.52451672994432776798,  -0.49172389489644932246,
      -0.45821810722196319782,  -0.42404794710815072216,
      -0.38926295801905481592,  -0.35391357486214793641,
      -0.31805105086250150501,  -0.28172738325048010237,
      -0.24499523787070453784,  -0.20790787282159235097,
      -0.17051906123619015977,  -0.13288301331625752576,
      -0.095054297732644873953, -0.057087762505926931903,
      -0.019038455482006813761, 0.019038455482006813761,
      0.057087762505926931903,  0.095054297732644873953,
      0.13288301331625752576,   0.17051906123619015977,
      0.20790787282159235097,   0.24499523787070453784,
      0.28172738325048010237,   0.31805105086250150501,
      0.35391357486214793641,   0.38926295801905481592,
      0.42404794710815072216,   0.45821810722196319782,
      0.49172389489644932246,   0.52451672994432776798,
      0.55654906589176381235,   0.58777445891628486715,
      0.61814763518597868204,   0.64762455650234659857,
      0.67616248415164702457,   0.70372004087216667849,
      0.73025727084759624505,   0.75573569763956041730,
      0.78011837997535824519,   0.80336996531010829930,
      0.82545674108576765603,   0.84634668361291370180,
      0.86600950450476544857,   0.88441669459672470823,
      0.90154156528884125820,   0.91735928725328010715,
      0.93184692645462288785,   0.94498347743896048918,
      0.95674989386161090312,   0.96712911625259069600,
      0.97610609709449882869,   0.98366782352200760337,
      0.98980333883990894993,   0.99450376837807562893,
      0.99776238582638586256,   0.99957519150165264887};
  std::array<double, 82> ref_wgt = {
      0.0010901185952758308661, 0.0025360546968561061098,
      0.0039804579378560746190, 0.0054192762324467650907,
      0.0068502745341835261843, 0.0082713518183836856044,
      0.0096804407043710737370, 0.011075495781759896320,
      0.012454493401142104680,  0.013815433714126459388,
      0.015156343270762561788,  0.016475277763983708891,
      0.017770324798498407147,  0.019039606640178925073,
      0.020281282926912158902,  0.021493553330774844043,
      0.022674660164914103102,  0.023822890930047826342,
      0.024936580796240755156,  0.026014115016017023754,
      0.027053931265124771520,  0.028054521907454230472,
      0.029014436180764403961,  0.029932282300012724635,
      0.030806729475215629814,  0.031636509840900245538,
      0.032420420294340605078,  0.033157324239907211328,
      0.033846153236996858745,  0.034485908549150705507,
      0.035075662592112690385,  0.035614560278727472681,
      0.036101820258727023076,  0.036536736051607652842,
      0.036918677070954456999,  0.037247089538727664188,
      0.037521497288185020872,  0.037741502454275869672,
      0.037906786050505784779,  0.038017108431435269905,
      0.038072309640141871208,  0.038072309640141871208,
      0.038017108431435269905,  0.037906786050505784779,
      0.037741502454275869672,  0.037521497288185020872,
      0.037247089538727664188,  0.036918677070954456999,
      0.036536736051607652842,  0.036101820258727023076,
      0.035614560278727472681,  0.035075662592112690385,
      0.034485908549150705507,  0.033846153236996858745,
      0.033157324239907211328,  0.032420420294340605078,
      0.031636509840900245538,  0.030806729475215629814,
      0.029932282300012724635,  0.029014436180764403961,
      0.028054521907454230472,  0.027053931265124771520,
      0.026014115016017023754,  0.024936580796240755156,
      0.023822890930047826342,  0.022674660164914103102,
      0.021493553330774844043,  0.020281282926912158902,
      0.019039606640178925073,  0.017770324798498407147,
      0.016475277763983708891,  0.015156343270762561788,
      0.013815433714126459388,  0.012454493401142104680,
      0.011075495781759896320,  0.0096804407043710737370,
      0.0082713518183836856044, 0.0068502745341835261843,
      0.0054192762324467650907, 0.0039804579378560746190,
      0.0025360546968561061098, 0.0010901185952758308661};
  IntegratorXX::GaussLegendre<double, double> quad(82);
  const auto& pts = quad.points();
  const auto& wgt = quad.weights();
  for(auto i = 0ul; i < 82; i++) {
    REQUIRE_THAT(pts[i], Catch::Matchers::WithinAbs(ref_pts[i], x_tolerance));
    REQUIRE_THAT(wgt[i], Catch::Matchers::WithinAbs(ref_wgt[i], w_tolerance));
  }
}

TEST_CASE("83 point GaussLegendre", "[1d-quad]") {
  std::array<double, 83> ref_pts = {
      -0.99958530480704934381,  -0.99781564040342996176,
      -0.99463450763178032341,  -0.99004570129726522277,
      -0.98405562959668147154,  -0.97667275007284293423,
      -0.96790750545012872955,  -0.95777229912276710596,
      -0.94628147501179087444,  -0.93345129640183861924,
      -0.91929992258720794378,  -0.90384738302289950808,
      -0.88711554890506334074,  -0.86912810217871698350,
      -0.84991050199893379734,  -0.82948994868498427640,
      -0.80789534521458963230,  -0.78515725631081584029,
      -0.76130786517845874072,  -0.73638092795056426741,
      -0.71041172590921746448,  -0.68343701554802178026,
      -0.65549497654682371748,  -0.62662515773223935849,
      -0.59686842110041831239,  -0.56626688398124080301,
      -0.53486385942578531058,  -0.50270379490142613202,
      -0.46983220938132032872,  -0.43629562891731927549,
      -0.40214152078748873556,  -0.36741822631144036740,
      -0.33217489242856418232,  -0.29646140213600319111,
      -0.26032830388482591791,  -0.22382674003432739919,
      -0.18700837446572268079,  -0.14992531945768681780,
      -0.11263006192724030781,  -0.075175389140377282327,
      -0.037614313997584382668, 0,
      0.037614313997584382668,  0.075175389140377282327,
      0.11263006192724030781,   0.14992531945768681780,
      0.18700837446572268079,   0.22382674003432739919,
      0.26032830388482591791,   0.29646140213600319111,
      0.33217489242856418232,   0.36741822631144036740,
      0.40214152078748873556,   0.43629562891731927549,
      0.46983220938132032872,   0.50270379490142613202,
      0.53486385942578531058,   0.56626688398124080301,
      0.59686842110041831239,   0.62662515773223935849,
      0.65549497654682371748,   0.68343701554802178026,
      0.71041172590921746448,   0.73638092795056426741,
      0.76130786517845874072,   0.78515725631081584029,
      0.80789534521458963230,   0.82948994868498427640,
      0.84991050199893379734,   0.86912810217871698350,
      0.88711554890506334074,   0.90384738302289950808,
      0.91929992258720794378,   0.93345129640183861924,
      0.94628147501179087444,   0.95777229912276710596,
      0.96790750545012872955,   0.97667275007284293423,
      0.98405562959668147154,   0.99004570129726522277,
      0.99463450763178032341,   0.99781564040342996176,
      0.99958530480704934381};
  std::array<double, 83> ref_wgt = {
      0.0010641682196665677564, 0.0024757193225459397433,
      0.0038858594353532021920, 0.0052906814458598655552,
      0.0066880516352436857414, 0.0080759665931234522836,
      0.0094524550924796998882, 0.010815566558037158720,
      0.012163370727798612063,  0.013493959512375234981,
      0.014805449400717877681,  0.016095984011935370915,
      0.017363736673824622350,  0.018606912985478472842,
      0.019823753345654939049,  0.021012535437269917874,
      0.022171576661803622622,  0.023299236518900549370,
      0.024393918927158557497,  0.025454074482489496751,
      0.026478202650673762485,  0.027464853890903261239,
      0.028412631707247641564,  0.029320194625104527918,
      0.030186258089814417054,  0.031009596284739194843,
      0.031789043866222150644,  0.032523497612968065991,
      0.033211917987505015181,  0.033853330607515198699,
      0.034446827624950516833,  0.034991569010979654732,
      0.035486783744947102646,  0.035931770905660647347,
      0.036325900663462288900,  0.036668615171678090044,
      0.036959429356184971080,  0.037197931601976730544,
      0.037383784335757404411,  0.037516724503737272715,
      0.037596563943955177592,  0.037623189652600123326,
      0.037596563943955177592,  0.037516724503737272715,
      0.037383784335757404411,  0.037197931601976730544,
      0.036959429356184971080,  0.036668615171678090044,
      0.036325900663462288900,  0.035931770905660647347,
      0.035486783744947102646,  0.034991569010979654732,
      0.034446827624950516833,  0.033853330607515198699,
      0.033211917987505015181,  0.032523497612968065991,
      0.031789043866222150644,  0.031009596284739194843,
      0.030186258089814417054,  0.029320194625104527918,
      0.028412631707247641564,  0.027464853890903261239,
      0.026478202650673762485,  0.025454074482489496751,
      0.024393918927158557497,  0.023299236518900549370,
      0.022171576661803622622,  0.021012535437269917874,
      0.019823753345654939049,  0.018606912985478472842,
      0.017363736673824622350,  0.016095984011935370915,
      0.014805449400717877681,  0.013493959512375234981,
      0.012163370727798612063,  0.010815566558037158720,
      0.0094524550924796998882, 0.0080759665931234522836,
      0.0066880516352436857414, 0.0052906814458598655552,
      0.0038858594353532021920, 0.0024757193225459397433,
      0.0010641682196665677564};
  IntegratorXX::GaussLegendre<double, double> quad(83);
  const auto& pts = quad.points();
  const auto& wgt = quad.weights();
  for(auto i = 0ul; i < 83; i++) {
    REQUIRE_THAT(pts[i], Catch::Matchers::WithinAbs(ref_pts[i], x_tolerance));
    REQUIRE_THAT(wgt[i], Catch::Matchers::WithinAbs(ref_wgt[i], w_tolerance));
  }
}

TEST_CASE("84 point GaussLegendre", "[1d-quad]") {
  std::array<double, 84> ref_pts = {
      -0.99959506122692324220,  -0.99786701642171196156,
      -0.99476063826128464120,  -0.99027952896535668733,
      -0.98442979712758165152,  -0.97721950735831578265,
      -0.96865861817362189769,  -0.95875895872969347202,
      -0.94753420994744312281,  -0.93499988476355881775,
      -0.92117330636305121773,  -0.90607358409400842134,
      -0.88972158698831546080,  -0.87213991488357903203,
      -0.85335286716891866160,  -0.83338640919002142885,
      -0.81226813635612303902,  -0.79002723599659686797,
      -0.76669444701883628267,  -0.74230201742260992077,
      -0.71688365972927482382,  -0.69047450438724847122,
      -0.66311105121801463434,  -0.63483111896969148364,
      -0.60567379304783338968,  -0.57567937149567415604,
      -0.54488930929844968891,  -0.51334616108876140005,
      -0.48109352233215617605,  -0.44817596907420233116,
      -0.41463899633233121934,  -0.38052895521758870054,
      -0.34589298887319705903,  -0.31077896731846397263,
      -0.27523542128808856050,  -0.23931147515830336571,
      -0.20305677905255347813,  -0.16652144022054815897,
      -0.12975595378552474180,  -0.092811132955437882746,
      -0.055738038794528216999, -0.018587909652332133287,
      0.018587909652332133287,  0.055738038794528216999,
      0.092811132955437882746,  0.12975595378552474180,
      0.16652144022054815897,   0.20305677905255347813,
      0.23931147515830336571,   0.27523542128808856050,
      0.31077896731846397263,   0.34589298887319705903,
      0.38052895521758870054,   0.41463899633233121934,
      0.44817596907420233116,   0.48109352233215617605,
      0.51334616108876140005,   0.54488930929844968891,
      0.57567937149567415604,   0.60567379304783338968,
      0.63483111896969148364,   0.66311105121801463434,
      0.69047450438724847122,   0.71688365972927482382,
      0.74230201742260992077,   0.76669444701883628267,
      0.79002723599659686797,   0.81226813635612303902,
      0.83338640919002142885,   0.85335286716891866160,
      0.87213991488357903203,   0.88972158698831546080,
      0.90607358409400842134,   0.92117330636305121773,
      0.93499988476355881775,   0.94753420994744312281,
      0.95875895872969347202,   0.96865861817362189769,
      0.97721950735831578265,   0.98442979712758165152,
      0.99027952896535668733,   0.99476063826128464120,
      0.99786701642171196156,   0.99959506122692324220};
  std::array<double, 84> ref_wgt = {
      0.0010391335164519718893, 0.0024175112654431228553,
      0.0037945916504523496964, 0.0051666051827468083299,
      0.0065315136877136546011, 0.0078874057526481463821,
      0.0092324007841902470144, 0.010564637623008245265,
      0.011882274089801223495,  0.013183488679182345987,
      0.014466482789161186242,  0.015729483095583598202,
      0.016970743955211611343,  0.018188549796056549928,
      0.019381217477318808648,  0.020547098609756278612,
      0.021684581830644822989,  0.022792095028942129339,
      0.023868107516958239385,  0.024911132145206428884,
      0.025919727357334647725,  0.026892499182197637516,
      0.027828103160258406036,  0.028725246201621802213,
      0.029582688373110845290,  0.030399244611902469773,
      0.031173786363345661292,  0.031905243140692727484,
      0.032592604004584257184,  0.033234918960240444075,
      0.033831300270425984804,  0.034380923682372700621,
      0.034883029566963308456,  0.035336923968601276160,
      0.035741979564315307278,  0.036097636530772566702,
      0.036403403318002122489,  0.036658857328759075637,
      0.036863645502590307718,  0.037017484803794520585,
      0.037120162612602094274,  0.037171537019034067603,
      0.037171537019034067603,  0.037120162612602094274,
      0.037017484803794520585,  0.036863645502590307718,
      0.036658857328759075637,  0.036403403318002122489,
      0.036097636530772566702,  0.035741979564315307278,
      0.035336923968601276160,  0.034883029566963308456,
      0.034380923682372700621,  0.033831300270425984804,
      0.033234918960240444075,  0.032592604004584257184,
      0.031905243140692727484,  0.031173786363345661292,
      0.030399244611902469773,  0.029582688373110845290,
      0.028725246201621802213,  0.027828103160258406036,
      0.026892499182197637516,  0.025919727357334647725,
      0.024911132145206428884,  0.023868107516958239385,
      0.022792095028942129339,  0.021684581830644822989,
      0.020547098609756278612,  0.019381217477318808648,
      0.018188549796056549928,  0.016970743955211611343,
      0.015729483095583598202,  0.014466482789161186242,
      0.013183488679182345987,  0.011882274089801223495,
      0.010564637623008245265,  0.0092324007841902470144,
      0.0078874057526481463821, 0.0065315136877136546011,
      0.0051666051827468083299, 0.0037945916504523496964,
      0.0024175112654431228553, 0.0010391335164519718893};
  IntegratorXX::GaussLegendre<double, double> quad(84);
  const auto& pts = quad.points();
  const auto& wgt = quad.weights();
  for(auto i = 0ul; i < 84; i++) {
    REQUIRE_THAT(pts[i], Catch::Matchers::WithinAbs(ref_pts[i], x_tolerance));
    REQUIRE_THAT(wgt[i], Catch::Matchers::WithinAbs(ref_wgt[i], w_tolerance));
  }
}

TEST_CASE("85 point GaussLegendre", "[1d-quad]") {
  std::array<double, 85> ref_pts = {-0.99960447735747845433,
                                    -0.99791660119811693315,
                                    -0.99488237429561627845,
                                    -0.99050521771641596379,
                                    -0.98479095768558049733,
                                    -0.97774728841224339193,
                                    -0.96938371192367832801,
                                    -0.95971151595718836240,
                                    -0.94874375625457895340,
                                    -0.93649523811643069969,
                                    -0.92298249609609004559,
                                    -0.90822377153909188490,
                                    -0.89223898789135590158,
                                    -0.87504972376909708764,
                                    -0.85667918380995618910,
                                    -0.83715216733708265020,
                                    -0.81649503487479161472,
                                    -0.79473567255911650545,
                                    -0.77190345449029307866,
                                    -0.74802920307743407396,
                                    -0.72314514742860102138,
                                    -0.69728487984224954765,
                                    -0.67048331045866266070,
                                    -0.64277662013251471484,
                                    -0.61420221159013699307,
                                    -0.58479865893738808571,
                                    -0.55460565558626943316,
                                    -0.52366396067056787479,
                                    -0.49201534402285131048,
                                    -0.45970252978708872076,
                                    -0.42676913874300970172,
                                    -0.39325962942005919065,
                                    -0.35921923808043804876,
                                    -0.32469391765224755745,
                                    -0.28973027569517370354,
                                    -0.25437551148245352250,
                                    -0.21867735228405901571,
                                    -0.18268398893711267388,
                                    -0.14644401079051098921,
                                    -0.11000634011157723735,
                                    -0.073420166043291125620,
                                    -0.036734878201249663520,
                                    0,
                                    0.036734878201249663520,
                                    0.073420166043291125620,
                                    0.11000634011157723735,
                                    0.14644401079051098921,
                                    0.18268398893711267388,
                                    0.21867735228405901571,
                                    0.25437551148245352250,
                                    0.28973027569517370354,
                                    0.32469391765224755745,
                                    0.35921923808043804876,
                                    0.39325962942005919065,
                                    0.42676913874300970172,
                                    0.45970252978708872076,
                                    0.49201534402285131048,
                                    0.52366396067056787479,
                                    0.55460565558626943316,
                                    0.58479865893738808571,
                                    0.61420221159013699307,
                                    0.64277662013251471484,
                                    0.67048331045866266070,
                                    0.69728487984224954765,
                                    0.72314514742860102138,
                                    0.74802920307743407396,
                                    0.77190345449029307866,
                                    0.79473567255911650545,
                                    0.81649503487479161472,
                                    0.83715216733708265020,
                                    0.85667918380995618910,
                                    0.87504972376909708764,
                                    0.89223898789135590158,
                                    0.90822377153909188490,
                                    0.92298249609609004559,
                                    0.93649523811643069969,
                                    0.94874375625457895340,
                                    0.95971151595718836240,
                                    0.96938371192367832801,
                                    0.97774728841224339193,
                                    0.98479095768558049733,
                                    0.99050521771641596379,
                                    0.99488237429561627845,
                                    0.99791660119811693315,
                                    0.99960447735747845433};
  std::array<double, 85> ref_wgt = {
      0.0010149719089677436954, 0.0023613317042850208968,
      0.0037065001257593167069, 0.0050468384269244427255,
      0.0063803985878975150987, 0.0077053559603827570799,
      0.0090199154399936312790, 0.010322300230524245894,
      0.011610751286703898010,  0.012883528856498084291,
      0.014138914548400832931,  0.015375213542389626874,
      0.016590756831154670075,  0.017783903451398170908,
      0.018953042688182840447,  0.020096596243575421742,
      0.021213020364089379672,  0.022300807922839374189,
      0.023358490452989891898,  0.024384640129435683142,
      0.025377871695866088477,  0.026336844334514359822,
      0.027260263476011164786,  0.028146882546865075846,
      0.028995504652190152090,  0.029804984191395887376,
      0.030574228404649995724,  0.031302198848020870448,
      0.031987912795304674460,  0.032630444564642178189,
      0.033228926768132769763,  0.033782551482757530331,
      0.034290571341029846708,  0.034752300539900637529,
      0.035167115766555788250,  0.035534457039855699082,
      0.035853828466280812557,  0.036124798909362460375,
      0.036347002571695203767,  0.036520139488744884857,
      0.036643975933785702486,  0.036718344733419616222,
      0.036743145493252106600,  0.036718344733419616222,
      0.036643975933785702486,  0.036520139488744884857,
      0.036347002571695203767,  0.036124798909362460375,
      0.035853828466280812557,  0.035534457039855699082,
      0.035167115766555788250,  0.034752300539900637529,
      0.034290571341029846708,  0.033782551482757530331,
      0.033228926768132769763,  0.032630444564642178189,
      0.031987912795304674460,  0.031302198848020870448,
      0.030574228404649995724,  0.029804984191395887376,
      0.028995504652190152090,  0.028146882546865075846,
      0.027260263476011164786,  0.026336844334514359822,
      0.025377871695866088477,  0.024384640129435683142,
      0.023358490452989891898,  0.022300807922839374189,
      0.021213020364089379672,  0.020096596243575421742,
      0.018953042688182840447,  0.017783903451398170908,
      0.016590756831154670075,  0.015375213542389626874,
      0.014138914548400832931,  0.012883528856498084291,
      0.011610751286703898010,  0.010322300230524245894,
      0.0090199154399936312790, 0.0077053559603827570799,
      0.0063803985878975150987, 0.0050468384269244427255,
      0.0037065001257593167069, 0.0023613317042850208968,
      0.0010149719089677436954};
  IntegratorXX::GaussLegendre<double, double> quad(85);
  const auto& pts = quad.points();
  const auto& wgt = quad.weights();
  for(auto i = 0ul; i < 85; i++) {
    REQUIRE_THAT(pts[i], Catch::Matchers::WithinAbs(ref_pts[i], x_tolerance));
    REQUIRE_THAT(wgt[i], Catch::Matchers::WithinAbs(ref_wgt[i], w_tolerance));
  }
}

TEST_CASE("86 point GaussLegendre", "[1d-quad]") {
  std::array<double, 86> ref_pts = {
      -0.99961356884132585702,  -0.99796447703524394479,
      -0.99499991748533789622,  -0.99072314074551870522,
      -0.98513970673250241361,  -0.97825696025368471662,
      -0.97008397268574013136,  -0.96063152094289844863,
      -0.94991207085221025571,  -0.93793975990989261443,
      -0.92473037832286194978,  -0.91030134804616583021,
      -0.89467169973944633438,  -0.87786204763336593734,
      -0.85989456232268495530,  -0.84079294151443305170,
      -0.82058237876616022154,  -0.79928953025366178814,
      -0.77694247961102337105,  -0.75357070088880890350,
      -0.72920501967892832290,  -0.70387757245726769480,
      -0.67762176419758851066,  -0.65047222431252623285,
      -0.62246476097975081191,  -0.59363631391349803367,
      -0.56402490564374132901,  -0.53366959136724868330,
      -0.50261040743665727450,  -0.47088831855549778358,
      -0.43854516374880909401,  -0.40562360118060039615,
      -0.37216705189093961032,  -0.33821964252687266641,
      -0.30382614714270573506,  -0.26903192814641030510,
      -0.23388287647003746374,  -0.19842535104305140281,
      -0.16270611764841171434,  -0.12677228724204825299,
      -0.090671253817080167031, -0.054450631894731206030,
      -0.018158193724385815933, 0.018158193724385815933,
      0.054450631894731206030,  0.090671253817080167031,
      0.12677228724204825299,   0.16270611764841171434,
      0.19842535104305140281,   0.23388287647003746374,
      0.26903192814641030510,   0.30382614714270573506,
      0.33821964252687266641,   0.37216705189093961032,
      0.40562360118060039615,   0.43854516374880909401,
      0.47088831855549778358,   0.50261040743665727450,
      0.53366959136724868330,   0.56402490564374132901,
      0.59363631391349803367,   0.62246476097975081191,
      0.65047222431252623285,   0.67762176419758851066,
      0.70387757245726769480,   0.72920501967892832290,
      0.75357070088880890350,   0.77694247961102337105,
      0.79928953025366178814,   0.82058237876616022154,
      0.84079294151443305170,   0.85989456232268495530,
      0.87786204763336593734,   0.89467169973944633438,
      0.91030134804616583021,   0.92473037832286194978,
      0.93793975990989261443,   0.94991207085221025571,
      0.96063152094289844863,   0.97008397268574013136,
      0.97825696025368471662,   0.98513970673250241361,
      0.99072314074551870522,   0.99499991748533789622,
      0.99796447703524394479,   0.99961356884132585702};
  std::array<double, 86> ref_wgt = {
      0.00099164326662036352562, 0.0023070874888099029260,
      0.0036214392496109014376,  0.0049311840969601036964,
      0.0062344591391401234639,  0.0075295216121945626069,
      0.0088146571019548157038,  0.010088168460386105655,
      0.011348375156177703977,   0.012593614678069697810,
      0.013822244452766670867,   0.015032643905081378685,
      0.016223216549729022588,   0.017392392075690542387,
      0.018538628406709859206,   0.019660413729562179807,
      0.020756268484909142791,   0.021824747316927627801,
      0.022864440978548006446,   0.023873978189479004973,
      0.024852027444399835918,   0.025797298768839535408,
      0.026708545420372209575,   0.027584565532851248387,
      0.028424203701493494757,   0.029226352506709944584,
      0.029989953974664932491,   0.030714000972632053183,
      0.031397538537302865559,   0.032039665134294016110,
      0.032639533847189921956,   0.033196353494551597120,
      0.033709389673417554865,   0.034177965727919904634,
      0.034601463641737692260,   0.034979324853210099371,
      0.035311050992034205081,   0.035596204536575495591,
      0.035834409390924055790,   0.036025351380935257710,
      0.036168778668600637583,   0.036264502084202387432,
      0.036312395375813338282,   0.036312395375813338282,
      0.036264502084202387432,   0.036168778668600637583,
      0.036025351380935257710,   0.035834409390924055790,
      0.035596204536575495591,   0.035311050992034205081,
      0.034979324853210099371,   0.034601463641737692260,
      0.034177965727919904634,   0.033709389673417554865,
      0.033196353494551597120,   0.032639533847189921956,
      0.032039665134294016110,   0.031397538537302865559,
      0.030714000972632053183,   0.029989953974664932491,
      0.029226352506709944584,   0.028424203701493494757,
      0.027584565532851248387,   0.026708545420372209575,
      0.025797298768839535408,   0.024852027444399835918,
      0.023873978189479004973,   0.022864440978548006446,
      0.021824747316927627801,   0.020756268484909142791,
      0.019660413729562179807,   0.018538628406709859206,
      0.017392392075690542387,   0.016223216549729022588,
      0.015032643905081378685,   0.013822244452766670867,
      0.012593614678069697810,   0.011348375156177703977,
      0.010088168460386105655,   0.0088146571019548157038,
      0.0075295216121945626069,  0.0062344591391401234639,
      0.0049311840969601036964,  0.0036214392496109014376,
      0.0023070874888099029260,  0.00099164326662036352562};
  IntegratorXX::GaussLegendre<double, double> quad(86);
  const auto& pts = quad.points();
  const auto& wgt = quad.weights();
  for(auto i = 0ul; i < 86; i++) {
    REQUIRE_THAT(pts[i], Catch::Matchers::WithinAbs(ref_pts[i], x_tolerance));
    REQUIRE_THAT(wgt[i], Catch::Matchers::WithinAbs(ref_wgt[i], w_tolerance));
  }
}

TEST_CASE("87 point GaussLegendre", "[1d-quad]") {
  std::array<double, 87> ref_pts = {
      -0.99962235043248427239,  -0.99801072156298235808,
      -0.99511345813799200595,  -0.99093365011096457052,
      -0.98547660606842036796,  -0.97874934100381627243,
      -0.97076051974728427435,  -0.96152043693607316926,
      -0.95104100138931357392,  -0.93933571997420574788,
      -0.92641967989123721995,  -0.91230952909412288438,
      -0.89702345476756936702,  -0.88058115985204184106,
      -0.86300383762970660257,  -0.84431414439703522024,
      -0.82453617025578048013,  -0.80369540805817777824,
      -0.78181872054543773635,  -0.75893430572134931574,
      -0.73507166050531379410,  -0.71026154271147290284,
      -0.68453593140282367412,  -0.65792798567134939104,
      -0.63047200189725044729,  -0.60220336954233520169,
      -0.57315852553453041187,  -0.54337490730229335344,
      -0.51289090451945225914,  -0.48174580962266680509,
      -0.44997976716528437840,  -0.41763372207286905503,
      -0.38474936686709686366,  -0.35136908792604131572,
      -0.31753591085011571433,  -0.28329344500409187319,
      -0.24868582730667713160,  -0.21375766534010160359,
      -0.17855397985304421430,  -0.14312014673100813901,
      -0.10750183850894277161,  -0.071744965501499429713,
      -0.035895616626800899473, 0,
      0.035895616626800899473,  0.071744965501499429713,
      0.10750183850894277161,   0.14312014673100813901,
      0.17855397985304421430,   0.21375766534010160359,
      0.24868582730667713160,   0.28329344500409187319,
      0.31753591085011571433,   0.35136908792604131572,
      0.38474936686709686366,   0.41763372207286905503,
      0.44997976716528437840,   0.48174580962266680509,
      0.51289090451945225914,   0.54337490730229335344,
      0.57315852553453041187,   0.60220336954233520169,
      0.63047200189725044729,   0.65792798567134939104,
      0.68453593140282367412,   0.71026154271147290284,
      0.73507166050531379410,   0.75893430572134931574,
      0.78181872054543773635,   0.80369540805817777824,
      0.82453617025578048013,   0.84431414439703522024,
      0.86300383762970660257,   0.88058115985204184106,
      0.89702345476756936702,   0.91230952909412288438,
      0.92641967989123721995,   0.93933571997420574788,
      0.95104100138931357392,   0.96152043693607316926,
      0.97076051974728427435,   0.97874934100381627243,
      0.98547660606842036796,   0.99093365011096457052,
      0.99511345813799200595,   0.99801072156298235808,
      0.99962235043248427239};
  std::array<double, 87> ref_wgt = {
      0.00096910973817707533761, 0.0022546907537528530924,
      0.0035392716553886285402,  0.0048194562385018858993,
      0.0060934620476348721301,  0.0073596236488180636608,
      0.0086163028384889518330,  0.0098618777137018267166,
      0.011094741940560719280,   0.012313306030048036542,
      0.013515999118245658082,   0.014701270887239842230,
      0.015867593518826319003,   0.017013463643001534434,
      0.018137404265354252050,   0.019237966665356558785,
      0.020313732260655569527,   0.021363314433802531594,
      0.022385360318485478214,   0.023378552542660172258,
      0.024341610926167632339,   0.025273294130557073164,
      0.026172401258933558950,   0.027037773403735807284,
      0.027868295140429205990,   0.028662895965176218389,
      0.029420551674623048249,   0.030140285686018824744,
      0.030821170295962234154,   0.031462327876150763938,
      0.032062932004589667778,   0.032622208530801443926,
      0.033139436573662023536,   0.033613949450576935584,
      0.034045135536799373455,   0.034432439053782243766,
      0.034775360785547829249,   0.035073458722151536557,
      0.035326348629410213698,   0.035533704544160593911,
      0.035695259194409433776,   0.035810804343833741757,
      0.035880191060187015878,   0.035903329907265501442,
      0.035880191060187015878,   0.035810804343833741757,
      0.035695259194409433776,   0.035533704544160593911,
      0.035326348629410213698,   0.035073458722151536557,
      0.034775360785547829249,   0.034432439053782243766,
      0.034045135536799373455,   0.033613949450576935584,
      0.033139436573662023536,   0.032622208530801443926,
      0.032062932004589667778,   0.031462327876150763938,
      0.030821170295962234154,   0.030140285686018824744,
      0.029420551674623048249,   0.028662895965176218389,
      0.027868295140429205990,   0.027037773403735807284,
      0.026172401258933558950,   0.025273294130557073164,
      0.024341610926167632339,   0.023378552542660172258,
      0.022385360318485478214,   0.021363314433802531594,
      0.020313732260655569527,   0.019237966665356558785,
      0.018137404265354252050,   0.017013463643001534434,
      0.015867593518826319003,   0.014701270887239842230,
      0.013515999118245658082,   0.012313306030048036542,
      0.011094741940560719280,   0.0098618777137018267166,
      0.0086163028384889518330,  0.0073596236488180636608,
      0.0060934620476348721301,  0.0048194562385018858993,
      0.0035392716553886285402,  0.0022546907537528530924,
      0.00096910973817707533761};
  IntegratorXX::GaussLegendre<double, double> quad(87);
  const auto& pts = quad.points();
  const auto& wgt = quad.weights();
  for(auto i = 0ul; i < 87; i++) {
    REQUIRE_THAT(pts[i], Catch::Matchers::WithinAbs(ref_pts[i], x_tolerance));
    REQUIRE_THAT(wgt[i], Catch::Matchers::WithinAbs(ref_wgt[i], w_tolerance));
  }
}

TEST_CASE("88 point GaussLegendre", "[1d-quad]") {
  std::array<double, 88> ref_pts = {
      -0.99963083605627065578,  -0.99805540805324967761,
      -0.99522317588798887078,  -0.99113707815401555511,
      -0.98580218608776355228,  -0.97922520315429670378,
      -0.97141441014132227648,  -0.96237964606377068299,
      -0.95213229346380211252,  -0.94068526330264354526,
      -0.92805297839469205558,  -0.91425135510452719134,
      -0.89929778323005705484,  -0.88321110405945058162,
      -0.86601158661378133402,  -0.84772090209820908720,
      -0.82836209659045624485,  -0.80795956199923649182,
      -0.78653900532828715748,  -0.76412741628420684197,
      -0.74075303326860777358,  -0.71644530779725048566,
      -0.69123486739088043802,  -0.66515347698445317222,
      -0.63823399890332645028,  -0.61051035145681898624,
      -0.58201746620128735758,  -0.55279124392655547280,
      -0.52286850942114375373,  -0.49228696507328672289,
      -0.46108514336619651061,  -0.42930235832742437021,
      -0.39697865599349105025,  -0.36415476395219828782,
      -0.33087204002619627511,  -0.29717242016246430559,
      -0.26309836559336260023,  -0.22869280933583131390,
      -0.19399910209614678858,  -0.15906095764839421594,
      -0.12392239775547906165,  -0.088627696702076058805,
      -0.053221325509403576522, -0.017747895902112098289,
      0.017747895902112098289,  0.053221325509403576522,
      0.088627696702076058805,  0.12392239775547906165,
      0.15906095764839421594,   0.19399910209614678858,
      0.22869280933583131390,   0.26309836559336260023,
      0.29717242016246430559,   0.33087204002619627511,
      0.36415476395219828782,   0.39697865599349105025,
      0.42930235832742437021,   0.46108514336619651061,
      0.49228696507328672289,   0.52286850942114375373,
      0.55279124392655547280,   0.58201746620128735758,
      0.61051035145681898624,   0.63823399890332645028,
      0.66515347698445317222,   0.69123486739088043802,
      0.71644530779725048566,   0.74075303326860777358,
      0.76412741628420684197,   0.78653900532828715748,
      0.80795956199923649182,   0.82836209659045624485,
      0.84772090209820908720,   0.86601158661378133402,
      0.88321110405945058162,   0.89929778323005705484,
      0.91425135510452719134,   0.92805297839469205558,
      0.94068526330264354526,   0.95213229346380211252,
      0.96237964606377068299,   0.97141441014132227648,
      0.97922520315429670378,   0.98580218608776355228,
      0.99113707815401555511,   0.99522317588798887078,
      0.99805540805324967761,   0.99963083605627065578};
  std::array<double, 88> ref_wgt = {
      0.00094733559816192726682, 0.0022040585631436966285,
      0.0034598676678627964240,  0.0047114792795986617430,
      0.0059571869961380465831,  0.0071953984597963720598,
      0.0084245474927024730151,  0.0096430833220532044008,
      0.010849469775429271259,   0.012042186439581212310,
      0.013219730313627911708,   0.014380617601299944236,
      0.015523385536933553840,   0.016646594208217656045,
      0.017748828360324074556,   0.018828699173755451395,
      0.019884846011274113244,   0.020915938130576624232,
      0.021920676359989853596,   0.022897794734781142327,
      0.023846062091859661264,   0.024764283620768733025,
      0.025651302368961947885,   0.026506000699434737721,
      0.027327301698855330836,   0.028114170534408613492,
      0.028865615757635429246,   0.029580690553619349113,
      0.030258493933943525335,   0.030898171871912197634,
      0.031498918378604892320,   0.032059976518406388069,
      0.032580639362732108686,   0.033060250880746700145,
      0.033498206765953092528,   0.033893955197610259240,
      0.034246997536020078737,   0.034556888950807084135,
      0.034823238981399354993,   0.035045712029004261397,
      0.035224027779459108533,   0.035357961556423843794,
      0.035447344604470769706,   0.035492064301714545296,
      0.035492064301714545296,   0.035447344604470769706,
      0.035357961556423843794,   0.035224027779459108533,
      0.035045712029004261397,   0.034823238981399354993,
      0.034556888950807084135,   0.034246997536020078737,
      0.033893955197610259240,   0.033498206765953092528,
      0.033060250880746700145,   0.032580639362732108686,
      0.032059976518406388069,   0.031498918378604892320,
      0.030898171871912197634,   0.030258493933943525335,
      0.029580690553619349113,   0.028865615757635429246,
      0.028114170534408613492,   0.027327301698855330836,
      0.026506000699434737721,   0.025651302368961947885,
      0.024764283620768733025,   0.023846062091859661264,
      0.022897794734781142327,   0.021920676359989853596,
      0.020915938130576624232,   0.019884846011274113244,
      0.018828699173755451395,   0.017748828360324074556,
      0.016646594208217656045,   0.015523385536933553840,
      0.014380617601299944236,   0.013219730313627911708,
      0.012042186439581212310,   0.010849469775429271259,
      0.0096430833220532044008,  0.0084245474927024730151,
      0.0071953984597963720598,  0.0059571869961380465831,
      0.0047114792795986617430,  0.0034598676678627964240,
      0.0022040585631436966285,  0.00094733559816192726682};
  IntegratorXX::GaussLegendre<double, double> quad(88);
  const auto& pts = quad.points();
  const auto& wgt = quad.weights();
  for(auto i = 0ul; i < 88; i++) {
    REQUIRE_THAT(pts[i], Catch::Matchers::WithinAbs(ref_pts[i], x_tolerance));
    REQUIRE_THAT(wgt[i], Catch::Matchers::WithinAbs(ref_wgt[i], w_tolerance));
  }
}

TEST_CASE("89 point GaussLegendre", "[1d-quad]") {
  std::array<double, 89> ref_pts = {-0.99963903886453345958,
                                    -0.99809860571027392948,
                                    -0.99532924040674976033,
                                    -0.99133373880866530067,
                                    -0.98611694786110367400,
                                    -0.97968527658387664113,
                                    -0.97204664274890935970,
                                    -0.96321045465653544185,
                                    -0.95318759729284094058,
                                    -0.94199041817021491907,
                                    -0.92963271182371860337,
                                    -0.91612970268882343121,
                                    -0.90149802628399775209,
                                    -0.88575570868446994828,
                                    -0.86892214429708371925,
                                    -0.85101807195667744688,
                                    -0.83206554937007912711,
                                    -0.81208792593748603024,
                                    -0.79110981398379337146,
                                    -0.76915705843480110033,
                                    -0.74625670497536000938,
                                    -0.72243696672850824337,
                                    -0.69772718949653990589,
                                    -0.67215781560675955082,
                                    -0.64576034640641984872,
                                    -0.61856730345301912070,
                                    -0.59061218844775239304,
                                    -0.56192944196146430493,
                                    -0.53255440100394395697,
                                    -0.50252325548882955145,
                                    -0.47187300364775316379,
                                    -0.44064140644865181860,
                                    -0.40886694107439881870,
                                    -0.37658875351906760388,
                                    -0.34384661036022795248,
                                    -0.31068084976668979974,
                                    -0.27713233180205211795,
                                    -0.24324238808528204959,
                                    -0.20905277087034175587,
                                    -0.17460560160759627408,
                                    -0.13994331905037419667,
                                    -0.10510862697061341170,
                                    -0.070144441548005792133,
                                    -0.035093838497457001385,
                                    0,
                                    0.035093838497457001385,
                                    0.070144441548005792133,
                                    0.10510862697061341170,
                                    0.13994331905037419667,
                                    0.17460560160759627408,
                                    0.20905277087034175587,
                                    0.24324238808528204959,
                                    0.27713233180205211795,
                                    0.31068084976668979974,
                                    0.34384661036022795248,
                                    0.37658875351906760388,
                                    0.40886694107439881870,
                                    0.44064140644865181860,
                                    0.47187300364775316379,
                                    0.50252325548882955145,
                                    0.53255440100394395697,
                                    0.56192944196146430493,
                                    0.59061218844775239304,
                                    0.61856730345301912070,
                                    0.64576034640641984872,
                                    0.67215781560675955082,
                                    0.69772718949653990589,
                                    0.72243696672850824337,
                                    0.74625670497536000938,
                                    0.76915705843480110033,
                                    0.79110981398379337146,
                                    0.81208792593748603024,
                                    0.83206554937007912711,
                                    0.85101807195667744688,
                                    0.86892214429708371925,
                                    0.88575570868446994828,
                                    0.90149802628399775209,
                                    0.91612970268882343121,
                                    0.92963271182371860337,
                                    0.94199041817021491907,
                                    0.95318759729284094058,
                                    0.96321045465653544185,
                                    0.97204664274890935970,
                                    0.97968527658387664113,
                                    0.98611694786110367400,
                                    0.99133373880866530067,
                                    0.99532924040674976033,
                                    0.99809860571027392948,
                                    0.99963903886453345958};
  std::array<double, 89> ref_wgt = {
      0.00092628710519347281553, 0.0021551125822191137646,
      0.0033831047924074551326,  0.0046070873434632414330,
      0.0058254257887701074596,  0.0070365968709891141374,
      0.0082391025253890787306,  0.0094314592607978905397,
      0.010612197289972188033,   0.011779861580874892177,
      0.012933013392602677292,   0.014070231948644482814,
      0.015190116144666123397,   0.016291286254792384578,
      0.017372385621502401670,   0.018432082321784115676,
      0.019469070805151873139,   0.020482073500400270212,
      0.021469842388561140843,   0.022431160539836367128,
      0.023364843612455445827,   0.024269741311522339274,
      0.025144738806002568623,   0.025988758102073836251,
      0.026800759371129177713,   0.027579742230784582533,
      0.028324746977305207228,   0.029034855767926811830,
      0.029709193751612459627,   0.030346930146849129343,
      0.030947279265154844789,   0.031509501479034283659,
      0.032032904133189585507,   0.032516842397863206968,
      0.032960720063261117074,   0.033363990274077320940,
      0.033726156203214570706,   0.034046771663871087167,
      0.034325441659239087818,   0.034561822869137808136,
      0.034755624072981420921,   0.034906606508560709891,
      0.035014584166196443369,   0.035079424017902025317,
      0.035101046181273077032,   0.035079424017902025317,
      0.035014584166196443369,   0.034906606508560709891,
      0.034755624072981420921,   0.034561822869137808136,
      0.034325441659239087818,   0.034046771663871087167,
      0.033726156203214570706,   0.033363990274077320940,
      0.032960720063261117074,   0.032516842397863206968,
      0.032032904133189585507,   0.031509501479034283659,
      0.030947279265154844789,   0.030346930146849129343,
      0.029709193751612459627,   0.029034855767926811830,
      0.028324746977305207228,   0.027579742230784582533,
      0.026800759371129177713,   0.025988758102073836251,
      0.025144738806002568623,   0.024269741311522339274,
      0.023364843612455445827,   0.022431160539836367128,
      0.021469842388561140843,   0.020482073500400270212,
      0.019469070805151873139,   0.018432082321784115676,
      0.017372385621502401670,   0.016291286254792384578,
      0.015190116144666123397,   0.014070231948644482814,
      0.012933013392602677292,   0.011779861580874892177,
      0.010612197289972188033,   0.0094314592607978905397,
      0.0082391025253890787306,  0.0070365968709891141374,
      0.0058254257887701074596,  0.0046070873434632414330,
      0.0033831047924074551326,  0.0021551125822191137646,
      0.00092628710519347281553};
  IntegratorXX::GaussLegendre<double, double> quad(89);
  const auto& pts = quad.points();
  const auto& wgt = quad.weights();
  for(auto i = 0ul; i < 89; i++) {
    REQUIRE_THAT(pts[i], Catch::Matchers::WithinAbs(ref_pts[i], x_tolerance));
    REQUIRE_THAT(wgt[i], Catch::Matchers::WithinAbs(ref_wgt[i], w_tolerance));
  }
}

TEST_CASE("90 point GaussLegendre", "[1d-quad]") {
  std::array<double, 90> ref_pts = {
      -0.99964697128663843746,  -0.99814037993856815356,
      -0.99543181205834466393,  -0.99152392881106278613,
      -0.98642136505783284873,  -0.98013025134514838546,
      -0.97265816209019314000,  -0.96401409817150548339,
      -0.95420847388150033616,  -0.94325310364535776815,
      -0.93116118750043200701,  -0.91794729506658638337,
      -0.90362734793130269387,  -0.88821860043474598130,
      -0.87173961886290343447,  -0.85421025906707188229,
      -0.83565164253337704556,  -0.81608613092948105644,
      -0.79553729915824813486,  -0.77402990695033424681,
      -0.75158986902963846818,  -0.72824422388739036363,
      -0.70402110120239114356,  -0.67894968794659714618,
      -0.65306019321684219196,  -0.62638381183504512676,
      -0.59895268676074218589,  -0.57079987036122097871,
      -0.54195928458591342619,  -0.51246568009302797099,
      -0.48235459437766569252,  -0.45166230895186936758,
      -0.42042580562819775610,  -0.38868272195949820678,
      -0.35647130588856784613,  -0.32383036966234596651,
      -0.29079924306616665155,  -0.25741772603442012992,
      -0.22372604069472285927,  -0.18976478290337901902,
      -0.15557487333052911951,  -0.12119750815392408297,
      -0.086674109420734770085, -0.052046275137206949059,
      -0.017355729146299652461, 0.017355729146299652461,
      0.052046275137206949059,  0.086674109420734770085,
      0.12119750815392408297,   0.15557487333052911951,
      0.18976478290337901902,   0.22372604069472285927,
      0.25741772603442012992,   0.29079924306616665155,
      0.32383036966234596651,   0.35647130588856784613,
      0.38868272195949820678,   0.42042580562819775610,
      0.45166230895186936758,   0.48235459437766569252,
      0.51246568009302797099,   0.54195928458591342619,
      0.57079987036122097871,   0.59895268676074218589,
      0.62638381183504512676,   0.65306019321684219196,
      0.67894968794659714618,   0.70402110120239114356,
      0.72824422388739036363,   0.75158986902963846818,
      0.77402990695033424681,   0.79553729915824813486,
      0.81608613092948105644,   0.83565164253337704556,
      0.85421025906707188229,   0.87173961886290343447,
      0.88821860043474598130,   0.90362734793130269387,
      0.91794729506658638337,   0.93116118750043200701,
      0.94325310364535776815,   0.95420847388150033616,
      0.96401409817150548339,   0.97265816209019314000,
      0.98013025134514838546,   0.98642136505783284873,
      0.99152392881106278613,   0.99543181205834466393,
      0.99814037993856815356,   0.99964697128663843746};
  std::array<double, 90> ref_wgt = {
      0.00090593237121483309376, 0.0021077787745263298915,
      0.0033088672433360181954,  0.0045061236136749778641,
      0.0056979815607473526009,  0.0068829832084632843147,
      0.0080596949446200156587,  0.0092266969577419909403,
      0.010382582309893214614,   0.011525957889148058851,
      0.012655445837168128869,   0.013769685112337093431,
      0.014867333088043324050,   0.015947067151006639013,
      0.017007586285222675709,   0.018047612634460236164,
      0.019065893039137318425,   0.020061200544639595965,
      0.021032335878722563117,   0.021978128895934133839,
      0.022897439987163184635,   0.023789161452528723210,
      0.024652218835904852936,   0.025485572219443228484,
      0.026288217476514587362,   0.027059187481547958522,
      0.027797553275302275158,   0.028502425184161416319,
      0.029172953892100742487,   0.029808331464031275487,
      0.030407792319286952690,   0.030970614154080920946,
      0.031496118811818636077,   0.031983673100218576039,
      0.032432689554255616912,   0.032842627144007504579,
      0.033212991926551316514,   0.033543337641124276683,
      0.033833266246831687258,   0.034082428402253995464,
      0.034290523886375041932,   0.034457301960324256175,
      0.034582561669496891418,   0.034666152085688240188,
      0.034707972488950057920,   0.034707972488950057920,
      0.034666152085688240188,   0.034582561669496891418,
      0.034457301960324256175,   0.034290523886375041932,
      0.034082428402253995464,   0.033833266246831687258,
      0.033543337641124276683,   0.033212991926551316514,
      0.032842627144007504579,   0.032432689554255616912,
      0.031983673100218576039,   0.031496118811818636077,
      0.030970614154080920946,   0.030407792319286952690,
      0.029808331464031275487,   0.029172953892100742487,
      0.028502425184161416319,   0.027797553275302275158,
      0.027059187481547958522,   0.026288217476514587362,
      0.025485572219443228484,   0.024652218835904852936,
      0.023789161452528723210,   0.022897439987163184635,
      0.021978128895934133839,   0.021032335878722563117,
      0.020061200544639595965,   0.019065893039137318425,
      0.018047612634460236164,   0.017007586285222675709,
      0.015947067151006639013,   0.014867333088043324050,
      0.013769685112337093431,   0.012655445837168128869,
      0.011525957889148058851,   0.010382582309893214614,
      0.0092266969577419909403,  0.0080596949446200156587,
      0.0068829832084632843147,  0.0056979815607473526009,
      0.0045061236136749778641,  0.0033088672433360181954,
      0.0021077787745263298915,  0.00090593237121483309376};
  IntegratorXX::GaussLegendre<double, double> quad(90);
  const auto& pts = quad.points();
  const auto& wgt = quad.weights();
  for(auto i = 0ul; i < 90; i++) {
    REQUIRE_THAT(pts[i], Catch::Matchers::WithinAbs(ref_pts[i], x_tolerance));
    REQUIRE_THAT(wgt[i], Catch::Matchers::WithinAbs(ref_wgt[i], w_tolerance));
  }
}

TEST_CASE("91 point GaussLegendre", "[1d-quad]") {
  std::array<double, 91> ref_pts = {
      -0.99965464507657613038,  -0.99818079259053475467,
      -0.99553104250535245369,  -0.99170792881727710157,
      -0.98671588572346978691,  -0.98056078024121343904,
      -0.97324986183069073432,  -0.96479174574727607578,
      -0.95519640073227636387,  -0.94447513654571866806,
      -0.93264059035626440661,  -0.91970671172345048814,
      -0.90568874609657186500,  -0.89060321681439740379,
      -0.87446790561223038589,  -0.85730183165264257908,
      -0.83912522910138703180,  -0.81995952327328033398,
      -0.79982730537529224065,  -0.77875230587612234469,
      -0.75675936653336928859,  -0.73387441111109478225,
      -0.71012441482219387174,  -0.68553737253152465515,
      -0.66014226575723479019,  -0.63396902850915328150,
      -0.60704851200449605278,  -0.57941244830246313233,
      -0.55109341290058355984,  -0.52212478633689058847,
      -0.49254071484318341756,  -0.46237607009575145164,
      -0.43166640811100180319,  -0.40044792733443930503,
      -0.36875742597239956286,  -0.33663225861682849101,
      -0.30411029221423531846,  -0.27122986143071926939,
      -0.23802972346568211899,  -0.20454901236748877366,
      -0.17082719290492516722,  -0.13690401404882641602,
      -0.10281946211870772192,  -0.068613713649625415750,
      -0.034327088034825330847, 0,
      0.034327088034825330847,  0.068613713649625415750,
      0.10281946211870772192,   0.13690401404882641602,
      0.17082719290492516722,   0.20454901236748877366,
      0.23802972346568211899,   0.27122986143071926939,
      0.30411029221423531846,   0.33663225861682849101,
      0.36875742597239956286,   0.40044792733443930503,
      0.43166640811100180319,   0.46237607009575145164,
      0.49254071484318341756,   0.52212478633689058847,
      0.55109341290058355984,   0.57941244830246313233,
      0.60704851200449605278,   0.63396902850915328150,
      0.66014226575723479019,   0.68553737253152465515,
      0.71012441482219387174,   0.73387441111109478225,
      0.75675936653336928859,   0.77875230587612234469,
      0.79982730537529224065,   0.81995952327328033398,
      0.83912522910138703180,   0.85730183165264257908,
      0.87446790561223038589,   0.89060321681439740379,
      0.90568874609657186500,   0.91970671172345048814,
      0.93264059035626440661,   0.94447513654571866806,
      0.95519640073227636387,   0.96479174574727607578,
      0.97324986183069073432,   0.98056078024121343904,
      0.98671588572346978691,   0.99170792881727710157,
      0.99553104250535245369,   0.99818079259053475467,
      0.99965464507657613038};
  std::array<double, 91> ref_wgt = {
      0.00088624124066941417661, 0.0020619871220322296607,
      0.0032370455079721049771,  0.0044084397473026768191,
      0.0055746680474797889978,  0.0067343344322688846653,
      0.0078860663146289015996,  0.0090285041892344877489,
      0.010160300654415476729,   0.011280121273769682983,
      0.012386645903556743055,   0.013478570153830979194,
      0.014554606885208696085,   0.015613487707050059751,
      0.016653964463061240172,   0.017674810697521905060,
      0.018674823098168125422,   0.019652822912969146605,
      0.020607657338598460740,   0.021538200878685666296,
      0.022443356670097373373,   0.023322057775598802836,
      0.024173268441322879422,   0.024995985317534957433,
      0.025789238641236016189,   0.026552093379198908103,
      0.027283650330082980279,   0.027983047184323166381,
      0.028649459540541024396,   0.029282101877277479718,
      0.029880228478900374933,   0.030443134314594394903,
      0.030970155869396544216,   0.031460671926297088545,
      0.031914104298483697289,   0.032329918510865394484,
      0.032707624430072782948,   0.033046776842191791200,
      0.033346975977549838637,   0.033607867981935753110,
      0.033829145333697935794,   0.034010547206229078665,
      0.034151859775410126186,   0.034252916471651060067,
      0.034313598176231398572,   0.034333833361708963163,
      0.034313598176231398572,   0.034252916471651060067,
      0.034151859775410126186,   0.034010547206229078665,
      0.033829145333697935794,   0.033607867981935753110,
      0.033346975977549838637,   0.033046776842191791200,
      0.032707624430072782948,   0.032329918510865394484,
      0.031914104298483697289,   0.031460671926297088545,
      0.030970155869396544216,   0.030443134314594394903,
      0.029880228478900374933,   0.029282101877277479718,
      0.028649459540541024396,   0.027983047184323166381,
      0.027283650330082980279,   0.026552093379198908103,
      0.025789238641236016189,   0.024995985317534957433,
      0.024173268441322879422,   0.023322057775598802836,
      0.022443356670097373373,   0.021538200878685666296,
      0.020607657338598460740,   0.019652822912969146605,
      0.018674823098168125422,   0.017674810697521905060,
      0.016653964463061240172,   0.015613487707050059751,
      0.014554606885208696085,   0.013478570153830979194,
      0.012386645903556743055,   0.011280121273769682983,
      0.010160300654415476729,   0.0090285041892344877489,
      0.0078860663146289015996,  0.0067343344322688846653,
      0.0055746680474797889978,  0.0044084397473026768191,
      0.0032370455079721049771,  0.0020619871220322296607,
      0.00088624124066941417661};
  IntegratorXX::GaussLegendre<double, double> quad(91);
  const auto& pts = quad.points();
  const auto& wgt = quad.weights();
  for(auto i = 0ul; i < 91; i++) {
    REQUIRE_THAT(pts[i], Catch::Matchers::WithinAbs(ref_pts[i], x_tolerance));
    REQUIRE_THAT(wgt[i], Catch::Matchers::WithinAbs(ref_wgt[i], w_tolerance));
  }
}

TEST_CASE("92 point GaussLegendre", "[1d-quad]") {
  std::array<double, 92> ref_pts = {
      -0.99966207135652455445,  -0.99821990219545015378,
      -0.99562707526921516912,  -0.99188600443725347862,
      -0.98700093392401204090,  -0.98097748121015402737,
      -0.97382258802694193473,  -0.96554450442159590136,
      -0.95615277713400694660,  -0.94565823788436295654,
      -0.93407299060709549823,  -0.92141039737107605464,
      -0.90768506291092504361,  -0.89291281775277620423,
      -0.87711069993956966962,  -0.86029693537044688298,
      -0.84249091677378094041,  -0.82371318133648876436,
      -0.80398538701456643767,  -0.78333028755168997920,
      -0.76177170623441627571,  -0.73933450841408803777,
      -0.71604457282703320240,  -0.69192876174607303910,
      -0.66701488999772407761,  -0.64133169288080149284,
      -0.61490879302340772015,  -0.58777666621652037269,
      -0.55996660626357776623,  -0.53151068888659787843,
      -0.50244173473045651389,  -0.47279327150799183510,
      -0.44259949532959423168,  -0.41189523126188170860,
      -0.38071589316095056990,  -0.34909744282652818379,
      -0.31707634852413810715,  -0.28468954292311694309,
      -0.25197438049899618044,  -0.21896859444938015245,
      -0.18571025317301245070,  -0.15223771636222699644,
      -0.11858959075942592947,  -0.084804685628614012678,
      -0.050921967993347923430, -0.016980517692728234384,
      0.016980517692728234384,  0.050921967993347923430,
      0.084804685628614012678,  0.11858959075942592947,
      0.15223771636222699644,   0.18571025317301245070,
      0.21896859444938015245,   0.25197438049899618044,
      0.28468954292311694309,   0.31707634852413810715,
      0.34909744282652818379,   0.38071589316095056990,
      0.41189523126188170860,   0.44259949532959423168,
      0.47279327150799183510,   0.50244173473045651389,
      0.53151068888659787843,   0.55996660626357776623,
      0.58777666621652037269,   0.61490879302340772015,
      0.64133169288080149284,   0.66701488999772407761,
      0.69192876174607303910,   0.71604457282703320240,
      0.73933450841408803777,   0.76177170623441627571,
      0.78333028755168997920,   0.80398538701456643767,
      0.82371318133648876436,   0.84249091677378094041,
      0.86029693537044688298,   0.87711069993956966962,
      0.89291281775277620423,   0.90768506291092504361,
      0.92141039737107605464,   0.93407299060709549823,
      0.94565823788436295654,   0.95615277713400694660,
      0.96554450442159590136,   0.97382258802694193473,
      0.98097748121015402737,   0.98700093392401204090,
      0.99188600443725347862,   0.99562707526921516912,
      0.99821990219545015378,   0.99966207135652455445};
  std::array<double, 92> ref_wgt = {
      0.00086718517876714213536, 0.0020176713662628385919,
      0.0031675359433960978743,  0.0043138953318617004723,
      0.0054553089080008709872,  0.0065904393342148952232,
      0.0077179718373735685045,  0.0088366040564678773746,
      0.0099450450197260820418,  0.011042015922635394224,
      0.012126251362637710529,   0.013196500705711138029,
      0.014251529488953925266,   0.015290120825796501507,
      0.016311076800255958005,   0.017313219843689776361,
      0.018295394090267557291,   0.019256466708559474712,
      0.020195329207187483750,   0.021110898712762461810,
      0.022002119218485857399,   0.022867962801892542404,
      0.023707430810281912394,   0.024519555012440974257,
      0.025303398715313225698,   0.026058057844314179222,
      0.026782661986040323300,   0.027476375392164173395,
      0.028138397943354404514,   0.028767966072107175822,
      0.029364353643422812613,   0.029926872792311073308,
      0.030454874717158320981,   0.030947750428041031668,
      0.031404931449122177916,   0.031825890474320085826,
      0.032210141975493329536,   0.032557242762440045243,
      0.032866792494065660326,   0.033138434140129381823,
      0.033371854393036810308,   0.033566784029203676310,
      0.033722998219573871694,   0.033840316788933601891,
      0.033918604423722549495,   0.033957770828102347967,
      0.033957770828102347967,   0.033918604423722549495,
      0.033840316788933601891,   0.033722998219573871694,
      0.033566784029203676310,   0.033371854393036810308,
      0.033138434140129381823,   0.032866792494065660326,
      0.032557242762440045243,   0.032210141975493329536,
      0.031825890474320085826,   0.031404931449122177916,
      0.030947750428041031668,   0.030454874717158320981,
      0.029926872792311073308,   0.029364353643422812613,
      0.028767966072107175822,   0.028138397943354404514,
      0.027476375392164173395,   0.026782661986040323300,
      0.026058057844314179222,   0.025303398715313225698,
      0.024519555012440974257,   0.023707430810281912394,
      0.022867962801892542404,   0.022002119218485857399,
      0.021110898712762461810,   0.020195329207187483750,
      0.019256466708559474712,   0.018295394090267557291,
      0.017313219843689776361,   0.016311076800255958005,
      0.015290120825796501507,   0.014251529488953925266,
      0.013196500705711138029,   0.012126251362637710529,
      0.011042015922635394224,   0.0099450450197260820418,
      0.0088366040564678773746,  0.0077179718373735685045,
      0.0065904393342148952232,  0.0054553089080008709872,
      0.0043138953318617004723,  0.0031675359433960978743,
      0.0020176713662628385919,  0.00086718517876714213536};
  IntegratorXX::GaussLegendre<double, double> quad(92);
  const auto& pts = quad.points();
  const auto& wgt = quad.weights();
  for(auto i = 0ul; i < 92; i++) {
    REQUIRE_THAT(pts[i], Catch::Matchers::WithinAbs(ref_pts[i], x_tolerance));
    REQUIRE_THAT(wgt[i], Catch::Matchers::WithinAbs(ref_wgt[i], w_tolerance));
  }
}

TEST_CASE("93 point GaussLegendre", "[1d-quad]") {
  std::array<double, 93> ref_pts = {-0.99966926065716868833,
                                    -0.99825776417141277575,
                                    -0.99572004624895017938,
                                    -0.99205840719206274116,
                                    -0.98727691126857226593,
                                    -0.98138093953350160677,
                                    -0.97437714213341045698,
                                    -0.96627342304005912562,
                                    -0.95707892906512335223,
                                    -0.94680403884847545445,
                                    -0.93546035087518925137,
                                    -0.92306067026585348439,
                                    -0.90961899426567644570,
                                    -0.89515049641499902749,
                                    -0.87967150940500296214,
                                    -0.86319950663160171512,
                                    -0.84575308246526130295,
                                    -0.82735193125745191635,
                                    -0.80801682510658657865,
                                    -0.78776959040807520120,
                                    -0.76663308321469295940,
                                    -0.74463116343491446018,
                                    -0.72178866789823965091,
                                    -0.69813138231785340915,
                                    -0.67368601218222791557,
                                    -0.64848015260849989338,
                                    -0.62254225719163563272,
                                    -0.59590160588453604434,
                                    -0.56858827194533168333,
                                    -0.54063308798917321727,
                                    -0.51206761118283542735,
                                    -0.48292408762142165745,
                                    -0.45323541592737974593,
                                    -0.42303511011291896021,
                                    -0.39235726174774938730,
                                    -0.36123650147484972774,
                                    -0.32970795991770564279,
                                    -0.29780722802314790902,
                                    -0.26557031688455688101,
                                    -0.23303361709078644364,
                                    -0.20023385764669609657,
                                    -0.16720806451166345667,
                                    -0.13399351880288074673,
                                    -0.10062771471061727803,
                                    -0.067148317172955104388,
                                    -0.033593119357776561271,
                                    0,
                                    0.033593119357776561271,
                                    0.067148317172955104388,
                                    0.10062771471061727803,
                                    0.13399351880288074673,
                                    0.16720806451166345667,
                                    0.20023385764669609657,
                                    0.23303361709078644364,
                                    0.26557031688455688101,
                                    0.29780722802314790902,
                                    0.32970795991770564279,
                                    0.36123650147484972774,
                                    0.39235726174774938730,
                                    0.42303511011291896021,
                                    0.45323541592737974593,
                                    0.48292408762142165745,
                                    0.51206761118283542735,
                                    0.54063308798917321727,
                                    0.56858827194533168333,
                                    0.59590160588453604434,
                                    0.62254225719163563272,
                                    0.64848015260849989338,
                                    0.67368601218222791557,
                                    0.69813138231785340915,
                                    0.72178866789823965091,
                                    0.74463116343491446018,
                                    0.76663308321469295940,
                                    0.78776959040807520120,
                                    0.80801682510658657865,
                                    0.82735193125745191635,
                                    0.84575308246526130295,
                                    0.86319950663160171512,
                                    0.87967150940500296214,
                                    0.89515049641499902749,
                                    0.90961899426567644570,
                                    0.92306067026585348439,
                                    0.93546035087518925137,
                                    0.94680403884847545445,
                                    0.95707892906512335223,
                                    0.96627342304005912562,
                                    0.97437714213341045698,
                                    0.98138093953350160677,
                                    0.98727691126857226593,
                                    0.99205840719206274116,
                                    0.99572004624895017938,
                                    0.99825776417141277575,
                                    0.99966926065716868833};
  std::array<double, 93> ref_wgt = {
      0.00084873716806791100487, 0.0019747687686868083889,
      0.0031002404030993167755,  0.0042223573824066079986,
      0.0053397370981692146138,  0.0064510977943112758891,
      0.0075551795007698207516,  0.0086507340354286483141,
      0.0097365239418876878269,  0.010811323190542489382,
      0.011873918327447125099,   0.012923109753185350456,
      0.013957713038007970724,   0.014976560240671880954,
      0.015978501217782116788,   0.016962404917329010901,
      0.017927160652813713179,   0.018871679355508034614,
      0.019794894802927928668,   0.020695764821868734489,
      0.021573272464499818015,   0.022426427156109571889,
      0.023254265813157751690,   0.024055853930344656153,
      0.024830286635452581892,   0.025576689710757838922,
      0.026294220579853274752,   0.026982069258762733049,
      0.027639459270270719713,   0.028265648520433064357,
      0.028859930136277706363,   0.029421633263748977486,
      0.029950123824993924166,   0.030444805234135309496,
      0.030905119070722935909,   0.031330545710102801926,
      0.031720604909992308833,   0.032074856352599219582,
      0.032392900141672292706,   0.032674377253922415755,
      0.032918969944304591132,   0.033126402104703225973,
      0.033296439575615789345,   0.033428890410482966294,
      0.033523605092366899732,   0.033580476702732908204,
      0.033599441042144139694,   0.033580476702732908204,
      0.033523605092366899732,   0.033428890410482966294,
      0.033296439575615789345,   0.033126402104703225973,
      0.032918969944304591132,   0.032674377253922415755,
      0.032392900141672292706,   0.032074856352599219582,
      0.031720604909992308833,   0.031330545710102801926,
      0.030905119070722935909,   0.030444805234135309496,
      0.029950123824993924166,   0.029421633263748977486,
      0.028859930136277706363,   0.028265648520433064357,
      0.027639459270270719713,   0.026982069258762733049,
      0.026294220579853274752,   0.025576689710757838922,
      0.024830286635452581892,   0.024055853930344656153,
      0.023254265813157751690,   0.022426427156109571889,
      0.021573272464499818015,   0.020695764821868734489,
      0.019794894802927928668,   0.018871679355508034614,
      0.017927160652813713179,   0.016962404917329010901,
      0.015978501217782116788,   0.014976560240671880954,
      0.013957713038007970724,   0.012923109753185350456,
      0.011873918327447125099,   0.010811323190542489382,
      0.0097365239418876878269,  0.0086507340354286483141,
      0.0075551795007698207516,  0.0064510977943112758891,
      0.0053397370981692146138,  0.0042223573824066079986,
      0.0031002404030993167755,  0.0019747687686868083889,
      0.00084873716806791100487};
  IntegratorXX::GaussLegendre<double, double> quad(93);
  const auto& pts = quad.points();
  const auto& wgt = quad.weights();
  for(auto i = 0ul; i < 93; i++) {
    REQUIRE_THAT(pts[i], Catch::Matchers::WithinAbs(ref_pts[i], x_tolerance));
    REQUIRE_THAT(wgt[i], Catch::Matchers::WithinAbs(ref_wgt[i], w_tolerance));
  }
}

TEST_CASE("94 point GaussLegendre", "[1d-quad]") {
  std::array<double, 94> ref_pts = {
      -0.99967622295504979448,  -0.99829443102168760624,
      -0.99581008420171887942,  -0.99222537540087665845,
      -0.98754419832047978868,  -0.98177170988337822972,
      -0.97491428379046504260,  -0.96697949588134338894,
      -0.95797611374295502399,  -0.94791408634876172290,
      -0.93680453280282537821,  -0.92465972993795147469,
      -0.91149309869405748596,  -0.89731918925876799258,
      -0.88215366497287226077,  -0.86601328501219867328,
      -0.84891588586203340015,  -0.83088036160301737798,
      -0.81192664302948288315,  -0.79207567562284516570,
      -0.77134939640412369939,  -0.74977070969101351722,
      -0.72736346178619905939,  -0.70415241462482024145,
      -0.68016321841017262103,  -0.65542238326785525544,
      -0.62995724994967319013,  -0.60379595961965722273,
      -0.57696742275558162059,  -0.54950128720034039976,
      -0.52142790539848394098,  -0.49277830085411935404,
      -0.46358413384723927899,  -0.43387766644636389340,
      -0.40369172685615894505,  -0.37305967313942783981,
      -0.34201535635356740583,  -0.31059308314222418645,
      -0.27882757782349028604,  -0.24675394401653425156,
      -0.21440762584907261054,  -0.18182436878855094598,
      -0.14904018014031926153,  -0.11609128925645442150,
      -0.083014107499202232825, -0.049845188003282920430,
      -0.016621185281526033776, 0.016621185281526033776,
      0.049845188003282920430,  0.083014107499202232825,
      0.11609128925645442150,   0.14904018014031926153,
      0.18182436878855094598,   0.21440762584907261054,
      0.24675394401653425156,   0.27882757782349028604,
      0.31059308314222418645,   0.34201535635356740583,
      0.37305967313942783981,   0.40369172685615894505,
      0.43387766644636389340,   0.46358413384723927899,
      0.49277830085411935404,   0.52142790539848394098,
      0.54950128720034039976,   0.57696742275558162059,
      0.60379595961965722273,   0.62995724994967319013,
      0.65542238326785525544,   0.68016321841017262103,
      0.70415241462482024145,   0.72736346178619905939,
      0.74977070969101351722,   0.77134939640412369939,
      0.79207567562284516570,   0.81192664302948288315,
      0.83088036160301737798,   0.84891588586203340015,
      0.86601328501219867328,   0.88215366497287226077,
      0.89731918925876799258,   0.91149309869405748596,
      0.92465972993795147469,   0.93680453280282537821,
      0.94791408634876172290,   0.95797611374295502399,
      0.96697949588134338894,   0.97491428379046504260,
      0.98177170988337822972,   0.98754419832047978868,
      0.99222537540087665845,   0.99581008420171887942,
      0.99829443102168760624,   0.99967622295504979448};
  std::array<double, 94> ref_wgt = {
      0.00083087161268216249463, 0.0019332198887254189431,
      0.0030350658910386280274,  0.0041336998754077764833,
      0.0052277942895077675453,  0.0063161200910364482231,
      0.0073974692881423562009,  0.0084706450945346359999,
      0.0095344608328651582501,  0.010587740564954122237,
      0.011629320161122414596,   0.012658048497638994445,
      0.013672788690606878506,   0.014672419334499464204,
      0.015655835732515557860,   0.016621951112665496638,
      0.017569697826143251999,   0.018498028525665910954,
      0.019405917321982004886,   0.020292360917011132180,
      0.021156379712221389815,   0.021997018890940077173,
      0.022813349473355236410,   0.023604469343014382281,
      0.024369504243668988306,   0.025107608745352405129,
      0.025817967178616728164,   0.026499794535891699197,
      0.027152337338966564724,   0.027774874471634220621,
      0.028366717976576106813,   0.028927213815606255842,
      0.029455742592433676397,   0.029951720237143869200,
      0.030414598651642712203,   0.030843866315349187411,
      0.031239048850467417882,   0.031599709546213200465,
      0.031925449841415613926,   0.032215909764960307113,
      0.032470768333587679484,   0.032689743906606307153,
      0.032872594497129590726,   0.033019118039491655077,
      0.033129152612546963216,   0.033202576618606863799,
      0.033239308917815320801,   0.033239308917815320801,
      0.033202576618606863799,   0.033129152612546963216,
      0.033019118039491655077,   0.032872594497129590726,
      0.032689743906606307153,   0.032470768333587679484,
      0.032215909764960307113,   0.031925449841415613926,
      0.031599709546213200465,   0.031239048850467417882,
      0.030843866315349187411,   0.030414598651642712203,
      0.029951720237143869200,   0.029455742592433676397,
      0.028927213815606255842,   0.028366717976576106813,
      0.027774874471634220621,   0.027152337338966564724,
      0.026499794535891699197,   0.025817967178616728164,
      0.025107608745352405129,   0.024369504243668988306,
      0.023604469343014382281,   0.022813349473355236410,
      0.021997018890940077173,   0.021156379712221389815,
      0.020292360917011132180,   0.019405917321982004886,
      0.018498028525665910954,   0.017569697826143251999,
      0.016621951112665496638,   0.015655835732515557860,
      0.014672419334499464204,   0.013672788690606878506,
      0.012658048497638994445,   0.011629320161122414596,
      0.010587740564954122237,   0.0095344608328651582501,
      0.0084706450945346359999,  0.0073974692881423562009,
      0.0063161200910364482231,  0.0052277942895077675453,
      0.0041336998754077764833,  0.0030350658910386280274,
      0.0019332198887254189431,  0.00083087161268216249463};
  IntegratorXX::GaussLegendre<double, double> quad(94);
  const auto& pts = quad.points();
  const auto& wgt = quad.weights();
  for(auto i = 0ul; i < 94; i++) {
    REQUIRE_THAT(pts[i], Catch::Matchers::WithinAbs(ref_pts[i], x_tolerance));
    REQUIRE_THAT(wgt[i], Catch::Matchers::WithinAbs(ref_wgt[i], w_tolerance));
  }
}

TEST_CASE("95 point GaussLegendre", "[1d-quad]") {
  std::array<double, 95> ref_pts = {
      -0.99968296770719201948,  -0.99832995251674633162,
      -0.99589731118842340206,  -0.99238713500350140449,
      -0.98780315590608128777,  -0.98215031822162564610,
      -0.97543473341144091169,  -0.96766366602219652412,
      -0.95884552384790944943,  -0.94898984817429548204,
      -0.93810730319847803714,  -0.92620966437771977563,
      -0.91330980563406734740,  -0.89942168539639320374,
      -0.88456033148144055748,  -0.86874182482412990474,
      -0.85198328207178428084,  -0.83430283705960132221,
      -0.81571962118660965386,  -0.79625374271289318867,
      -0.77592626500022395623,  -0.75475918371949239225,
      -0.73277540304950211834,  -0.70999871089282310580,
      -0.68645375313548220924,  -0.66216600697831802626,
      -0.63716175336884002718,  -0.61146804856341069607,
      -0.58511269485051408929,  -0.55812421046678440395,
      -0.53053179873834328926,  -0.50236531648083404332,
      -0.47365524169234377757,  -0.44443264057417034046,
      -0.41472913391511851597,  -0.38457686287569901085,
      -0.35400845420925330582,  -0.32305698495763688928,
      -0.29175594665966207348,  -0.26013920911102890946,
      -0.22824098371495810364,  -0.19609578646318277850,
      -0.16373840058735593495,  -0.13120383892128713615,
      -0.098527306014734857520, -0.065744160039749798572,
      -0.032889874530788938677, 0,
      0.032889874530788938677,  0.065744160039749798572,
      0.098527306014734857520,  0.13120383892128713615,
      0.16373840058735593495,   0.19609578646318277850,
      0.22824098371495810364,   0.26013920911102890946,
      0.29175594665966207348,   0.32305698495763688928,
      0.35400845420925330582,   0.38457686287569901085,
      0.41472913391511851597,   0.44443264057417034046,
      0.47365524169234377757,   0.50236531648083404332,
      0.53053179873834328926,   0.55812421046678440395,
      0.58511269485051408929,   0.61146804856341069607,
      0.63716175336884002718,   0.66216600697831802626,
      0.68645375313548220924,   0.70999871089282310580,
      0.73277540304950211834,   0.75475918371949239225,
      0.77592626500022395623,   0.79625374271289318867,
      0.81571962118660965386,   0.83430283705960132221,
      0.85198328207178428084,   0.86874182482412990474,
      0.88456033148144055748,   0.89942168539639320374,
      0.91330980563406734740,   0.92620966437771977563,
      0.93810730319847803714,   0.94898984817429548204,
      0.95884552384790944943,   0.96766366602219652412,
      0.97543473341144091169,   0.98215031822162564610,
      0.98780315590608128777,   0.99238713500350140449,
      0.99589731118842340206,   0.99832995251674633162,
      0.99968296770719201948};
  std::array<double, 95> ref_wgt = {
      0.00081356424945411650101, 0.0018929683779229357628,
      0.0029719242408181907184,  0.0040478033163717599069,
      0.0051193303299277182800,  0.0061853262610333237693,
      0.0072446324439331996726,  0.0082961008745309902381,
      0.0093385930838763970867,  0.010370980703116096841,
      0.011392146459085844039,   0.012400985296116061040,
      0.013396405534368285441,   0.014377330033659082084,
      0.015342697350288356635,   0.016291462880991043266,
      0.017222599990716984413,   0.018135101122045144108,
      0.019027978884545706393,   0.019900267122657211245,
      0.020751021960784901818,   0.021579322824411401207,
      0.022384273436069391840,   0.023165002785071391749,
      0.023920666069930610077,   0.024650445612442619976,
      0.025353551742432012937,   0.026029223652202271533,
      0.026676730219761354319,   0.027295370799930222666,
      0.027884475982476914243,   0.028443408316454862613,
      0.028971562999961011535,   0.029468368534566882375,
      0.029933287343714112252,   0.030365816354405066777,
      0.030765487541558914753,   0.031131868434443998257,
      0.031464562584638402013,   0.031763209995012280291,
      0.032027487509267695293,   0.032257109161614414347,
      0.032451826486203259267,   0.032611428785982154257,
      0.032735743360683932269,   0.032824635693699186693,
      0.032878009597631948236,   0.032895807318380677932,
      0.032878009597631948236,   0.032824635693699186693,
      0.032735743360683932269,   0.032611428785982154257,
      0.032451826486203259267,   0.032257109161614414347,
      0.032027487509267695293,   0.031763209995012280291,
      0.031464562584638402013,   0.031131868434443998257,
      0.030765487541558914753,   0.030365816354405066777,
      0.029933287343714112252,   0.029468368534566882375,
      0.028971562999961011535,   0.028443408316454862613,
      0.027884475982476914243,   0.027295370799930222666,
      0.026676730219761354319,   0.026029223652202271533,
      0.025353551742432012937,   0.024650445612442619976,
      0.023920666069930610077,   0.023165002785071391749,
      0.022384273436069391840,   0.021579322824411401207,
      0.020751021960784901818,   0.019900267122657211245,
      0.019027978884545706393,   0.018135101122045144108,
      0.017222599990716984413,   0.016291462880991043266,
      0.015342697350288356635,   0.014377330033659082084,
      0.013396405534368285441,   0.012400985296116061040,
      0.011392146459085844039,   0.010370980703116096841,
      0.0093385930838763970867,  0.0082961008745309902381,
      0.0072446324439331996726,  0.0061853262610333237693,
      0.0051193303299277182800,  0.0040478033163717599069,
      0.0029719242408181907184,  0.0018929683779229357628,
      0.00081356424945411650101};
  IntegratorXX::GaussLegendre<double, double> quad(95);
  const auto& pts = quad.points();
  const auto& wgt = quad.weights();
  for(auto i = 0ul; i < 95; i++) {
    REQUIRE_THAT(pts[i], Catch::Matchers::WithinAbs(ref_pts[i], x_tolerance));
    REQUIRE_THAT(wgt[i], Catch::Matchers::WithinAbs(ref_wgt[i], w_tolerance));
  }
}

TEST_CASE("96 point GaussLegendre", "[1d-quad]") {
  std::array<double, 96> ref_pts = {
      -0.99968950388323076683,  -0.99836437586318167772,
      -0.99598184298720929065,  -0.99254390032376262457,
      -0.98805412632962379948,  -0.98251726356301467745,
      -0.97593917458513646645,  -0.96832682846326421217,
      -0.95968829144874253930,  -0.95003271778443763576,
      -0.93937033975275521693,  -0.92771245672230869096,
      -0.91507142312089807421,  -0.90146063531585234132,
      -0.88689451740242041606,  -0.87138850590929650287,
      -0.85495903343460145546,  -0.83762351122818712149,
      -0.81940031073793167554,  -0.80030874413914081723,
      -0.78036904386743321760,  -0.75960234117664749870,
      -0.73803064374440013285,  -0.71567681234896762622,
      -0.69256453664217156134,  -0.66871831004391615395,
      -0.64416340378496710680,  -0.61892584012546857039,
      -0.59303236477757208068,  -0.56651041856139716840,
      -0.53938810832435743623,  -0.51169417715466767359,
      -0.48345797392059635977,  -0.45470942216774300864,
      -0.42547898840730054536,  -0.39579764982890860328,
      -0.36569686147231363503,  -0.33520852289262542262,
      -0.30436494435449635302,  -0.27319881259104914149,
      -0.24174315616384001233,  -0.21003131046056720360,
      -0.17809688236761860276,  -0.14597371465489694199,
      -0.11369585011066592091,  -0.081297495464425558994,
      -0.048812985136049731112, -0.016276744849602969579,
      0.016276744849602969579,  0.048812985136049731112,
      0.081297495464425558994,  0.11369585011066592091,
      0.14597371465489694199,   0.17809688236761860276,
      0.21003131046056720360,   0.24174315616384001233,
      0.27319881259104914149,   0.30436494435449635302,
      0.33520852289262542262,   0.36569686147231363503,
      0.39579764982890860328,   0.42547898840730054536,
      0.45470942216774300864,   0.48345797392059635977,
      0.51169417715466767359,   0.53938810832435743623,
      0.56651041856139716840,   0.59303236477757208068,
      0.61892584012546857039,   0.64416340378496710680,
      0.66871831004391615395,   0.69256453664217156134,
      0.71567681234896762622,   0.73803064374440013285,
      0.75960234117664749870,   0.78036904386743321760,
      0.80030874413914081723,   0.81940031073793167554,
      0.83762351122818712149,   0.85495903343460145546,
      0.87138850590929650287,   0.88689451740242041606,
      0.90146063531585234132,   0.91507142312089807421,
      0.92771245672230869096,   0.93937033975275521693,
      0.95003271778443763576,   0.95968829144874253930,
      0.96832682846326421217,   0.97593917458513646645,
      0.98251726356301467745,   0.98805412632962379948,
      0.99254390032376262457,   0.99598184298720929065,
      0.99836437586318167772,   0.99968950388323076683};
  std::array<double, 96> ref_wgt = {
      0.00079679206555201242945, 0.0018539607889469217323,
      0.0029107318179349464084,  0.0039645543384446866737,
      0.0050142027429275176925,  0.0060585455042359616833,
      0.0070964707911538652691,  0.0081268769256987592174,
      0.0091486712307833866326,  0.010160770535008415758,
      0.011162102099838498591,   0.012151604671088319635,
      0.013128229566961572637,   0.014090941772314860916,
      0.015038721026994938006,   0.015970562902562291381,
      0.016885479864245172450,   0.017782502316045260838,
      0.018660679627411467385,   0.019519081140145022410,
      0.020356797154333324595,   0.021172939892191298988,
      0.021966644438744349195,   0.022737069658329374001,
      0.023483399085926219842,   0.024204841792364691282,
      0.024900633222483610288,   0.025570036005349361499,
      0.026212340735672413913,   0.026826866725591762198,
      0.027412962726029242823,   0.027970007616848334440,
      0.028497411065085385646,   0.028994614150555236543,
      0.029461089958167905970,   0.029896344136328385984,
      0.030299915420827593794,   0.030671376123669149014,
      0.031010332586313837423,   0.031316425596861355813,
      0.031589330770727168558,   0.031828758894411006535,
      0.032034456231992663218,   0.032206204794030250669,
      0.032343822568575928429,   0.032447163714064269364,
      0.032516118713868835987,   0.032550614492363166242,
      0.032550614492363166242,   0.032516118713868835987,
      0.032447163714064269364,   0.032343822568575928429,
      0.032206204794030250669,   0.032034456231992663218,
      0.031828758894411006535,   0.031589330770727168558,
      0.031316425596861355813,   0.031010332586313837423,
      0.030671376123669149014,   0.030299915420827593794,
      0.029896344136328385984,   0.029461089958167905970,
      0.028994614150555236543,   0.028497411065085385646,
      0.027970007616848334440,   0.027412962726029242823,
      0.026826866725591762198,   0.026212340735672413913,
      0.025570036005349361499,   0.024900633222483610288,
      0.024204841792364691282,   0.023483399085926219842,
      0.022737069658329374001,   0.021966644438744349195,
      0.021172939892191298988,   0.020356797154333324595,
      0.019519081140145022410,   0.018660679627411467385,
      0.017782502316045260838,   0.016885479864245172450,
      0.015970562902562291381,   0.015038721026994938006,
      0.014090941772314860916,   0.013128229566961572637,
      0.012151604671088319635,   0.011162102099838498591,
      0.010160770535008415758,   0.0091486712307833866326,
      0.0081268769256987592174,  0.0070964707911538652691,
      0.0060585455042359616833,  0.0050142027429275176925,
      0.0039645543384446866737,  0.0029107318179349464084,
      0.0018539607889469217323,  0.00079679206555201242945};
  IntegratorXX::GaussLegendre<double, double> quad(96);
  const auto& pts = quad.points();
  const auto& wgt = quad.weights();
  for(auto i = 0ul; i < 96; i++) {
    REQUIRE_THAT(pts[i], Catch::Matchers::WithinAbs(ref_pts[i], x_tolerance));
    REQUIRE_THAT(wgt[i], Catch::Matchers::WithinAbs(ref_wgt[i], w_tolerance));
  }
}

TEST_CASE("97 point GaussLegendre", "[1d-quad]") {
  std::array<double, 97> ref_pts = {-0.99969583999524672491,
                                    -0.99839774586056643673,
                                    -0.99606378947748841302,
                                    -0.99269587477855160926,
                                    -0.98829743450183878732,
                                    -0.98287301961352835104,
                                    -0.97642825630861976492,
                                    -0.96896983303495092210,
                                    -0.96050549165278724616,
                                    -0.95104401876663919521,
                                    -0.94059523635802798437,
                                    -0.92916999148161914082,
                                    -0.91678014495318888805,
                                    -0.90343855901012161641,
                                    -0.88915908394430036204,
                                    -0.87395654371541421536,
                                    -0.85784672055679030126,
                                    -0.84084633858828676746,
                                    -0.82297304645248444175,
                                    -0.80424539899177056548,
                                    -0.78468283798508572883,
                                    -0.76430567196418205690,
                                    -0.74313505513025393804,
                                    -0.72119296539277052495,
                                    -0.69850218155327111664,
                                    -0.67508625965778496582,
                                    -0.65096950854240825511,
                                    -0.62617696459741385451,
                                    -0.60073436577608420838,
                                    -0.57466812487524410433,
                                    -0.54800530211522773466,
                                    -0.52077357704774283655,
                                    -0.49300121982079319725,
                                    -0.46471706183048881341,
                                    -0.43595046579020987644,
                                    -0.40673129524819590288,
                                    -0.37708988358520414430,
                                    -0.34705700252442132148,
                                    -0.31666383018631918806,
                                    -0.28594191872161692317,
                                    -0.25492316155595139902,
                                    -0.22363976028025951756,
                                    -0.19212419122124464624,
                                    -0.16040917172663132738,
                                    -0.12852762620020854547,
                                    -0.096512651921921606902,
                                    -0.064397484688495848022,
                                    -0.032215464310261708911,
                                    0,
                                    0.032215464310261708911,
                                    0.064397484688495848022,
                                    0.096512651921921606902,
                                    0.12852762620020854547,
                                    0.16040917172663132738,
                                    0.19212419122124464624,
                                    0.22363976028025951756,
                                    0.25492316155595139902,
                                    0.28594191872161692317,
                                    0.31666383018631918806,
                                    0.34705700252442132148,
                                    0.37708988358520414430,
                                    0.40673129524819590288,
                                    0.43595046579020987644,
                                    0.46471706183048881341,
                                    0.49300121982079319725,
                                    0.52077357704774283655,
                                    0.54800530211522773466,
                                    0.57466812487524410433,
                                    0.60073436577608420838,
                                    0.62617696459741385451,
                                    0.65096950854240825511,
                                    0.67508625965778496582,
                                    0.69850218155327111664,
                                    0.72119296539277052495,
                                    0.74313505513025393804,
                                    0.76430567196418205690,
                                    0.78468283798508572883,
                                    0.80424539899177056548,
                                    0.82297304645248444175,
                                    0.84084633858828676746,
                                    0.85784672055679030126,
                                    0.87395654371541421536,
                                    0.88915908394430036204,
                                    0.90343855901012161641,
                                    0.91678014495318888805,
                                    0.92916999148161914082,
                                    0.94059523635802798437,
                                    0.95104401876663919521,
                                    0.96050549165278724616,
                                    0.96896983303495092210,
                                    0.97642825630861976492,
                                    0.98287301961352835104,
                                    0.98829743450183878732,
                                    0.99269587477855160926,
                                    0.99606378947748841302,
                                    0.99839774586056643673,
                                    0.99969583999524672491};
  std::array<double, 97> ref_wgt = {
      0.00078053322194256124567, 0.0018161463982100396095,
      0.0028514092432130557714,  0.0038838453294892944217,
      0.0049122762621660281308,  0.0059356156307882229542,
      0.0069527960964694055265,  0.0079627599978654955956,
      0.0089644581766979994326,  0.0099568504270840449482,
      0.010938906359195948954,   0.011909606385330756833,
      0.012867942742493386676,   0.013812920521853043271,
      0.014743558693236950176,   0.015658891119156920520,
      0.016557967555342456629,   0.017439854635807804639,
      0.018303636840964140822,   0.019148417447528129335,
      0.019973319459108046888,   0.020777486516426568498,
      0.021560083786191718278,   0.022320298827667132379,
      0.023057342436025995796,   0.023770449461603068821,
      0.024458879604187847291,   0.025121918181530046736,
      0.025758876871256784895,   0.026369094425429349757,
      0.026951937356996440674,   0.027506800597430342560,
      0.028033108124862677527,   0.028530313562067187518,
      0.028997900743668431872,   0.029435384251987320864,
      0.029842309920967029035,   0.030218255307656014535,
      0.030562830130758583861,   0.030875676675797653824,
      0.031156470166469041458,   0.031404919101801723625,
      0.031620765558774016043,   0.031803785460071490445,
      0.031953788806708641945,   0.032070619875272799349,
      0.032154157379585501536,   0.032204314596613505335,
      0.032221039456498706326,   0.032204314596613505335,
      0.032154157379585501536,   0.032070619875272799349,
      0.031953788806708641945,   0.031803785460071490445,
      0.031620765558774016043,   0.031404919101801723625,
      0.031156470166469041458,   0.030875676675797653824,
      0.030562830130758583861,   0.030218255307656014535,
      0.029842309920967029035,   0.029435384251987320864,
      0.028997900743668431872,   0.028530313562067187518,
      0.028033108124862677527,   0.027506800597430342560,
      0.026951937356996440674,   0.026369094425429349757,
      0.025758876871256784895,   0.025121918181530046736,
      0.024458879604187847291,   0.023770449461603068821,
      0.023057342436025995796,   0.022320298827667132379,
      0.021560083786191718278,   0.020777486516426568498,
      0.019973319459108046888,   0.019148417447528129335,
      0.018303636840964140822,   0.017439854635807804639,
      0.016557967555342456629,   0.015658891119156920520,
      0.014743558693236950176,   0.013812920521853043271,
      0.012867942742493386676,   0.011909606385330756833,
      0.010938906359195948954,   0.0099568504270840449482,
      0.0089644581766979994326,  0.0079627599978654955956,
      0.0069527960964694055265,  0.0059356156307882229542,
      0.0049122762621660281308,  0.0038838453294892944217,
      0.0028514092432130557714,  0.0018161463982100396095,
      0.00078053322194256124567};
  IntegratorXX::GaussLegendre<double, double> quad(97);
  const auto& pts = quad.points();
  const auto& wgt = quad.weights();
  for(auto i = 0ul; i < 97; i++) {
    REQUIRE_THAT(pts[i], Catch::Matchers::WithinAbs(ref_pts[i], x_tolerance));
    REQUIRE_THAT(wgt[i], Catch::Matchers::WithinAbs(ref_wgt[i], w_tolerance));
  }
}

TEST_CASE("98 point GaussLegendre", "[1d-quad]") {
  std::array<double, 98> ref_pts = {
      -0.99970198412549090364,  -0.99843010504723045378,
      -0.99614325499685929606,  -0.99284325153690673013,
      -0.98853338898915816837,  -0.98321803629372299129,
      -0.97690259506388608250,  -0.96959348710079447232,
      -0.96129814600289105771,  -0.95202500898640150131,
      -0.94178350806271182110,  -0.93058406033930704212,
      -0.91843805737356811720,  -0.90535785355983913595,
      -0.89135675354889106643,  -0.87644899870684410511,
      -0.86064975262455175316,  -0.84397508569077046729,
      -0.82644195874404785511,  -0.80806820581953435129,
      -0.78887251600802226670,  -0.76887441444551779712,
      -0.74809424245259245064,  -0.72655313684365848091,
      -0.70427300842717742366,  -0.68127651971864632080,
      -0.65758706188901490516,  -0.63322873097196986188,
      -0.60822630335427953351,  -0.58260521057412395965,
      -0.55639151345304058646,  -0.52961187558779487625,
      -0.50229353622913685982,  -0.47446428257502884413,
      -0.44615242150652544860,  -0.41738675079505433418,
      -0.38819652981038386372,  -0.35861144975907196525,
      -0.32866160348366815882,  -0.29837745485338757716,
      -0.26778980777739141373,  -0.23692977487219215099,
      -0.20582874581505377031,  -0.17451835541557656788,
      -0.14303045143794287517,  -0.11139706220655361800,
      -0.079650364028005988213, -0.047822648462549322963,
      -0.015946289478309399288, 0.015946289478309399288,
      0.047822648462549322963,  0.079650364028005988213,
      0.11139706220655361800,   0.14303045143794287517,
      0.17451835541557656788,   0.20582874581505377031,
      0.23692977487219215099,   0.26778980777739141373,
      0.29837745485338757716,   0.32866160348366815882,
      0.35861144975907196525,   0.38819652981038386372,
      0.41738675079505433418,   0.44615242150652544860,
      0.47446428257502884413,   0.50229353622913685982,
      0.52961187558779487625,   0.55639151345304058646,
      0.58260521057412395965,   0.60822630335427953351,
      0.63322873097196986188,   0.65758706188901490516,
      0.68127651971864632080,   0.70427300842717742366,
      0.72655313684365848091,   0.74809424245259245064,
      0.76887441444551779712,   0.78887251600802226670,
      0.80806820581953435129,   0.82644195874404785511,
      0.84397508569077046729,   0.86064975262455175316,
      0.87644899870684410511,   0.89135675354889106643,
      0.90535785355983913595,   0.91843805737356811720,
      0.93058406033930704212,   0.94178350806271182110,
      0.95202500898640150131,   0.96129814600289105771,
      0.96959348710079447232,   0.97690259506388608250,
      0.98321803629372299129,   0.98853338898915816837,
      0.99284325153690673013,   0.99614325499685929606,
      0.99843010504723045378,   0.99970198412549090364};
  std::array<double, 98> ref_wgt = {
      0.00076476698227431345804, 0.0017794770410145287417,
      0.0027938811357221308706,  0.0038055740853523595655,
      0.0048134223985867709185,  0.0058163825464396391128,
      0.0068134294791652159988,  0.0078035473791007548910,
      0.0087857284673922632027,  0.0097589734021740968354,
      0.010722292083224317120,   0.011674704577138124287,
      0.012615242078921952858,   0.013542947881029465144,
      0.014456878338304401978,   0.015356103823497755768,
      0.016239709670453695653,   0.017106797103089900262,
      0.017956484148770628122,   0.018787906534904686561,
      0.019600218567726330773,   0.020392593992291914579,
      0.021164226832774856911,   0.021914332212178650419,
      0.022642147150618433111,   0.023346931341349274713,
      0.024027967903745498803,   0.024684564112460996182,
      0.025316052102026097343,   0.025921789546162448918,
      0.026501160311123639352,   0.027053575082396128278,
      0.027578471964122393900,   0.028075317050636138753,
      0.028543604969527885703,   0.028982859395688342047,
      0.029392633535806492168,   0.029772510582829476266,
      0.030122104139921898849,   0.030441058613493258395,
      0.030729049574893669920,   0.030985784090409934631,
      0.031211001019226264417,   0.031404471279046561517,
      0.031565998079108052901,   0.031695417120349251609,
      0.031792596762528630198,   0.031857438158124010713,
      0.031889875352876467278,   0.031889875352876467278,
      0.031857438158124010713,   0.031792596762528630198,
      0.031695417120349251609,   0.031565998079108052901,
      0.031404471279046561517,   0.031211001019226264417,
      0.030985784090409934631,   0.030729049574893669920,
      0.030441058613493258395,   0.030122104139921898849,
      0.029772510582829476266,   0.029392633535806492168,
      0.028982859395688342047,   0.028543604969527885703,
      0.028075317050636138753,   0.027578471964122393900,
      0.027053575082396128278,   0.026501160311123639352,
      0.025921789546162448918,   0.025316052102026097343,
      0.024684564112460996182,   0.024027967903745498803,
      0.023346931341349274713,   0.022642147150618433111,
      0.021914332212178650419,   0.021164226832774856911,
      0.020392593992291914579,   0.019600218567726330773,
      0.018787906534904686561,   0.017956484148770628122,
      0.017106797103089900262,   0.016239709670453695653,
      0.015356103823497755768,   0.014456878338304401978,
      0.013542947881029465144,   0.012615242078921952858,
      0.011674704577138124287,   0.010722292083224317120,
      0.0097589734021740968354,  0.0087857284673922632027,
      0.0078035473791007548910,  0.0068134294791652159988,
      0.0058163825464396391128,  0.0048134223985867709185,
      0.0038055740853523595655,  0.0027938811357221308706,
      0.0017794770410145287417,  0.00076476698227431345804};
  IntegratorXX::GaussLegendre<double, double> quad(98);
  const auto& pts = quad.points();
  const auto& wgt = quad.weights();
  for(auto i = 0ul; i < 98; i++) {
    REQUIRE_THAT(pts[i], Catch::Matchers::WithinAbs(ref_pts[i], x_tolerance));
    REQUIRE_THAT(wgt[i], Catch::Matchers::WithinAbs(ref_wgt[i], w_tolerance));
  }
}

TEST_CASE("99 point GaussLegendre", "[1d-quad]") {
  std::array<double, 99> ref_pts = {
      -0.99970794395216935586,  -0.99846149383584133897,
      -0.99622033867308860856,  -0.99298621413311227733,
      -0.98876228298987361251,  -0.98355274115628001297,
      -0.97736277675070594457,  -0.97019855807429021548,
      -0.96206722564090194274,  -0.95297688445337350258,
      -0.94293659568847941029,  -0.93195636756149696436,
      -0.92004714530050021872,  -0.90722080021057356824,
      -0.89349011782641421500,  -0.87886878515951385027,
      -0.86337137704991704443,  -0.84701334163477414730,
      -0.82981098494743056503,  -0.81178145466198913468,
      -0.79294272299930889391,  -0.77331356881133614520,
      -0.75291355886153811825,  -0.73176302832004352218,
      -0.70988306049289685821,  -0.68729546580560909750,
      -0.66402276006193845756,  -0.64008814199956252510,
      -0.61551547016500717705,  -0.59032923913087856422,
      -0.56455455507910155074,  -0.53821711077450103255,
      -0.51134315995367101422,  -0.48395949115465970018,
      -0.45609340101355663729,  -0.42777266705459962176,
      -0.39902552000092415238,  -0.36988061563355619373,
      -0.34036700622669944304,  -0.31051411158779073632,
      -0.28035168973119126718,  -0.24990980721474653936,
      -0.21921880916878407039,  -0.18830928904742447642,
      -0.15721205813235839438,  -0.12595811481948846172,
      -0.094578613719052031876, -0.063104834600026240206,
      -0.031568151209772265203, 0,
      0.031568151209772265203,  0.063104834600026240206,
      0.094578613719052031876,  0.12595811481948846172,
      0.15721205813235839438,   0.18830928904742447642,
      0.21921880916878407039,   0.24990980721474653936,
      0.28035168973119126718,   0.31051411158779073632,
      0.34036700622669944304,   0.36988061563355619373,
      0.39902552000092415238,   0.42777266705459962176,
      0.45609340101355663729,   0.48395949115465970018,
      0.51134315995367101422,   0.53821711077450103255,
      0.56455455507910155074,   0.59032923913087856422,
      0.61551547016500717705,   0.64008814199956252510,
      0.66402276006193845756,   0.68729546580560909750,
      0.70988306049289685821,   0.73176302832004352218,
      0.75291355886153811825,   0.77331356881133614520,
      0.79294272299930889391,   0.81178145466198913468,
      0.82981098494743056503,   0.84701334163477414730,
      0.86337137704991704443,   0.87886878515951385027,
      0.89349011782641421500,   0.90722080021057356824,
      0.92004714530050021872,   0.93195636756149696436,
      0.94293659568847941029,   0.95297688445337350258,
      0.96206722564090194274,   0.97019855807429021548,
      0.97736277675070594457,   0.98355274115628001297,
      0.98876228298987361251,   0.99298621413311227733,
      0.99622033867308860856,   0.99846149383584133897,
      0.99970794395216935586};
  std::array<double, 99> ref_wgt = {
      0.00074947364673740536340, 0.0017439069582192449386,
      0.0027380758736268780913,  0.0037296434872430347492,
      0.0047175190375208300797,  0.0057006997733959268752,
      0.0066782008605750981652,  0.0076490462793352579354,
      0.0086122676154788889917,  0.0095669044113261363569,
      0.010512004915524745406,   0.011446626951498253761,
      0.012369838822175162103,   0.013280720222657283480,
      0.014178363149579446066,   0.015061872801990233313,
      0.015930368470960849711,   0.016782984416138707090,
      0.017618870727924380507,   0.018437194174178499271,
      0.019237139030487184799,   0.020017907893086566208,
      0.020778722473594211207,   0.021518824374730223818,
      0.022237475846239371584,   0.022933960520251055284,
      0.023607584125337894047,   0.024257675178557078232,
      0.024883585654781946446,   0.025484691632654754651,
      0.026060393916515482541,   0.026610118633685851302,
      0.027133317806512550926,   0.027629469898599012322,
      0.028098080334680911266,   0.028538681993626949727,
      0.028950835674073310404,   0.029334130532227503476,
      0.029688184491405098448,   0.030012644622891034472,
      0.030307187497745803980,   0.030571519509205779992,
      0.030805377165356279499,   0.031008527351785595358,
      0.031180767563958158370,   0.031321926109075180128,
      0.031431862277221546162,   0.031510466481628347713,
      0.031557660367911228858,   0.031573396892175653051,
      0.031557660367911228858,   0.031510466481628347713,
      0.031431862277221546162,   0.031321926109075180128,
      0.031180767563958158370,   0.031008527351785595358,
      0.030805377165356279499,   0.030571519509205779992,
      0.030307187497745803980,   0.030012644622891034472,
      0.029688184491405098448,   0.029334130532227503476,
      0.028950835674073310404,   0.028538681993626949727,
      0.028098080334680911266,   0.027629469898599012322,
      0.027133317806512550926,   0.026610118633685851302,
      0.026060393916515482541,   0.025484691632654754651,
      0.024883585654781946446,   0.024257675178557078232,
      0.023607584125337894047,   0.022933960520251055284,
      0.022237475846239371584,   0.021518824374730223818,
      0.020778722473594211207,   0.020017907893086566208,
      0.019237139030487184799,   0.018437194174178499271,
      0.017618870727924380507,   0.016782984416138707090,
      0.015930368470960849711,   0.015061872801990233313,
      0.014178363149579446066,   0.013280720222657283480,
      0.012369838822175162103,   0.011446626951498253761,
      0.010512004915524745406,   0.0095669044113261363569,
      0.0086122676154788889917,  0.0076490462793352579354,
      0.0066782008605750981652,  0.0057006997733959268752,
      0.0047175190375208300797,  0.0037296434872430347492,
      0.0027380758736268780913,  0.0017439069582192449386,
      0.00074947364673740536340};
  IntegratorXX::GaussLegendre<double, double> quad(99);
  const auto& pts = quad.points();
  const auto& wgt = quad.weights();
  for(auto i = 0ul; i < 99; i++) {
    REQUIRE_THAT(pts[i], Catch::Matchers::WithinAbs(ref_pts[i], x_tolerance));
    REQUIRE_THAT(wgt[i], Catch::Matchers::WithinAbs(ref_wgt[i], w_tolerance));
  }
}

TEST_CASE("100 point GaussLegendre", "[1d-quad]") {
  std::array<double, 100> ref_pts = {
      -0.99971372677344123368,  -0.99849195063959581840,
      -0.99629513473312514919,  -0.99312493703744345965,
      -0.98898439524299174800,  -0.98387754070605701550,
      -0.97780935848691828855,  -0.97078577576370633193,
      -0.96281365425581552729,  -0.95390078292549174285,
      -0.94405587013625597796,  -0.93328853504307954592,
      -0.92160929814533395267,  -0.90902957098252969047,
      -0.89556164497072698670,  -0.88121867938501841557,
      -0.86601468849716462341,  -0.84996452787959128429,
      -0.83308387988840082354,  -0.81538923833917625439,
      -0.79689789239031447639,  -0.77762790964949547563,
      -0.75759811851970717604,  -0.73682808980202070551,
      -0.71533811757305644646,  -0.69314919935580196595,
      -0.67028301560314101580,  -0.64676190851412927983,
      -0.62260886020370777160,  -0.59784747024717872126,
      -0.57250193262138119132,  -0.54659701206509416747,
      -0.52015801988176305665,  -0.49321078920819093357,
      -0.46578164977335804225,  -0.43789740217203151311,
      -0.40958529167830154253,  -0.38087298162462995676,
      -0.35178852637242172097,  -0.32236034390052915172,
      -0.29261718803847196474,  -0.26258812037150347917,
      -0.23230248184497396965,  -0.20178986409573599724,
      -0.17108008053860327489,  -0.14020313723611397321,
      -0.10918920358006111500,  -0.078068582813436636695,
      -0.046871682421591631615, -0.015628984421543082872,
      0.015628984421543082872,  0.046871682421591631615,
      0.078068582813436636695,  0.10918920358006111500,
      0.14020313723611397321,   0.17108008053860327489,
      0.20178986409573599724,   0.23230248184497396965,
      0.26258812037150347917,   0.29261718803847196474,
      0.32236034390052915172,   0.35178852637242172097,
      0.38087298162462995676,   0.40958529167830154253,
      0.43789740217203151311,   0.46578164977335804225,
      0.49321078920819093357,   0.52015801988176305665,
      0.54659701206509416747,   0.57250193262138119132,
      0.59784747024717872126,   0.62260886020370777160,
      0.64676190851412927983,   0.67028301560314101580,
      0.69314919935580196595,   0.71533811757305644646,
      0.73682808980202070551,   0.75759811851970717604,
      0.77762790964949547563,   0.79689789239031447639,
      0.81538923833917625439,   0.83308387988840082354,
      0.84996452787959128429,   0.86601468849716462341,
      0.88121867938501841557,   0.89556164497072698670,
      0.90902957098252969047,   0.92160929814533395267,
      0.93328853504307954592,   0.94405587013625597796,
      0.95390078292549174285,   0.96281365425581552729,
      0.97078577576370633193,   0.97780935848691828855,
      0.98387754070605701550,   0.98898439524299174800,
      0.99312493703744345965,   0.99629513473312514919,
      0.99849195063959581840,   0.99971372677344123368};
  std::array<double, 100> ref_wgt = {
      0.00073463449050567173032, 0.0017093926535181052395,
      0.0026839253715534824194,  0.0036559612013263751823,
      0.0046244500634221193511,  0.0055884280038655151572,
      0.0065469484508453227642,  0.0074990732554647115788,
      0.0084438714696689714026,  0.0093804196536944579514,
      0.010307802574868969586,   0.011225114023185977117,
      0.012131457662979497408,   0.013025947892971542286,
      0.013907710703718772688,   0.014775884527441301769,
      0.015629621077546002724,   0.016468086176145212643,
      0.017290460568323582439,   0.018095940722128116664,
      0.018883739613374904553,   0.019653087494435305865,
      0.020403232646209432767,   0.021133442112527641543,
      0.021843002416247386314,   0.022531220256336272702,
      0.023197423185254121622,   0.023840960265968205963,
      0.024461202707957052720,   0.025057544481579589704,
      0.025629402910208116076,   0.026176219239545676342,
      0.026697459183570962660,   0.027192613446576880136,
      0.027661198220792388294,   0.028102755659101173318,
      0.028516854322395097991,   0.028903089601125203135,
      0.029261084110638276620,   0.029590488059912642512,
      0.029890979593332830917,   0.030162265105169144919,
      0.030404079526454820016,   0.030616186583980448496,
      0.030798379031152590428,   0.030950478850490988234,
      0.031072337427566516588,   0.031163835696209906784,
      0.031224884254849357732,   0.031255423453863356948,
      0.031255423453863356948,   0.031224884254849357732,
      0.031163835696209906784,   0.031072337427566516588,
      0.030950478850490988234,   0.030798379031152590428,
      0.030616186583980448496,   0.030404079526454820016,
      0.030162265105169144919,   0.029890979593332830917,
      0.029590488059912642512,   0.029261084110638276620,
      0.028903089601125203135,   0.028516854322395097991,
      0.028102755659101173318,   0.027661198220792388294,
      0.027192613446576880136,   0.026697459183570962660,
      0.026176219239545676342,   0.025629402910208116076,
      0.025057544481579589704,   0.024461202707957052720,
      0.023840960265968205963,   0.023197423185254121622,
      0.022531220256336272702,   0.021843002416247386314,
      0.021133442112527641543,   0.020403232646209432767,
      0.019653087494435305865,   0.018883739613374904553,
      0.018095940722128116664,   0.017290460568323582439,
      0.016468086176145212643,   0.015629621077546002724,
      0.014775884527441301769,   0.013907710703718772688,
      0.013025947892971542286,   0.012131457662979497408,
      0.011225114023185977117,   0.010307802574868969586,
      0.0093804196536944579514,  0.0084438714696689714026,
      0.0074990732554647115788,  0.0065469484508453227642,
      0.0055884280038655151572,  0.0046244500634221193511,
      0.0036559612013263751823,  0.0026839253715534824194,
      0.0017093926535181052395,  0.00073463449050567173032};
  IntegratorXX::GaussLegendre<double, double> quad(100);
  const auto& pts = quad.points();
  const auto& wgt = quad.weights();
  for(auto i = 0ul; i < 100; i++) {
    REQUIRE_THAT(pts[i], Catch::Matchers::WithinAbs(ref_pts[i], x_tolerance));
    REQUIRE_THAT(wgt[i], Catch::Matchers::WithinAbs(ref_wgt[i], w_tolerance));
  }
}
